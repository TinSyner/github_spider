
{"categories":{"Account":["accountUpdateDeliveryDevice","accountUpdateProfile","accountUpdateProfileBackgroundImage","accountUpdateProfileColors","accountUpdateProfileImage","accountVerifyCredentials","getAccountSettings","removeProfileBanner","updateAccountSettings","updateProfileBanner"],"Block":["blockedIds","blocksList","blockUser","unblockUser"],"Local Trends":["closestTrendsTo","trendingTopics","userTrendingLocations"],"Help":["configuration","getLanguages","getRateLimitStatus"],"List":["createList","destroyList","getLists","listsMemberships","listStatuses","updateList","userListShow","userListsOwnerships","userListsSubscriptions"],"Geo":["createPlace","geocode","geoSearch","geoSimilarPlaces","getPlaceInfo"],"Saved Search":["createSavedSearch","deleteSavedSearch","savedSearches","savedSearchesById"],"Direct Message":["destroyDirectMessage","directMessages","directMessagesSent","newDirectMessage","showDirectMessage"],"Tweets":["destroyStatus","listRetweeters","oembed","retweet","retweets","showStatus","tweet","updateStatusWithMedia"],"Favorite":["favorites","favoriteStatus","unfavoriteStatus"],"Friendship":["follow","friendsIds","getUserIdRetweetNoWantedFrom","incomingFriendships","lookupFriendships","outgoingFriendships","showFriendship","unfollow","updateFriendships"],"Friends and Followers":["followers","followersList","friends","friendsList"],"Streaming":["getAllPublicStatuses","getSample","getSite","getStatusesWithFilter","streamsMessages"],"User":["getUserContributees","getUserContributors","getUserProfileBanner","lookupUsers","searchUsers","showUser","usersSuggestions","usersSuggestionsCategory","usersSuggestionsCategoryMembers"],"Timeline":["homeTimeline","mentionsTimeline","retweetsOfMe","userTimeline"],"List Subscribers":["isSubscriber","listSubscribeMe","listSubscribers","listUnsubscribeMe"],"List Members":["listAddMember","listAddMembers","listmembers","listRemoveAllMember","listRemoveMember","memberIsInList"],"Legal":["privacyPolicy","termsOfService"],"Spam Reporting":["reportUser"],"Search":["search"]},"accountUpdateDeliveryDevice":{"doc":"Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.","params":{"format":{"doc":"undefined"},"device":{"doc":"Must be one of: sms, none."},"include_entities":{"doc":"When set to either true, t or 1, each tweet will include a node called \"entities,\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future."}}},"accountUpdateProfile":{"doc":"Sets values that users are able to set under the \"Account\" tab of their settings page. Only the parameters specified will be updated.","params":{"format":{"doc":"undefined"},"name":{"doc":"Full name associated with the profile. Maximum of 20 characters."},"url":{"doc":"URL associated with the profile. Will be prepended with \"http://\" if not present. Maximum of 100 characters."},"location":{"doc":"The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters."},"description":{"doc":"A description of the user owning the account. Maximum of 160 characters."},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"accountUpdateProfileBackgroundImage":{"doc":"Updates the authenticating user's profile background image. This method can also be used to enable or disable the profile background image.                       Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.","params":{"format":{"doc":"undefined"},"tile":{"doc":"Whether or not to tile the background image. If set to true, t or 1 the background image will be displayed tiled. The image will not be tiled otherwise."},"image":{"doc":"The background image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. The image must be provided as raw multipart data, not a URL."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."},"include_entities":{"doc":"The entities node will not be included when set to false."},"use":{"doc":"Determines whether to display the profile background image or not. When set to true, t or 1 the background image will be displayed if an image is being uploaded with the request, or has been uploaded previously. An error will be returned if you try to use a background image when one is not being uploaded or does not exist. If this parameter is defined but set to anything other than true, t or 1, the background image will stop being used."}}},"accountUpdateProfileColors":{"doc":"Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).","params":{"format":{"doc":"undefined"},"profile_background_color":{"doc":"Profile background color."},"profile_link_color":{"doc":"Profile link color."},"profile_sidebar_border_color":{"doc":"Profile sidebar's border color."},"profile_sidebar_fill_color":{"doc":"Profile sidebar's background color."},"profile_text_color":{"doc":"Profile text color."},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"accountUpdateProfileImage":{"doc":"Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image.                       This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.","params":{"format":{"doc":"undefined"},"image":{"doc":"The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation."},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"accountVerifyCredentials":{"doc":"Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid.","params":{"format":{"doc":"undefined"},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"blockedIds":{"doc":"Returns an array of numeric user ids the authenticating user is blocking.                   Important On October 15, 2012 this method will become cursored by default, altering the default response format. See Using cursors to navigate collections for more details on how cursoring works.","params":{"format":{"doc":"undefined"},"sringify_ids":{"doc":"Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead."},"cursor":{"doc":"Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                    The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."}}},"blocksList":{"doc":"Returns a collection of user objects that the authenticating user is blocking.                   Important On October 15, 2012 this method will become cursored by default, altering the default response format. See Using cursors to navigate collections for more details on how cursoring works.","params":{"format":{"doc":"undefined"},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."},"cursor":{"doc":"Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                    The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."}}},"blockUser":{"doc":"Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."},"user_id":{"doc":"The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"closestTrendsTo":{"doc":"Returns the locations that Twitter has trending topic information for, closest to a specified location.                   The response is an array of \"locations\" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in.                   A WOEID is a Yahoo! Where On Earth ID.","params":{"format":{"doc":"undefined"},"lat":{"doc":"If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive."},"long":{"doc":"If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive."}}},"configuration":{"doc":"Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.               It is recommended applications request this endpoint when they are loaded, but no more than once a day.","params":{"format":{"doc":"undefined"}}},"createList":{"doc":"Creates a new list for the authenticated user. Note that you can't create more than 20 lists per account.","params":{"format":{"doc":"undefined"},"name":{"doc":"The name for the list.                        A list's name must start with a letter and can consist only of 25 or fewer letters, numbers, \"-\", or \"_\" characters."},"mode":{"doc":"Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public."},"description":{"doc":"The description to give the list."}}},"createPlace":{"doc":"Creates a new place object at the given latitude and longitude.               Before creating a place you need to query GET geo/similar_places with the latitude, longitude and name of the place you wish to create. The query will return an array of places which are similar to the one you wish to create, and a token. If the place you wish to create isn't in the returned array you can use the token with this method to create a new one.","params":{"format":{"doc":"undefined"},"lat":{"doc":"The latitude the place is located at. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."},"long":{"doc":"The longitude the place is located at. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."},"name":{"doc":"The name a place is known as."},"token":{"doc":"The token found in the response from geo/similar_places."},"contained_within":{"doc":"The place_id within which the new place can be found. Try and be as close as possible with the containing place. For example, for a room in a building, set the contained_within as the building place_id."},"street_address":{"doc":"This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted."},"callback":{"doc":"If supplied, the response will use the JSONP format with a callback of the given name."}}},"createSavedSearch":{"doc":"Create a new saved search for the authenticated user. A user may only have 25 saved searches.","params":{"format":{"doc":"undefined"},"query":{"doc":"The query of the search the user would like to save."}}},"deleteSavedSearch":{"doc":"Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.","params":{"format":{"doc":"undefined"},"id":{"doc":"The ID of the saved search."}}},"destroyDirectMessage":{"doc":"Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.                       Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.","params":{"format":{"doc":"undefined"},"id":{"doc":"The ID of the direct message to delete."},"include_entities":{"doc":"The entities node will not be included when set to false."}}},"destroyList":{"doc":"Deletes the specified list. The authenticated user must own the list to be able to destroy it. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."}}},"destroyStatus":{"doc":"Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.","params":{"format":{"doc":"undefined"},"id":{"doc":"The numerical ID of the desired status."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."}}},"directMessages":{"doc":"Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.","params":{"format":{"doc":"undefined"},"count":{"doc":"Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"page":{"doc":"Specifies the page of results to retrieve."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"directMessagesSent":{"doc":"Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.                       Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.","params":{"format":{"doc":"undefined"},"count":{"doc":"Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"page":{"doc":"Specifies the page of results to retrieve."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"include_entities":{"doc":"The entities node will not be included when set to false."}}},"favorites":{"doc":"Returns the 20 most recent Tweets favorited by the authenticating or specified user. If you do not provide either a user_id or screen_name to this method, it will assume you are requesting on behalf of the authenticating user. Specify one or the other for best results.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for."},"screen_name":{"doc":"The screen name of the user for whom to return results for."},"count":{"doc":"Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"include_entities":{"doc":"The entities node will be omitted when set to false."},"page":{"doc":"undefined"}}},"favoriteStatus":{"doc":"Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.                   This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.","params":{"format":{"doc":"undefined"},"id":{"doc":"The numerical ID of the desired status."},"include_entities":{"doc":"The entities node will be omitted when set to false."}}},"follow":{"doc":"Allows the authenticating users to follow the user specified in the ID parameter.                       Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.                       Actions taken in this method are asynchronous and changes will be eventually consistent. Providing either screen_name or user_id is required.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend."},"user_id":{"doc":"The ID of the user for whom to befriend."},"follow":{"doc":"Enable notifications for the target user."}}},"followers":{"doc":"Returns a cursored collection of user IDs for every user following the specified user.                       At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.                       This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend."},"user_id":{"doc":"The ID of the user for whom to befriend."},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"stringify_ids":{"doc":"Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead."}}},"followersList":{"doc":"Returns a cursored collection of user objects for users following the specified userAt this time, results are ordered with the most recent following first  however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend."},"user_id":{"doc":"The ID of the user for whom to befriend."},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects.Example Values: false"},"include_user_entities":{"doc":"WThe user object entities node will be disincluded when set to false.Example Values: false"}}},"friends":{"doc":"Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \"friends\").                       At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.                       This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk. Either a screen_name or a user_id must be provided.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend."},"user_id":{"doc":"The ID of the user for whom to befriend."},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"stringify_ids":{"doc":"Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead."}}},"friendsIds":{"doc":"Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \"friends\").                   At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.                   This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for."},"screen_name":{"doc":"The screen name of the user for whom to return results for."},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"stringify_ids":{"doc":"Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead."}}},"friendsList":{"doc":"Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their \"friends\").At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend."},"user_id":{"doc":"The ID of the user for whom to befriend."},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"include_user_entities":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects.Example Values: false"},"skip_status":{"doc":"The user object entities node will be disincluded when set to false.Example Values: false"}}},"geocode":{"doc":"Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.               This request is an informative call and will deliver generalized results about geography.","params":{"format":{"doc":"undefined"},"long":{"doc":"The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."},"max_results":{"doc":"A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally, only pass in the number of places you intend to display to the user here."},"granularity":{"doc":"This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed.                Setting this to city, for example, will find places which have a type of city, admin or country."},"lat":{"doc":"The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."},"accuracy":{"doc":"A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.)."},"callback":{"doc":"If supplied, the response will use the JSONP format with a callback of the given name."}}},"geoSearch":{"doc":"Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.                   Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.                   This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.","params":{"format":{"doc":"undefined"},"ip":{"doc":"An IP address. Used when attempting to fix geolocation based off of the user's IP address."},"long":{"doc":"The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."},"max_results":{"doc":"A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally, only pass in the number of places you intend to display to the user here."},"granularity":{"doc":"This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed.                    Setting this to city, for example, will find places which have a type of city, admin or country."},"lat":{"doc":"The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."},"accuracy":{"doc":"A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.)."},"contained_within":{"doc":"This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.                    Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you would specify a place_id of \"5a110d312052166f\""},"street_address":{"doc":"This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted."},"callback":{"doc":"If supplied, the response will use the JSONP format with a callback of the given name."}}},"geoSimilarPlaces":{"doc":"Locates places near the given coordinates which are similar in name.                   Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.                   The token contained in the response is the token needed to be able to create a new place.","params":{"format":{"doc":"undefined"},"lat":{"doc":"The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."},"long":{"doc":"The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."},"name":{"doc":"The name a place is known as."},"contained_within":{"doc":"This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.                    Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you would specify a place_id of \"5a110d312052166f\""},"street_address":{"doc":"This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted."},"callback":{"doc":"If supplied, the response will use the JSONP format with a callback of the given name."}}},"getAccountSettings":{"doc":"Returns settings (including current trend, geo and sleep time information) for the authenticating user.","params":{"format":{"doc":"undefined"}}},"getAllPublicStatuses":{"doc":"This endpoint requires special permission to access.Returns all public statuses. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.","params":{"format":{"doc":"undefined"},"count":{"doc":"The number of messages to backfill. See the count parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#count"},"delimited":{"doc":"Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#delimited"},"stall_warnings":{"doc":"Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stall_warnings"}}},"getLanguages":{"doc":"Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.","params":{"format":{"doc":"undefined"}}},"getLists":{"doc":"Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.                       This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."},"reverse":{"doc":"Set this to true if you would like owned lists to be returned first. See description above for information on how this parameter works.Example Values: true"}}},"getPlaceInfo":{"doc":"Returns all the information about a known place.","params":{"format":{"doc":"undefined"},"place_id":{"doc":"A place in the world. These IDs can be retrieved from geo/reverse_geocode."}}},"getRateLimitStatus":{"doc":"Returns the current rate limits for methods belonging to the specified resource families.Each 1.1 API resource belongs to a \"resource family\" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version.This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token or application-only authentication context.You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with.When using app-only auth, this method's response indicates the app-only auth rate limiting context.","params":{"format":{"doc":"undefined"},"resources":{"doc":"A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.See Rate Limiting in API v1.1 for more information.Example Values: statuses,friends,trends,help"}}},"getSample":{"doc":"Returns a small random sample of all public statuses. The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.","params":{"format":{"doc":"undefined"},"delimited":{"doc":"Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#delimited"},"stall_warnings":{"doc":"Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stall_warnings"}}},"getSite":{"doc":"Streams messages for a single user, as described in User streams.","params":{"format":{"doc":"undefined"},"follow":{"doc":"A comma separated list of user IDs, indicating the users to return statuses for in the stream. See the follow parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#follow"},"delimited":{"doc":"Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#delimited"},"stall_warnings":{"doc":"Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stall_warnings"},"with":{"doc":"Specifies whether to return information for just the authenticating user, or include messages from accounts the user follows. See the with parameter documentation the with parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#with"},"replies":{"doc":"Specifies whether to return additional @replies. See the replies parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#replies"},"stringify_friend_ids":{"doc":"Specifies whether to send the friends list preamble as an array of integers or an array of strings. See the stringify_friend_ids parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stringify_friend_ids"}}},"getStatusesWithFilter":{"doc":"Returns public statuses that match one or more filter predicates. Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API. Both GET and POST requests are supported, but GET requests with too many parameters may cause the request to be rejected for excessive URL length. Use a POST request to avoid long URLs.The track, follow, and locations fields should be considered to be combined with an OR operator. track=foo and follow=1234 returns Tweets matching \"foo\" OR created by user 1234.The default access level allows up to 400 track keywords, 5,000 follow userids and 25 0.1-360 degree location boxes. If you need elevated access to the Streaming API, you should explore our partner providers of Twitter data here.","params":{"format":{"doc":"undefined"},"follow":{"doc":"*Note: At least one predicate parameter (follow, locations, or track) must be specified.A comma separated list of user IDs, indicating the users to return statuses for in the stream. See the follow parameter documentation for more information.https://dev.twitter.com/docs/streaming-apis/parameters#follow"},"track":{"doc":"*Note: At least one predicate parameter (follow, locations, or track) must be specified.Keywords to track. Phrases of keywords are specified by a comma-separated list. See the track parameter documentation for more information.https://dev.twitter.com/docs/streaming-apis/parameters#track"},"locations":{"doc":"*Note: At least one predicate parameter (follow, locations, or track) must be specified.Specifies a set of bounding boxes to track. See the locations parameter documentation for more information.https://dev.twitter.com/docs/streaming-apis/parameters#locations"},"delimited":{"doc":"Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#delimited"},"stall_warnings":{"doc":"Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stall_warnings"}}},"getUserContributees":{"doc":"Returns Returns a collection of users that the specified user can \"contribute\" to.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.Example Values: 12345Note:: Specifies the ID of the user to befriend. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.Example Values: noradio"},"include_entities":{"doc":"The entities node will be disincluded when set to false.Example Values: false"},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"getUserContributors":{"doc":"Returns Returns a collection of users who can contribute to the specified account.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.Example Values: 12345Note:: Specifies the ID of the user to befriend. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.Example Values: noradio"},"include_entities":{"doc":"The entities node will be disincluded when set to false.                        Example Values: false"},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"getUserIdRetweetNoWantedFrom":{"doc":"Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.Use POST friendships/update to set the \"no retweets\" status for a given user account on behalf of the current user.","params":{"format":{"doc":"undefined"},"stringify_ids":{"doc":"Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake. This parameter is especially important to use in Javascript environments.Example Values: true"}}},"getUserProfileBanner":{"doc":"Returns a map of the available size variations of the specified user's profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.The profile banner data available at each size variant's URL is in PNG format.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.Example Values: 12345Note:: Specifies the ID of the user to befriend. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.Example Values: noradio"}}},"homeTimeline":{"doc":"Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service.               Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.","params":{"format":{"doc":"undefined"},"count":{"doc":"Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."},"exclud_replies":{"doc":"This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies."},"contributor_details":{"doc":"This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."},"include_entities":{"doc":"The entities node will be disincluded when set to false."}}},"incomingFriendships":{"doc":"Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.","params":{"format":{"doc":"undefined"},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"stringify_ids":{"doc":"Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead."}}},"isSubscriber":{"doc":"Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."},"include_entities":{"doc":"When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"listAddMember":{"doc":"Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 500 members. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."}}},"listAddMembers":{"doc":"Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.                       Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"user_id":{"doc":"A comma separated list of user IDs, up to 100 are allowed in a single request."},"screen_name":{"doc":"A comma separated list of screen names, up to 100 are allowed in a single request."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."}}},"listmembers":{"doc":"Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"list_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"cursor":{"doc":"Causes the collection of list members to be broken into \"pages\" of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"include_entities":{"doc":"The entities node will be disincluded when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"listRemoveAllMember":{"doc":"Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list.                    Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.                    Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required."},"user_id":{"doc":"The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."}}},"listRemoveMember":{"doc":"Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"user_id":{"doc":"The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."}}},"listRetweeters":{"doc":"Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.","params":{"format":{"doc":"undefined"},"id":{"doc":"The Tweet/status ID to return embed code for.Example Values: 99530515043983360"},"cursor":{"doc":"This param is semi-optional.Causes the list of IDs to be broken into pages of no more than 100 IDs at a time. The number of IDs returned is not guaranteed to be 100 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.While this method supports the cursor parameter, the entire result set can be returned in a single cursored collection. Using the count parameter with this method will not provide segmented cursors for use with this parameter.Example Values: 12893764510938"},"stringify_ids":{"doc":"Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake.Example Values: true"}}},"listsMemberships":{"doc":"Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."},"filter_to_owned_lists":{"doc":"When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of."},"cursor":{"doc":"Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list."}}},"listStatuses":{"doc":"Returns tweet timeline for members of the specified list. Retweets are included by default. You can use the include_rts=false parameter to omit retweet objects.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"count":{"doc":"Specifies the number of results to retrieve per \"page.\""},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"include_entities":{"doc":"Entities are ON by default in API 1.1, each tweet includes a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities=false"},"include_rts":{"doc":"When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline."}}},"listSubscribeMe":{"doc":"Subscribes the authenticated user to the specified list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."}}},"listSubscribers":{"doc":"Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"cursor":{"doc":"Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list."},"include_entities":{"doc":"When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"listUnsubscribeMe":{"doc":"Unsubscribes the authenticated user from the specified list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."}}},"lookupFriendships":{"doc":"Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend.Example Values: noradio"},"user_id":{"doc":"The ID of the user for whom to befriend.Example Values: 12345"}}},"lookupUsers":{"doc":"Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.                       This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.                       GET users/show is used to retrieve a single user object.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests."},"user_id":{"doc":"A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests."},"include_entities":{"doc":"The entities node that may appear within embedded statuses will be disincluded when set to false."}}},"memberIsInList":{"doc":"Check if the specified user is a member of the specified list.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"include_entities":{"doc":"When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"mentionsTimeline":{"doc":"Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user.               The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.               This method can only return up to 800 tweets","params":{"format":{"doc":"undefined"},"count":{"doc":"Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"include_entities":{"doc":"The entities node will be disincluded when set to false."},"contributor_details":{"doc":"This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."}}},"newDirectMessage":{"doc":"Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user who should receive the direct message. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user who should receive the direct message. Helpful for disambiguating when a valid screen name is also a user ID."},"text":{"doc":"The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters."}}},"oembed":{"doc":"Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format.While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup.","params":{"format":{"doc":"undefined"},"id":{"doc":"The Tweet/status ID to return embed code for.Example Values: 99530515043983360"},"url":{"doc":"The URL of the Tweet/status to be embedded.Example Values:To embed the Tweet at https://twitter.com/#!/twitter/status/99530515043983360, use:https%3A%2F%2Ftwitter.com%2F%23!%2Ftwitter%2Fstatus%2F99530515043983360To embed the Tweet at https://twitter.com/twitter/status/99530515043983360, use:https%3A%2F%2Ftwitter.com%2Ftwitter%2Fstatus%2F99530515043983360"},"maxwidth":{"doc":"The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels.Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below.Example Values: 325"},"hide_media":{"doc":"Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false.Example Values: true"},"hide_thread":{"doc":"Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false.Example Values: true"},"omit_script":{"doc":"Specifies whether the embedded Tweet HTML should include a script element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the script element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false.Example Values: true"},"align":{"doc":"Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet.Example Values: center"},"related":{"doc":"A value for the TWT related parameter, as described in Web Intents. This value will be forwarded to all Web Intents calls.Example Values:twitterapi,twittermedia,twitter"},"lang":{"doc":"Language code for the rendered embed. This will affect the text and localization of the rendered HTML.Example Values: fr"}}},"outgoingFriendships":{"doc":"Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.","params":{"format":{"doc":"undefined"},"cursor":{"doc":"Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"                        The response from the API will include a previous_cursor and next_cursor to allow paging back and forth."},"stringify_ids":{"doc":"Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead."}}},"privacyPolicy":{"doc":"Returns Twitter's Privacy Policy.","params":{"format":{"doc":"undefined"}}},"removeProfileBanner":{"doc":"Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.","params":{"format":{"doc":"undefined"}}},"reportUser":{"doc":"Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Either an id or screen_name is required for this method."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Either a id or screen_name is required for this method."}}},"retweet":{"doc":"Retweets a tweet. Returns the original tweet with retweet details embedded.","params":{"format":{"doc":"undefined"},"id":{"doc":"The numerical ID of the desired status."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."}}},"retweets":{"doc":"Returns up to 100 of the first retweets of a given tweet.","params":{"format":{"doc":"undefined"},"id":{"doc":"The numerical ID of the desired status."},"count":{"doc":"Specifies the number of records to retrieve. Must be less than or equal to 100."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."}}},"retweetsOfMe":{"doc":"Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others. This timeline is a subset of the user's GET statuses/user_timeline.","params":{"format":{"doc":"undefined"},"count":{"doc":"Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"include_entities":{"doc":"The entities node will be disincluded when set to false."},"include_user_entities":{"doc":"The user entities node will be disincluded when set to false."}}},"savedSearches":{"doc":"Returns the authenticated user's saved search queries.","params":{"format":{"doc":"undefined"}}},"savedSearchesById":{"doc":"Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested.","params":{"format":{"doc":"undefined"},"id":{"doc":"Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested."}}},"search":{"doc":"Returns a collection of relevant Tweets matching a specified query.Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you'll find across the REST API and platform. You may need to tolerate some inconsistencies and variance in perspectival values (fields that pertain to the perspective of the authenticating user) and embedded user objects.To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search API. See Working with Timelines to learn best practices for navigating results by since_id and max_id.","params":{"format":{"doc":"undefined"},"q":{"doc":"undefined"},"callback":{"doc":"If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint.Example Values: processTweets"},"geocode":{"doc":"Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \"sub-regions\" will be considered when using the radius modifier.Example Values: 37.781157,-122.398720,1mi"},"lang":{"doc":"Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.Example Values: eu"},"locale":{"doc":"Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.Example Values: ja"},"count":{"doc":"The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \"rpp\" parameter in the old Search API.Example Values: 100"},"result_type":{"doc":"Optional. Specifies what type of search results you would prefer to receive. The current default is \"mixed.\" Valid values include:  * mixed: Include both popular and real time results in the response.  * recent: return only the most recent results in the response  * popular: return only the most popular results in the response.Example Values: mixed, recent, popular"},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID.Example Values: 54321"},"until":{"doc":"Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here.Example Values: 2012-09-01"},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.Example Values: 12345"},"include_entities":{"doc":"The entities node will be disincluded when set to false.Example Values: false"}}},"searchUsers":{"doc":"Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.                       Only the first 1,000 matching results are available.","params":{"format":{"doc":"undefined"},"q":{"doc":"The search query to run against people search."},"page":{"doc":"Specifies the page of results to retrieve."},"count":{"doc":"The number of potential user results to retrieve per page. This value has a maximum of 20."},"include_entities":{"doc":"The entities node will be disincluded from embedded tweet objects when set to false."}}},"showDirectMessage":{"doc":"Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.                       Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.","params":{"format":{"doc":"undefined"},"id":{"doc":"The ID of the direct message."}}},"showFriendship":{"doc":"Returns detailed information about the relationship between two arbitrary users. A choice has to be made between screen_name or id for both target and source parameters.","params":{"format":{"doc":"undefined"},"source_id":{"doc":"The user_id of the subject user."},"source_screen_name":{"doc":"The screen_name of the subject user."},"target_id":{"doc":"The user_id of the target user."},"target_screen_name":{"doc":"The screen_name of the target user."}}},"showStatus":{"doc":"Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the tweet.","params":{"format":{"doc":"undefined"},"id":{"doc":"The numerical ID of the desired Tweet."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."},"include_my_retweet":{"doc":"When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet."},"include_entities":{"doc":"The entities node will be disincluded when set to false."}}},"showUser":{"doc":"Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible.                       GET users/lookup is used to retrieve a bulk collection of user objects.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Either an id or screen_name is required for this method."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Either a id or screen_name is required for this method."},"include_entities":{"doc":"The entities node will be disincluded when set to false."}}},"streamsMessages":{"doc":"Streams messages for a single user, as described in User streams.","params":{"format":{"doc":"undefined"},"delimited":{"doc":"Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#delimited"},"stall_warnings":{"doc":"Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stall_warnings"},"with":{"doc":"Specifies whether to return information for just the authenticating user, or include messages from accounts the user follows. See the with parameter documentation the with parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#with"},"replies":{"doc":"Specifies whether to return additional @replies. See the replies parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#replies"},"track":{"doc":"Includes additional Tweets matching the specified keywords. Phrases of keywords are specified by a comma-separated list. See the track parameter documentation the track parameter documentation for more information.https://dev.twitter.com/docs/streaming-apis/parameters#track"},"locations":{"doc":"Includes additional Tweets falling within the specified bounding boxes. See the locations parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#locations"},"stringify_friend_ids":{"doc":"Specifies whether to send the friends list preamble as an array of integers or an array of strings. See the stringify_friend_ids parameter documentation for more information.                        https://dev.twitter.com/docs/streaming-apis/parameters#stringify_friend_ids"}}},"termsOfService":{"doc":"Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.","params":{"format":{"doc":"undefined"}}},"trendingTopics":{"doc":"Returns the top 10 trending topics for a specific WOEID, if trending information is available for it.                   The response is an array of \"trend\" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.                   This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.","params":{"format":{"doc":"undefined"},"id":{"doc":"The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID."},"exclude":{"doc":"Setting this equal to hashtags will remove all hashtags from the trends list."}}},"tweet":{"doc":"Updates the authenticating user's current status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media.                       For each update attempt, the update text is compared with the authenticating user's recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row.                       While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.","params":{"format":{"doc":"undefined"},"status":{"doc":"The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link wrapping may effect character counts.                There are some special commands in this field to be aware of. For instance, preceding a message with \"D \" or \"M \" and following it with a screen name can create a direct message to that user if the relationship allows for it."},"place_id":{"doc":"A place in the world. These IDs can be retrieved from apis.twitter.reverseGeocode."},"long":{"doc":"The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."},"in_reply_to_status_id":{"doc":"The ID of an existing status that the update is in reply to.                    Note:: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update."},"display_coordinates":{"doc":"Whether or not to put a pin on the exact coordinates a tweet has been sent from."},"lat":{"doc":"The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."}}},"unblockUser":{"doc":"Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."},"user_id":{"doc":"The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."},"include_entities":{"doc":"The entities node will not be included when set to false."},"skip_status":{"doc":"When set to either true, t or 1 statuses will not be included in the returned user objects."}}},"unfavoriteStatus":{"doc":"Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.                   This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.","params":{"format":{"doc":"undefined"},"id":{"doc":"The numerical ID of the desired status."},"include_entities":{"doc":"The entities node will be omitted when set to false."}}},"unfollow":{"params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend."},"user_id":{"doc":"The ID of the user for whom to befriend."}}},"updateAccountSettings":{"doc":"Updates the authenticating user's settings.","params":{"format":{"doc":"undefined"},"trend_location_woeid":{"doc":"The Yahoo! Where On Earth ID to use as the user's default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.Example Values: 1"},"sleep_time_enabled":{"doc":"The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.Example Values: it, en, es"},"start_sleep_time":{"doc":"The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.Example Values: 13"},"end_sleep_time":{"doc":"The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.Example Values: 13"},"time_zone":{"doc":"The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.Example Values: Europe/Copenhagen, Pacific/Tongatapu"}}},"updateFriendships":{"doc":"Allows one to enable or disable retweets and device notifications from the specified user.","params":{"format":{"doc":"undefined"},"screen_name":{"doc":"The screen name of the user for whom to befriend.Example Values: noradio"},"user_id":{"doc":"The ID of the user for whom to befriend.Example Values: 12345"},"device":{"doc":"Enable/disable device notifications from the target user.Example Values: true, false"},"retweets":{"doc":"Enable/disable retweets from the target user.Example Values: true, false"}}},"updateList":{"doc":"Updates the specified list. The authenticated user must own the list to be able to update it. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"list_id":{"doc":"The numerical id of the list."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"name":{"doc":"The name for the list."},"mode":{"doc":"Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public."},"description":{"doc":"The description to give the list."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."}}},"updateProfileBanner":{"doc":"Uploads a profile banner on behalf of the authenticating user. For best results, upload an inferior 5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners and GET users/profile_banner.Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload.","params":{"format":{"doc":"undefined"},"banner":{"doc":"The Base64-encoded or raw image data being uploaded as the user's new profile banner."},"width":{"doc":"The width of the preferred section of the image being uploaded in pixels. Use with height, offset_left, and offset_top to select the desired region of the image to use.                Note: If providing any one of the height, width, offset_left, or offset_top parameters, you must provide all of the sizing parameters."},"height":{"doc":"The height of the preferred section of the image being uploaded in pixels. Use with width, offset_left, and offset_top to select the desired region of the image to use.                Note: If providing any one of the height, width, offset_left, or offset_top parameters, you must provide all of the sizing parameters."},"offset_left":{"doc":"The number of pixels by which to offset the uploaded image from the left. Use with height, width, and offset_top to select the desired region of the image to use.                Note: If providing any one of the height, width, offset_left, or offset_top parameters, you must provide all of the sizing parameters."},"offset_top":{"doc":"The number of pixels by which to offset the uploaded image from the top. Use with height, width, and offset_left to select the desired region of the image to use.                Note: If providing any one of the height, width, offset_left, or offset_top parameters, you must provide all of the sizing parameters."}}},"updateStatusWithMedia":{"doc":"Updates the authenticating user's current status and attaches media for upload. In other words, it creates a Tweet with a picture attached.Unlike POST statuses/update, this method expects raw multipart data. Your POST request's Content-Type should be set to multipart/form-data with the media[] parameterThe Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error.Important: In API v1.1, you now use api.twitter.com as the domain instead of upload.twitter.com. We strongly recommend using SSL with this method.","params":{"format":{"doc":"undefined"},"status":{"doc":"The text of your status update. URL encode as necessary. t.co link wrapping may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs.Note: Request the GET help/configuration endpoint to get the current characters_reserved_per_media and max_media_per_upload values."},"media":{"doc":"Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF. Animated GIFs are not supported. This data must be the raw image bytes - base64 encoded images are currently not supported.Note: Request the GET help/configuration endpoint to get the current max_media_per_upload and photo_size_limit values."},"possibly_sensitive":{"doc":"Set to true for content which may not be suitable for every audience."},"in_reply_to_status_id":{"doc":"The ID of an existing status that the update is in reply to.Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update."},"lat":{"doc":"The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.Example Values: 37.7821120598956"},"long":{"doc":"The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter.Example Values: -122.400612831116"},"place_id":{"doc":"A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode.Example Values: df51dec6f4ee2b2c"},"display_coordinates":{"doc":"Whether or not to put a pin on the exact coordinates a tweet has been sent from.Example Values: true"}}},"userListShow":{"doc":"Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.","params":{"format":{"doc":"undefined"},"owner_id":{"doc":"The user ID of the user who owns the list being requested by a slug."},"owner_screen_name":{"doc":"The screen name of the user who owns the list being requested by a slug."},"slug":{"doc":"You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."},"list_id":{"doc":"The numerical id of the list."}}},"userListsOwnerships":{"doc":"Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.                    A user_id or screen_name must be provided."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.                    A user_id or screen_name must be provided."},"count":{"doc":"The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page."},"cursor":{"doc":"Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them."}}},"userListsSubscriptions":{"doc":"Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists.","params":{"format":{"doc":"undefined"},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."},"cursor":{"doc":"Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them."}}},"usersSuggestions":{"doc":"Access to Twitter's suggested user list. This returns the list of suggested user categories.","params":{"format":{"doc":"undefined"},"lang":{"doc":"Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the apis.twitter.languages() API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list."}}},"usersSuggestionsCategory":{"doc":"Access the users in a given category of the Twitter suggested user list.                       It is recommended that applications cache this data for no more than one hour.","params":{"format":{"doc":"undefined"},"slug":{"doc":"The short name of list or a category"},"lang":{"doc":"Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the apis.twitter.languages() API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list."}}},"usersSuggestionsCategoryMembers":{"doc":"Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.","params":{"format":{"doc":"undefined"},"slug":{"doc":"The short name of list or a category"}}},"userTimeline":{"doc":"API version 1.1               Updated on Mon, 2012-10-15 07:23               Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.               User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.               The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.               This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.","params":{"format":{"doc":"undefined"},"count":{"doc":"Specifies the number of tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."},"user_id":{"doc":"The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name. Specifies the ID of the user to befriend. Helpful for disambiguating when a valid user ID is also a valid screen name."},"screen_name":{"doc":"The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."},"since_id":{"doc":"Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."},"max_id":{"doc":"Returns results with an ID less than (that is, older than) or equal to the specified ID."},"trim_user":{"doc":"When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."},"exclude_replies":{"doc":"This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses."},"contributor_details":{"doc":"This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."},"include_rts":{"doc":"When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object."}}},"userTrendingLocations":{"doc":"Returns the locations that Twitter has trending topic information for.                   The response is an array of \"locations\" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in.                   A WOEID is a Yahoo! Where On Earth ID.","params":{"format":{"doc":"undefined"}}}}
