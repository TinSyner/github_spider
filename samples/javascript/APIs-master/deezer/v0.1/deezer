/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def !== undefined)
		args[param] = def;
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/deezer');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Get the album defined in the id param.
 * @category Album
 * @param {string} id  The id of the album.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getAlbum = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/album/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of album's comments. Represented by an array of Comment objects
 * @category Album
 * @param {string} id  The id of the album.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getAlbumComments = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/album/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * add a comment to the album
 * @category Album
 * @param {string} id  The id of the album.
 * @param {string} comment  The content of the comment	   
 * @methodhttp POST
 */
exports.postAlbumComments = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/album/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'comment', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of album's fans. Represented by an array of User objects
 * @category Album
 * @param {string} id  The id of the album.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getAlbumFans = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/album/{id}/fans';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of album's tracks. Represented by an array of Track objects
 * @category Album
 * @param {string} id  The id of the album.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getAlbumTracks = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/album/{id}/tracks';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Rate the album defined in the id param.
 * @category Album
 * @param {string} id  The id of the album.
 * @param {integrer} note  An int [1-5]!	   
 * @methodhttp POST
 */
exports.rateAlbum = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/album/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'note', 'null', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Get the artist defined in the id param.
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the top 5 tracks of an artist
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtistTop = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/top';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of artist's albums. Represented by an array of Album objects
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtistAlbums = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/albums';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of artist's comments. Represented by an array of Comment objects
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtistComments = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of artist's comments. Represented by an array of Comment objects
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} comment  The content of the comment	   
 * @methodhttp POST
 */
exports.postArtistComments = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'comment', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of artist's fans. Represented by an array of User objects
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtistFans = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/fans';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of related artists. Represented by an array of Artist objects
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtistRelated = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/related';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of tracks. Represented by an array of Track object
 * @category Artist
 * @param {string} id  The id of the artist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getArtistRadio = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/artist/{id}/radio';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the comment defined in the id param.
 * @category Comment
 * @param {string} id  The id of the comment.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getComment = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/comment/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of editorials.
 * @category Editorial
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.editorial = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/editorial';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the editorial defined in the id param.
 * @category Editorial
 * @param {string} id  The id of the editorial.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getEditorial = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/editorial/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of albums selected every week by the Deezer Team. 
 * @category Editorial
 * @param {string} id  The id of the editorial.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getEditorialSelection = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/editorial/{id}/selection';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * This method returns three lists : Top track, Top album and Top artist. 
 * @category Editorial
 * @param {string} id  The id of the editorial.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getEditorialCharts = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/editorial/{id}/charts';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * A folder object, containing playlists and albums
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Rename the folder
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {string} title  The new title of the folder	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.renameFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Delete the folder
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.deleteFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return A list of mixed objects of type playlist, album 
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getFolderItems = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}/items';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Add a playlist in the folder
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {integrer} [playlist_id]  The playlist id	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addPlaylistInFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}/items';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'playlist_id');
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Add an album in the folder
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {integrer} [album_id]  The album id.	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addAlbumInFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}/items';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'album_id');
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove a playlist in the folder
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {integrer} [playlist_id]  The playlist id.	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.removePlaylistInFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}/items';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'playlist_id');
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove an album in the folder
 * @category Folder
 * @param {string} id  The id of the forlder.
 * @param {integrer} [album_id]  The album id.	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.removeAlbumInFolder = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/folder/{id}/items';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'album_id');
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of Genre object .
 * @category Genre
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.genre = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/genre';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * A genre object .
 * @category Genre
 * @param {string} id  The id of the genre.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getGenre = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/genre/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns all artists for a genre
 * @category Genre
 * @param {string} id  The id of the genre.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getAllArtistsByGenre = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/genre/{id}/artists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns all radios for a genre
 * @category Genre
 * @param {string} id  The id of the genre.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getAllRadiosByGenre = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/genre/{id}/radios';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a playlist Object
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getPlaylist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Add or reorder tracks in the playlist a playlist
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addPlaylist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Delete the playlist
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.deletePlaylist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of playlist's comments. Represented by an array of Comment objects
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getPlaylistComments = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * add a comment to the playlist
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} comment  The content of the comment	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addPlaylistComment = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'comment', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of playlist's fans. Represented by an array of User objects
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getPlaylistFans = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/fans';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of playlist's tracks. Represented by an array of Track object
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getPlaylistTracks = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/tracks';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * add a track in the playlist
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} songs  A comma separated list of track ids.	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addPlaylistTracks = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/tracks';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'songs', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Re order the tracks in the playlist
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} order  A comma separated list of track ids	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.reorderPlaylistTracks = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/tracks';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'order', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove a list of songs from the playlist
 * @category Playlist
 * @param {string} id  The id of the playlist.
 * @param {string} songs  A comma separated list of track ids	   
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.removePlaylistTracks = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/playlist/{id}/tracks';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'songs', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of radios
 * @category Radio
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.radio = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/radio';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a radio
 * @category Radio
 * @param {string} id  The id of the playlist.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getRadio = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/radio/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of radio splitted by genre
 * @category Radio
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.radioByGenre = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/radio/genres';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the top radios (5 radios)
 * @category Radio
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.topRadio = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/radio/top';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get first 40 tracks in the radio
 * @category Radio
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.radioTracks = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/radio/tracks';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * search tracks
 * @category Search
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} q  The query string to search	   
 * @param {string} [order]  Possible values : RANKING, TRACK_ASC, TRACK_DESC, ARTIST_ASC, ARTIST_DESC, ALBUM_ASC, ALBUM_DESC, RATING_ASC, RATING_DESC, DURATION_ASC, DURATION_DESC	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.search = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/search';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'q', 'str', true);
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Search albums
 * @category Search
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} q  The query string to search	   
 * @param {string} [order]  Possible values : RANKING, TRACK_ASC, TRACK_DESC, ARTIST_ASC, ARTIST_DESC, ALBUM_ASC, ALBUM_DESC, RATING_ASC, RATING_DESC, DURATION_ASC, DURATION_DESC	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.searchAlbum = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/search/album';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'q', 'str', true);
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Search artists
 * @category Search
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} q  The query string to search	   
 * @param {string} [order]  Possible values : RANKING, TRACK_ASC, TRACK_DESC, ARTIST_ASC, ARTIST_DESC, ALBUM_ASC, ALBUM_DESC, RATING_ASC, RATING_DESC, DURATION_ASC, DURATION_DESC	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.searchArtist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/search/artist';
	args = args || {};
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'q', 'str', true);
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * A track object
 * @category Track
 * @param {string} id  The id of the track.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getTrack = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/track/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the profile of the current User !
 * @category User
 * @methodhttp GET
 */
exports.me = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/me';
	args = args || {};
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * A user object
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUser = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of user's favorite albums. Represented by an array of Album object
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserAlbums = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/albums';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Add a favorite album
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} album_id  The id of the album	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addUserAlbums = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/albums';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'album_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove a favorite album
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} album_id  The id of the album	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.removeUserAlbums = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/albums';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'album_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of user's favorite artists. Represented by an array of Artist object
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserArtists = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/artists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Add a favorite artist
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} artist_id  The id of the artist	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addUserArtist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/artists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'artist_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove a favorite artist
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} artist_id  The id of the artist	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.removeUserArtist = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/artists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'artist_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of user's top 25 tracks. Represented by an array of Track object
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserCharts = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/charts';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of user's Folder
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserFolders = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/folders';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Create a new folder for the user
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} title  The title of the new folder	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.createUserFolders = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/folders';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of user's Friends, represented by an array of User object
 * @category User
 * @param {string} id  The id of the user.      
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserFollowings = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/followings';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Follow user
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} user_id  The user id to follow	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.followUser = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/followings';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Unfollow user
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} user_id  The user id to unfollow	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.unfollowUser = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/followings';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of user's Friends, represented by an array of User object
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserFollowers = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/followers';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the user's Permissions granted to the application
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserPermissions = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/permissions';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of user's personnal song, represented by an array of Tracks
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserPersonalSongs = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/personal_songs';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Upload a song
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.uploadPersonalSong = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/personal_songs';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of user's public Playlist, represented by an array of Playlist object.	  Permission is needed to return private playlists
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserPlaylists = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/playlists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Create a new playlist for the user
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {string} title  The title of the new playlist	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.createUserPlaylists = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/playlists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Add a favorite playlist
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} playlist_id  The playlist id	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addUserPlaylists = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/playlists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'playlist_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove a favorite playlist
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} playlist_id  The playlist id	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp DELETE
 */
exports.removeUserPlaylists = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/playlists';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'playlist_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Return a list of user's favorite Radios, represented by an array of Radio object.
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp GET
 */
exports.getUserRadios = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/radios';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Add a favorite radio
 * @category User
 * @param {string} id  The id of the user.
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	   
 * @param {integrer} radio_id  The id of the radio	   
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	   
 * @param {integrer} [nb_items]  the nb_items by page.	   
 * @methodhttp POST
 */
exports.addUserRadio = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/radios';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'radio_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.post({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Remove a favorite radio      
 * @category User
 * @param {string} id  The id of the user.      
 * @param {string} output  The output parameter specifies the format of the feed to be returned.json, jsonp, xml or php . by default json !	  
 * @param {integrer} radio_id  The id of the radio	  
 * @param {integrer} [index]  The index parameter specifies the index of the first matching result that should be included in the result set.	  
 * @param {integrer} [nb_items]  the nb_items by page.	  
 * @methodhttp DELETE
 */
exports.removeUserRadios = function(args, opts) {
	var url = 'https://api.deezer.com/2.0/user/{id}/radios';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'output', 'str', true, "json");
	url = url_replace(url, args, 'radio_id', 'null', true);
	url = url_replace(url, args, 'index');
	url = url_replace(url, args, 'nb_items');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};