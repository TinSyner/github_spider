
{"categories":{"Repos":["addCollaborator","checkCollaborator","checkUserWatched","compareCommits","createDownload","createHook","createOrgRepo","createRepo","createRepoKey","deleteCommitComment","deleteDownload","deleteHook","deleteRepo","deleteRepoKey","editCommitComment","editHook","editRepoKey","fork","getArchive","getBranch","getCommit","getCommit","getCommitComment","getContents","getDownload","getHook","getReadme","getRepo","getRepoKey","hooks","listBranches","listCollaborators","listCommitComments","listCommits","listCommitsComments","listContributors","listDownloads","listForks","listHooks","listLanguages","listOrgRepos","listRepoKeys","listRepos","listTags","listTeams","listUserRepos","listUserWatched","listWatched","listWatchers","postCommitComment","removeCollaborator","testHook","unwatch","updateRepo","watch"],"Users":["addEmails","checkUserWatched","createKey","deleteKey","editKey","editMe","follow","getKey","getUser","listEmails","listFollowing","listKeys","listUserFollowing","listWatched","listWatchers","me","removeEmails","unfollow"],"Issues":["addIssueLabels","createIssue","createIssue","createLabel","createMilestone","deleteIssueComment","deleteIssueLabel","deleteLabel","deleteMilestone","editIssueComment","getIssue","getIssueComment","getIssueEvent","getLabel","getMilestone","listIssueComments","listIssueEvents","listIssueLabels","listIssues","listLabels","listMilestoneLabels","listMilestones","listRepoEvents","listRepoIssues","postIssueComment","removeIssueLabels","replaceIssueLabels","updateLabel","updateMilestone"],"Orgs":["addTeamMember","addTeamRepo","checkOrgPublicMember","concealOrgMember","createTeam","deleteTeam","editOrg","editOrg","getOrg","getOrgMember","getTeam","getTeamMember","getTeamRepo","listOrgMembers","listOrgPublicMembers","listOrgs","listOrgTeams","listTeamMembers","listTeamRepos","listUserOrgs","publicizeOrgMember","removeOrgMember","removeTeamMember","removeTeamRepo"],"Pull requests":["checkPullRequestMerged","createPullRequest","createPullRequestFromIssue","deletePullRequestComment","editPullRequestComment","getPullRequestComment","listPullRequestComments","listPullRequestCommits","listPullRequestFiles","listPullRequests","mergePullRequest","postPullRequestComment","updatePullRequest"],"Blobs":["createBlob","getBlob"],"Commits":["createBlob","getCommit"],"References":["createReference","deleteReference","getReference","getSubReference","listReferences","updateReference"],"Tags":["createReference","getReference"],"Trees":["createTree","getReference","getReference"],"Gist":["gistCreate","gistDelete","gistDeleteComment","gistEdit","gistEditComment","gistFork","gistGet","gistGetComment","gistList","gistListComments","gistListPublic","gistListStarred","gistListUser","gistPostComment","gistStar","gistStarred","gistUnstar"],"Events":["listEvents","listIssuesEvents","listNetworksEvents","listOrgEvents","listOrgPublicEvents","listRepoEvents","listUserEvents","listUserPublicEvents","listUserPublicReceivedEvents","listUserReceivedEvents"],"Markdown":["markdown","markdownRaw"],"Search":["searchEmails","searchIssues","searchRepos","searchUsers"]},"addCollaborator":{"doc":"Add a collaborator","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"collaborator":{"doc":"Name of the collaborator user"}}},"addEmails":{"doc":"Add email address(es)"},"addIssueLabels":{"doc":"Add labels to an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"addTeamMember":{"doc":"Add team member.\t\t\t\t\tIn order to add a user to a team, the authenticated user must have `admin` permissions to the team or be an owner of the org that the team is associated with.","params":{"id":{"doc":"Team id"},"user":{"doc":"Name of the user"}}},"addTeamRepo":{"doc":"Add team repo.\t\t\t\t\tIn order to add a repo to a team, the authenticated user must be an owner of the org that the team is associated with. Also, the repo must be owned by the organization, or a direct for of a repo owned by the organization.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Team id"}}},"checkCollaborator":{"doc":"Check if a user is a collaborator","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"collaborator":{"doc":"Name of the collaborator user"}}},"checkOrgPublicMember":{"doc":"Get if a user is a public member.","params":{"org":{"doc":"Organization name"},"user":{"doc":"Name of the user"}}},"checkPullRequestMerged":{"doc":"Get if a pull request has been merged","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Pull request number"}}},"checkUserWatched":{"doc":"Check if you are following a user","params":{"user":{"doc":"Name of the user"}}},"compareCommits":{"doc":"Compare two commits","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"base":{},"head":{}}},"concealOrgMember":{"doc":"Conceal a user’s membership.","params":{"org":{"doc":"Organization name"},"user":{"doc":"Name of the user"}}},"createBlob":{"doc":"Create a Commit","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"message":{"doc":"Commit message"},"tree":{"doc":"SHA of the tree object this commit points to"},"parents":{"doc":"SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided, for a merge commit, an array of more than one should be provided."},"author.name":{"doc":"Name of the author of the commit"},"author.email":{"doc":"Email of the author of the commit"},"author.date":{"doc":"When this commit was authored"},"committer.name":{"doc":"Name of the committer of the commit"},"committer.email":{"doc":"Email of the committer of the commit"},"committer.date":{"doc":"When this commit was committed"}}},"createDownload":{"doc":"Create a new download (Create the resource)","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{},"size":{"doc":"Size of file in bytes."},"description":{},"content_type":{}}},"createHook":{"doc":"Create a hook","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{"doc":"The name of the service that is being called. See /hooks for the possible names."},"config":{"doc":"An object containing key/value pairs to provide settings for this hook. These settings vary between the services and are defined in the github-services repo. Booleans are stored internally as “1” for true, and “0” for false. Any JSON true/false values will be converted automatically."},"events":{"doc":"Determines what events the hook is triggered for."},"active":{"doc":"Determines whether the hook is actually triggered on pushes."}}},"createIssue":{"doc":"Create an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"title":{"doc":"Issue title"},"body":{"doc":"Issue content"},"assignee":{"doc":"Login for the user that this issue should be assigned to."},"state":{"doc":"`open` or `closed`"},"milestone":{"doc":"Milestone to associate this issue with."},"labels":{"doc":"Labels to associate with this issue. Pass one or more Labels to replace the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue."}}},"createKey":{"doc":"Create a public key","params":{"title":{},"key":{"doc":"`ssh-rsa AAA...`"}}},"createLabel":{"doc":"Create a label","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{"doc":"Name of the label"},"color":{"doc":"6 character hex code, without a leading `#`"}}},"createMilestone":{"doc":"Create a milestone","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"title":{"doc":"Milestone title"},"state":{"doc":"`open` or `closed`"},"description":{"doc":"Milestone description"},"due_on":{"doc":"ISO 8601 time"}}},"createOrgRepo":{"doc":"Create a new repository in this organization. The authenticated user must be a member of `org`.","params":{"org":{"doc":"Organization name"},"name":{"doc":"Repository name"},"description":{"doc":"Repository description"},"homepage":{"doc":"Repository homepage"},"private":{"doc":"`true` to create a private repository, `false` to create a public one. Creating private repositories requires a paid GitHub account."},"has_issues":{"doc":"`true` to enable issues for this repository, `false` to disable them."},"has_wiki":{"doc":"`true` to enable the wiki for this repository, `false` to disable it."},"has_downloads":{"doc":"`true` to enable downloads for this repository, `false` to disable them."},"team_id":{"doc":"The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization."}}},"createPullRequest":{"doc":"Create a pull request.\t\t\t\t\tNOTE: `head` and `base` can be either a sha or a branch name. Typically you would namespace `head` with a user like this: `username:branch`.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"title":{"doc":"Pull request title"},"body":{"doc":"Pull request description"},"base":{"doc":"The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo."},"head":{"doc":"The branch (or git ref) where your changes are implemented."}}},"createPullRequestFromIssue":{"doc":"Create a pull request from an existing Issue.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"issue":{"doc":"Issue number in this repository to turn into a Pull Request."},"base":{"doc":"The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo."},"head":{"doc":"The branch (or git ref) where your changes are implemented."}}},"createReference":{"doc":"Create a Tag Object.\t\t\t\t\tNote that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then create the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you simply have to create the reference - this call would be unnecessary.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"tag":{"doc":"Name of the tag"},"message":{"doc":"Tag message"},"object":{"doc":"SHA of the git object this is tagging"},"type":{"doc":"Type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob."},"tagger.name":{"doc":"Name of the author of the tag"},"tagger.email":{"doc":"Email of the author of the tag"},"tagger.date":{"doc":"When this object was tagged"}}},"createRepo":{"doc":"Create a new repository for the authenticated user.","params":{"name":{"doc":"Repository name"},"description":{"doc":"Repository description"},"homepage":{"doc":"Repository homepage"},"private":{"doc":"`true` to create a private repository, `false` to create a public one. Creating private repositories requires a paid GitHub account."},"has_issues":{"doc":"`true` to enable issues for this repository, `false` to disable them."},"has_wiki":{"doc":"`true` to enable the wiki for this repository, `false` to disable it."},"has_downloads":{"doc":"`true` to enable downloads for this repository, `false` to disable them."},"team_id":{"doc":"The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization."}}},"createRepoKey":{"doc":"Create a key","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"title":{},"key":{"doc":"`ssh-rsa AAA...`"}}},"createTeam":{"doc":"Create a team.\t\t\t\t\tIn order to create a team, the authenticated user must be an owner of {org}","params":{"org":{"doc":"Organization name"},"name":{"doc":"Team name"},"repo_names":{"doc":"Names of the repositories"},"permission":{"doc":"`pull`: team members can pull, but not push to or administer these repositories. Default\t\t\t\t\t\t\t`push`: team members can pull and push, but not administer these repositories.\t\t\t\t\t\t\t`admin`: team members can pull, push and administer these repositories."}}},"createTree":{"doc":"Create a Tree.\t\t\t\t\tThe tree creation API will take nested entries as well. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"base_tree":{"doc":"SHA1 of the tree you want to update with new data"},"tree.path":{"doc":"File referenced in the tree"},"tree.mode":{"doc":"File mode - one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit) or `120000` for a blob that specifies the path of a symlink"},"tree.type":{"doc":"`blob`, `tree`, or `commit`"},"tree.sha":{"doc":"SHA1 checksum ID of the object in the tree"},"tree.content":{"doc":"Content you want this file to have - GitHub will write this blob out and use that SHA for this entry. Use either this or `tree.sha`"}}},"deleteCommitComment":{"doc":"Delete a commit comment","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Commit comment id"}}},"deleteDownload":{"doc":"Delete a download","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Download id"}}},"deleteHook":{"doc":"Delete a hook","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Hook id"}}},"deleteIssueComment":{"doc":"Delete a comment on an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"id":{"doc":"Issue comment id"}}},"deleteIssueLabel":{"doc":"Remove a label from an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"name":{"doc":"Label name"}}},"deleteKey":{"doc":"Delete a public key","params":{"id":{"doc":"Key id"}}},"deleteLabel":{"doc":"Delete a label","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{"doc":"Label name"}}},"deleteMilestone":{"doc":"Delete a milestone","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the milestone"}}},"deletePullRequestComment":{"doc":"Delete a comment on a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the pull request"},"id":{"doc":"Pull request comment id"}}},"deleteReference":{"doc":"Delete a Reference","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"ref":{"doc":"Must be formatted as `heads/branch`, not just `branch`"}}},"deleteRepo":{"doc":"Delete a repository.\t\t\t\t\tDeleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"deleteRepoKey":{"doc":"Delete a key","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Key id"}}},"deleteTeam":{"doc":"Delete a team.\t\t\t\t\tIn order to delete a team, the authenticated user must be an owner of the org that the team is associated with.","params":{"id":{"doc":"Team id"}}},"editCommitComment":{"doc":"Update a commit comment","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Commit comment id"},"body":{"doc":"Content of the comment"}}},"editHook":{"doc":"Create a hook","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Hook id"},"name":{"doc":"The name of the service that is being called. See /hooks for the possible names."},"config":{"doc":"An object containing key/value pairs to provide settings for this hook. These settings vary between the services and are defined in the github-services repo. Booleans are stored internally as “1” for true, and “0” for false. Any JSON true/false values will be converted automatically."},"events":{"doc":"Determines what events the hook is triggered for. This replaces the entire array of events."},"add_events":{"doc":"Determines a list of events to be added to the list of events that the Hook triggers for."},"remove_events":{"doc":"Determines a list of events to be added to the list of events that the Hook triggers for."},"active":{"doc":"Determines a list of events to be removed from the list of events that the Hook triggers for."}}},"editIssueComment":{"doc":"Edit a comment on an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"id":{"doc":"Issue comment id"},"body":{"doc":"Content of the comment"}}},"editKey":{"doc":"Update a public key","params":{"id":{"doc":"Key id"},"title":{},"key":{"doc":"`ssh-rsa AAA...`"}}},"editMe":{"doc":"Update the authenticated user","params":{"name":{},"email":{"doc":"Publicly visible email address."},"blog":{},"company":{},"location":{},"hireable":{},"bio":{}}},"editOrg":{"doc":"Edit a team.\t\t\t\t\tIn order to edit a team, the authenticated user must be an owner of the org that the team is associated with.","params":{"id":{"doc":"Team id"},"name":{"doc":"Team name"},"permission":{"doc":"`pull`: team members can pull, but not push to or administer these repositories. Default\t\t\t\t\t\t\t`push`: team members can pull and push, but not administer these repositories.\t\t\t\t\t\t\t`admin`: team members can pull, push and administer these repositories."}}},"editPullRequestComment":{"doc":"Edit a comment on a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the pull request"},"id":{"doc":"Pull request comment id"},"body":{"doc":"Content of the comment"}}},"editRepoKey":{"doc":"Update a key","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Key id"},"title":{},"key":{"doc":"`ssh-rsa AAA...`"}}},"follow":{"doc":"Follow a user","params":{"user":{"doc":"Name of the user"}}},"fork":{"doc":"Create a fork.\t\t\t\t\tForking a Repository happens asynchronously. Therefore, you may have to wait a short period before accessing the git objects.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"org":{"doc":"Organization login. The repository will be forked into this organization."}}},"getArchive":{"doc":"This method will return a 302 to a URL to download a tarball or zipball archive for a repository.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"archive_format":{"doc":"Either tarball or zipball"},"ref":{"doc":"Valid Git reference."}}},"getBlob":{"doc":"Get a Blob","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sha":{"doc":"Blob SHA"}}},"getBranch":{"doc":"Get a repository branch","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"branch":{"doc":"Name of the branch"}}},"getCommit":{"doc":"Get a single commit","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sha":{"doc":"SHA of the commit"}}},"getCommitComment":{"doc":"Get a single commit comment","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Commit comment id"}}},"getContents":{"doc":"This method returns the contents of any file or directory in a repository.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"path":{"doc":"The content path"},"ref":{"doc":"The String name of the Commit/Branch/Tag."}}},"getDownload":{"doc":"Get a single download","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Download id"}}},"getHook":{"doc":"Get single hook","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Hook id"}}},"getIssue":{"doc":"Get a single issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"getIssueComment":{"doc":"Get a single comment on an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"id":{"doc":"Issue comment id"}}},"getIssueEvent":{"doc":"Get a single issue event for a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Issue event id"}}},"getKey":{"doc":"Get a single public key","params":{"id":{"doc":"Key id"}}},"getLabel":{"doc":"Get a single label","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{"doc":"Label name"}}},"getMilestone":{"doc":"Get a single milestone","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the milestone"}}},"getOrg":{"doc":"Get an organization","params":{"org":{"doc":"Organization name"}}},"getOrgMember":{"doc":"Get member.","params":{"org":{"doc":"Organization name"},"user":{"doc":"Name of the user"}}},"getPullRequestComment":{"doc":"Get a single comment on a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the pull request"},"id":{"doc":"Pull request comment id"}}},"getReadme":{"doc":"This method returns the preferred README for a repository.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"ref":{"doc":"The String name of the Commit/Branch/Tag."}}},"getReference":{"doc":"Get a Tree","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sha":{"doc":"Tree SHA"},"recursive":{"doc":"Set to `1` to get the tree recursively"}}},"getRepo":{"doc":"Get a repository.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"getRepoKey":{"doc":"Get a single key","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Key id"}}},"getSubReference":{"doc":"Get a Reference","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"ref":{"doc":"Sub-namespace, e.g. `heads` or `tags`"}}},"getTeam":{"doc":"Get a team.","params":{"id":{"doc":"Team id"}}},"getTeamMember":{"doc":"Get team member.\t\t\t\t\tIn order to get if a user is a member of a team, the authenticated user must be a member of the team.","params":{"id":{"doc":"Team id"},"user":{"doc":"Name of the user"}}},"getTeamRepo":{"doc":"Get team repo.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Team id"}}},"getUser":{"doc":"Get a single user","params":{"user":{"doc":"Name of the user"}}},"gistCreate":{"doc":"Create a gist","params":{"description":{"doc":"The description for this gist"},"public":{"doc":"Set if this gist is public or not"},"files":{"doc":"Files that make up this gist. The key of which should be a required string filename and the value another required hash with parameter content."}}},"gistDelete":{"doc":"Delete a gist","params":{"id":{"doc":"Gist id"}}},"gistDeleteComment":{"doc":"Delete a comment","params":{"id":{"doc":"Gist comment id"}}},"gistEdit":{"doc":"Edit a gist\t\t\t\t\tNOTE: All files from the previous version of the gist are carried over by default if not included in the hash. Deletes can be performed by including the filename with a null hash.","params":{"id":{"doc":"Gist id"},"description":{"doc":"The description for this gist"},"public":{"doc":"Set if this gist is public or not"},"files":{"doc":"Files that make up this gist. The key of which should be an optional string filename and the value another optional hash with optional parameters `content` (updated file contents) and `filename` (new name for this file)."}}},"gistEditComment":{"doc":"Edit a comment","params":{"id":{"doc":"Gist comment id"},"body":{"doc":"Content of the comment"}}},"gistFork":{"doc":"Fork a gist","params":{"id":{"doc":"Gist id"}}},"gistGet":{"doc":"Get a single gist","params":{"id":{"doc":"Gist id"}}},"gistGetComment":{"doc":"Get a single comment","params":{"id":{"doc":"Gist comment id"}}},"gistList":{"doc":"List the authenticated user’s gists"},"gistListComments":{"doc":"List comments on a gist","params":{"id":{"doc":"Gist id"}}},"gistListPublic":{"doc":"List all public gists"},"gistListStarred":{"doc":"List the authenticated user’s starred gists"},"gistListUser":{"doc":"List a user’s gists","params":{"user":{"doc":"Name of the user"}}},"gistPostComment":{"doc":"Create a comment","params":{"id":{"doc":"Gist id"},"body":{"doc":"Content of the comment"}}},"gistStar":{"doc":"Star a gist","params":{"id":{"doc":"Gist id"}}},"gistStarred":{"doc":"Check if a gist is starred","params":{"id":{"doc":"Gist id"}}},"gistUnstar":{"doc":"Unstar a gist","params":{"id":{"doc":"Gist id"}}},"hooks":{"doc":"List hooks services"},"listBranches":{"doc":"List repository branches","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listCollaborators":{"doc":"List repository collaborators","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listCommitComments":{"doc":"List comments for a single commit","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sha":{"doc":"SHA of the commit"}}},"listCommits":{"doc":"List commits on a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sha":{"doc":"Sha or branch to start listing commits from."},"path":{"doc":"Only commits containing this file path will be returned."}}},"listCommitsComments":{"doc":"List commit comments for a repository.\t\t\t\t\tComments are ordered by ascending ID.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listContributors":{"doc":"List repository contributors","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"anon":{"doc":"Set to `true` to include anonymous contributors in results."}}},"listDownloads":{"doc":"List downloads for a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listEmails":{"doc":"List email addresses for a user"},"listEvents":{"doc":"List public events"},"listFollowing":{"doc":"List who the authenticated user is following"},"listForks":{"doc":"List forks","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sort":{"doc":"`newest`, `oldest` or `watchers`"}}},"listHooks":{"doc":"List hooks","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listIssueComments":{"doc":"List comments on an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"listIssueEvents":{"doc":"List events for an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"listIssueLabels":{"doc":"List labels on an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"listIssues":{"doc":"List your issues","params":{"filter":{"doc":"`assigned`: Issues assigned to you\t\t\t\t\t\t\t`created`: Issues created by you\t\t\t\t\t\t\t`mentioned`: Issues mentioning you\t\t\t\t\t\t\t`subscribed`: Issues you’re subscribed to updates for"},"state":{"doc":"`open` or `closed`"},"labels":{"doc":"list of comma separated Label names. Example: `bug,ui,@high`"},"sort":{"doc":"`created`, `updated` or `comments`"},"direction":{"doc":"`asc` or `desc`"},"since":{"doc":"Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ"}}},"listIssuesEvents":{"doc":"List issue events for a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listKeys":{"doc":"List public keys"},"listLabels":{"doc":"List all labels for a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listLanguages":{"doc":"List repository languages","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listMilestoneLabels":{"doc":"Get labels for every issue in a milestone","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the milestone"}}},"listMilestones":{"doc":"List milestones for a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listNetworksEvents":{"doc":"List public events for a network of repositories","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listOrgEvents":{"doc":"List events for an organization.\t\t\t\t\tThis is the user’s organization dashboard. You must be authenticated as the user to view this.","params":{"user":{"doc":"Name of the user"},"org":{"doc":"Name of the organization"}}},"listOrgMembers":{"doc":"List all users who are members of an organization. A member is a user that belongs to at least 1 team in the organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. Otherwise only public members are returned.","params":{"org":{"doc":"Organization name"}}},"listOrgPublicEvents":{"doc":"List public events for an organization","params":{"org":{"doc":"Name of the organization"}}},"listOrgPublicMembers":{"doc":"List public members.\t\t\t\t\tMembers of an organization can choose to have their membership publicized or not.","params":{"org":{"doc":"Organization name"}}},"listOrgRepos":{"doc":"List repositories for the specified org.","params":{"org":{"doc":"Organization name"},"type":{"doc":"`all`, `owner`, `public`, `private` or `member`"},"sort":{"doc":"`created`, `updated`, `pushed` or `full_name`"},"direction":{"doc":"`asc` or `desc`, default: when using `full_name`: `asc`, otherwise `desc`."}}},"listOrgs":{"doc":"List public and private organizations for the authenticated user.","params":{"user":{"doc":"Name of the user"}}},"listOrgTeams":{"doc":"List teams.","params":{"org":{"doc":"Organization name"}}},"listPullRequestComments":{"doc":"List comments on a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"listPullRequestCommits":{"doc":"List commits on a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Pull request number"}}},"listPullRequestFiles":{"doc":"List pull requests files","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Pull request number"}}},"listPullRequests":{"doc":"List pull requests","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"state":{"doc":"`open` or `closed` to filter by state."}}},"listReferences":{"doc":"Get all References.\t\t\t\t\tThis will return an array of all the references on the system, including things like notes and stashes if they exist on the server. Anything in the namespace, not just heads and tags, though that would be the most common.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listRepoEvents":{"doc":"List repository events","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listRepoIssues":{"doc":"List issues for a repository","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"milestone":{"doc":"_Integer_ Milestone number\t\t\t\t\t\t\t`none` for Issues with no Milestone.\t\t\t\t\t\t\t`*` for Issues with any Milestone."},"state":{"doc":"`open` or `closed`"},"assignee":{"doc":"_String_ User login\t\t\t\t\t\t\t`none` for Issues with no assigned User.\t\t\t\t\t\t\t`*` for Issues with any assigned User."},"mentioned":{"doc":"User login."},"labels":{"doc":"list of comma separated Label names. Example: `bug,ui,@high`"},"sort":{"doc":"`created`, `updated` or `comments`"},"direction":{"doc":"`asc` or `desc`"},"since":{"doc":"Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ"}}},"listRepoKeys":{"doc":"List keys.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listRepos":{"doc":"List repositories for the authenticated user.","params":{"type":{"doc":"`all`, `owner`, `public`, `private` or `member`"},"sort":{"doc":"`created`, `updated`, `pushed` or `full_name`"},"direction":{"doc":"`asc` or `desc`, default: when using `full_name`: `asc`, otherwise `desc`."}}},"listTags":{"doc":"List repository tags","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listTeamMembers":{"doc":"List team members.\t\t\t\t\tIn order to list members in a team, the authenticated user must be a member of the team.","params":{"id":{"doc":"Team id"}}},"listTeamRepos":{"doc":"List team repos.","params":{"id":{"doc":"Team id"}}},"listTeams":{"doc":"List repository teams","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"listUserEvents":{"doc":"List events performed by a user.\t\t\t\t\tIf you are authenticated as the given user, you will see your private events. Otherwise, you’ll only see public events.","params":{"user":{"doc":"Name of the user"}}},"listUserFollowing":{"doc":"List who a user is following","params":{"user":{"doc":"Name of the user"}}},"listUserOrgs":{"doc":"List all public organizations for a user.","params":{"user":{"doc":"Name of the user"}}},"listUserPublicEvents":{"doc":"List public events performed by a user","params":{"user":{"doc":"Name of the user"}}},"listUserPublicReceivedEvents":{"doc":"List public events that a user has received","params":{"user":{"doc":"Name of the user"}}},"listUserReceivedEvents":{"doc":"List events that a user has received.\t\t\t\t\tThese are events that you’ve received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you’ll only see public events.","params":{"user":{"doc":"Name of the user"}}},"listUserRepos":{"doc":"List public repositories for the specified user.","params":{"user":{"doc":"Name of the user"},"type":{"doc":"`all`, `owner`, `public`, `private` or `member`"},"sort":{"doc":"`created`, `updated`, `pushed` or `full_name`"},"direction":{"doc":"`asc` or `desc`, default: when using `full_name`: `asc`, otherwise `desc`."}}},"listUserWatched":{"doc":"List repos being watched by a user","params":{"user":{"doc":"Name of the user"}}},"listWatched":{"doc":"List the authenticated user’s followers"},"listWatchers":{"doc":"List a user’s followers","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"markdown":{"doc":"Render an arbritrary Markdown document","params":{"text":{"doc":"The Markdown text to render"},"mode":{"doc":"The rendering mode.\t\t\t\t\t\t\t- `markdown` to render a document as plain Markdown, just like README files are rendered.\t\t\t\t\t\t\t- `gfm` to render a document as user-content, e.g. like user comments or issues are rendered. In GFM mode, hard line breaks are always taken into account, and issue and user mentions are linked accordingly."},"context":{"doc":"The repository context, only taken into account when rendering as `gfm`"}}},"markdownRaw":{"doc":"The raw API it not JSON-based. It takes a Markdown document as plaintext (text/plain or text/x-markdown) and renders it as plain Markdown without a repository context (just like a README.md file is rendered – this is the simplest way to preview a readme online)."},"me":{"doc":"Get the authenticated user"},"mergePullRequest":{"doc":"Merge a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Pull request number"},"commit_message":{"doc":"The message that will be used for the merge commit"}}},"postCommitComment":{"doc":"Create a commit comment","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"sha":{"doc":"SHA of the commit"},"body":{"doc":"Content of the comment"},"commit_id":{"doc":"Sha of the commit to comment on."},"line":{"doc":"Line number in the file to comment on."},"path":{"doc":"Relative path of the file to comment on."},"position":{"doc":"Line index in the diff to comment on."}}},"postIssueComment":{"doc":"Create a comment on an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"body":{"doc":"Content of the comment"}}},"postPullRequestComment":{"doc":"Create a comment on a pull request","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"},"body":{"doc":"Content of the comment"}}},"publicizeOrgMember":{"doc":"Publicize a user’s membership.","params":{"org":{"doc":"Organization name"},"user":{"doc":"Name of the user"}}},"removeCollaborator":{"doc":"Remove a collaborator","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"collaborator":{"doc":"Name of the collaborator user"}}},"removeEmails":{"doc":"Remove email address(es)"},"removeIssueLabels":{"doc":"Remove all labels from an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"removeOrgMember":{"doc":"Remove a member.\t\t\t\t\tRemoving a user from this list will remove them from all teams and they will no longer have any access to the organization’s repositories.","params":{"org":{"doc":"Organization name"},"user":{"doc":"Name of the user"}}},"removeTeamMember":{"doc":"Remove a team member.\t\t\t\t\tIn order to remove a user from a team, the authenticated user must have `admin` permissions to the team or be an owner of the org that the team is associated with. NOTE: This does not delete the user, it just remove them from the team.","params":{"id":{"doc":"Team id"},"user":{"doc":"Name of the user"}}},"removeTeamRepo":{"doc":"Remove team repo.\t\t\t\t\tIn order to remove a repo from a team, the authenticated user must be an owner of the org that the team is associated with.\t\t\t\t\tNOTE: This does not delete the repo, it just removes it from the team.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Team id"}}},"replaceIssueLabels":{"doc":"Replace all labels for an issue","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the issue"}}},"searchEmails":{"doc":"Email search.\t\t\t\t\tThis API call is added for compatibility reasons only. There’s no guarantee that full email searches will always be available.","params":{"email":{"doc":"Email address"}}},"searchIssues":{"doc":"Find issues by state and keyword.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"state":{"doc":"`open` or `closed`"},"keyword":{"doc":"Search term"}}},"searchRepos":{"doc":"Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the `start_page` parameter.","params":{"keyword":{"doc":"Search term"},"language":{"doc":"Filter results by language"},"start_page":{"doc":"Page number to fetch"}}},"searchUsers":{"doc":"Find users by keyword.","params":{"keyword":{"doc":"Search term"}}},"testHook":{"doc":"This will trigger the hook with the latest push to the current repository.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"id":{"doc":"Hook id"}}},"unfollow":{"doc":"Unfollow a user","params":{"user":{"doc":"Name of the user"}}},"unwatch":{"doc":"Stop watching a repo","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}},"updateLabel":{"doc":"Update a label","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{"doc":"Name of the label"},"color":{"doc":"6 character hex code, without a leading `#`"}}},"updateMilestone":{"doc":"Update a milestone","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Number of the milestone"},"title":{"doc":"Milestone title"},"state":{"doc":"`open` or `closed`"},"description":{"doc":"Milestone description"},"due_on":{"doc":"ISO 8601 time"}}},"updatePullRequest":{"doc":"Update a pull request.\t\t\t\t\tNOTE: `head` and `base` can be either a sha or a branch name. Typically you would namespace `head` with a user like this: `username:branch`.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"number":{"doc":"Pull request number"},"title":{"doc":"Pull request title"},"body":{"doc":"Pull request description"},"state":{"doc":"`open` or `closed` to filter by state."}}},"updateReference":{"doc":"Update a Reference","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"ref":{"doc":"Must be formatted as `heads/branch`, not just `branch`"},"sha":{"doc":"SHA1 value to set this reference to"},"force":{"doc":"Name of the fully qualified reference (ie: refs/heads/master). If it doesn’t start with ‘refs’ and have at least two slashes, it will be rejected"}}},"updateRepo":{"doc":"Edit a repository.","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"},"name":{"doc":"Repository name"},"description":{"doc":"Repository description"},"homepage":{"doc":"Repository homepage"},"private":{"doc":"`true` to create a private repository, `false` to create a public one. Creating private repositories requires a paid GitHub account."},"has_issues":{"doc":"`true` to enable issues for this repository, `false` to disable them."},"has_wiki":{"doc":"`true` to enable the wiki for this repository, `false` to disable it."},"has_downloads":{"doc":"`true` to enable downloads for this repository, `false` to disable them."},"team_id":{"doc":"The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization."}}},"watch":{"doc":"Watch a repo","params":{"user":{"doc":"Name of the user"},"repo":{"doc":"Name of the repository"}}}}
