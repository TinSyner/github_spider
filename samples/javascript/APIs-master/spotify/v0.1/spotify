/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	'lookup': function(args, opts) {
		var url = 'lookup/1/.json';
		var args = args || {};
		var params = {};
		if (typeof args == "string") params['uri'] = args; else params['uri'] = args['uri'];
		if (params['uri'] == null) throw new Error('uri is a required parameter');
		params['extras'] = args['extras'];
		return http({provider:fs('..'),url:url, auth:'none', method:'GET',params:params}, opts);
	},
	'searchAlbum' : function(args, opts) {
		var url = 'search/1/album.json';
		args = args || {};
		var params = {};
		if (typeof args == "string") params['q'] = args; else params['q'] = args['q'];
		if (params['q'] == null) throw new Error('q is a required parameter');
		params['page'] = args['page'];
		return http({provider:fs('..'),url:url, auth:'none', method:'GET',params:params}, opts);
	},
	'searchArtist' : function(args, opts) {
		var url = 'search/1/artist.json';
		args = args || {};
		var params = {};
		if (typeof args == "string") params['q'] = args; else params['q'] = args['q'];
		if (params['q'] == null) throw new Error('q is a required parameter');
		params['page'] = args['page'];
		return http({provider:fs('..'),url:url, auth:'none', method:'GET',params:params}, opts);
	},
	'searchTrack' : function(args, opts) {
		var url = 'search/1/track.json';
		args = args || {};
		var params = {};
		if (typeof args == "string") params['q'] = args; else params['q'] = args['q'];
		if (params['q'] == null) throw new Error('q is a required parameter');
		params['page'] = args['page'];
		return http({provider:fs('..'),url:url,  auth:'none',method:'GET',params:params}, opts);
	},
	'player' : function(args, opts) {
		args = args || {};
		var url = "https://embed.spotify.com/";
		var embed = '<iframe src="';
		var uris;
		var params = {};
		if (typeof args == "string") params['uri'] = args; else params['uri'] = args['uri'];
		if (params['uri'] == null) throw new Error('uri is a required parameter');

		uris = (typeof params['uri'] == "string") ? [params['uri']] : params['uri'];
		var l = 0;
		for (var k in uris)
			l++;
		if (l == 1)
			url += "?uri=" + uris[0];
		else
		{
			url += "?uri=spotify:trackset:";
			if (args['title'])
				url += args['title'] + ":";
			for (var i in uris)
				if (uris[i].lastIndexOf(':') == 13)
					url += uris[i].substring(14, uris[i].length) + ',';
			url = url.substring(0, url.length - 1);
		}
		if (args['theme'])
			url += '&theme=' + args['theme'];
		if (args['view'])
			url += '&view=' + args['view'];
		embed += url + '" ';
		if (args['width'] != null)
			embed += 'width="' + args['width'] + '" ';
		if (args['height'] != null)
			embed += 'height="' + args['height'] + '" ';
		embed += 'frameborder="0" allowtransparency="true"></iframe>';
		echo(embed);
	}
})