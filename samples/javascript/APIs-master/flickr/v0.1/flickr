/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def !== undefined)
		args[param] = def;
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (type == 'int' && args[param] !== undefined && (parseFloat(args[param]) != parseInt(args[param], 10) || isNaN(args[param])))
		throw new Error(param + ' must be an integer');
	return url;
}

var provider = fs('/bin/flickr');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Uploads a photo. Uploading apps can call the flickr.people.getUploadStatus method in the regular API to obtain file and bandwidth limits for the user.               
 * @category Photo Upload API
 * @param {string} [title]  The title of the photo. Optional.                       
 * @param {string} [description]  A description of the photo. May contain some limited HTML. Optional.                       
 * @param {string} [tags]  A space-seperated list of tags to apply to the photo. Optional.                       
 * @param {boolean} [is_public]  Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional.                       
 * @param {boolean} [is_friend]  Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional.                       
 * @param {boolean} [is_family]  Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional.                       
 * @param {integer} [safety_level]  Set to 1 for Safe, 2 for Moderate, or 3 for Restricted. Optional.                       
 * @param {integer} [content_type]  Set to 1 for Photo, 2 for Screenshot, or 3 for Other. Optional.                       
 * @param {integer} [hidden]  Set to 1 to keep the photo in global search results, 2 to hide from public searches. Optional.                       
 * @param {boolean} [async]  Flickr can process photos in async mode, for applications that need to post multiple photos and don't want to wait around for each one to complete, leaving a socket connection open the whole time. Set to 1 for async mode, 0 for sync mode.                       
 * @methodhttp POST
 */
exports.upload = function(args, opts) {
	var url = 'http://api.flickr.com/services/upload';
	args = args || {};
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'description', 'str');
	url = url_replace(url, args, 'tags', 'str');
	url = url_replace(url, args, 'is_public');
	url = url_replace(url, args, 'is_friend');
	url = url_replace(url, args, 'is_family');
	url = url_replace(url, args, 'safety_level', 'int');
	url = url_replace(url, args, 'content_type', 'int');
	url = url_replace(url, args, 'hidden', 'int');
	url = url_replace(url, args, 'async');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Replaces a photo that has already been uploaded to Flickr. Uploading apps can call the flickr.people.getUploadStatus method in the regular API to obtain file and bandwidth limits for the user.               
 * @category Photo Upload API
 * @param {string} photo_id  The ID of the photo to replace.                       
 * @param {boolean} [async]  Photos may be replaced in async mode, for applications that don't want to wait around for an upload to complete, leaving a socket connection open the whole time. Processing photos asynchronously is recommended. Please consult the documentation for details. Set to 1 for async mode, 0 for sync mode.                       
 * @methodhttp POST
 */
exports.replace = function(args, opts) {
	var url = 'http://api.flickr.com/services/replace';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'async');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of recent activity on photos commented on by the calling user. Do not poll this method more than once an hour.               
 * @category Activity
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {integer} [per_page]  Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.activityUserComments = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.activity.userComments';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'per_page', 'int', false, "10");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of recent activity on photos commented on by the calling user. Do not poll this method more than once an hour.               
 * @category Activity
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [timeframe]  The timeframe in which to return updates for. This can be specified in days ('2d') or hours ('4h'). The default behavoir is to return changes since the beginning of the previous user session.                       
 * @param {integer} [per_page]  Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.activityUserPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.activity.userPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'timeframe', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "10");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the credentials attached to an authentication token. This call must be signed as specified in the authentication API spec.               
 * @category Auth
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} auth_token  The authentication token to check.                       
 * @methodhttp GET
 */
exports.authCheckToken = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.auth.checkToken';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'auth_token', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a frob to be used during authentication. This method call must be signed, and is deprecated in favour of OAuth.               
 * @category Auth
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.authGetFrob = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.auth.getFrob';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the full authentication token for a mini-token. This method call must be signed.               
 * @category Auth
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} mini_token  The mini-token typed in by a user. It should be 9 digits long. It may optionally contain dashes.                       
 * @methodhttp GET
 */
exports.authGetFullToken = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.auth.getFullToken';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'mini_token', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the auth token for the given frob, if one has been attached. This method call must be signed, and is deprecated in favour of OAuth.               
 * @category Auth
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} frob  The frob to check.                       
 * @methodhttp GET
 */
exports.authGetToken = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.auth.getToken';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'frob', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Exchange an auth token from the old Authentication API, to an OAuth access token. Calling this method will delete the auth token used to make the request. The request must be signed.               
 * @category Auth
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.authOauthGetAccessToken = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.auth.oauth.getAccessToken';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list of configured blogs for the calling user.               
 * @category Blogs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [service]  Optionally only return blogs for a given service id. You can get a list of from flickr.blogs.getServices().                       
 * @methodhttp GET
 */
exports.blogsGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.blogs.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'service', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of Flickr supported blogging services.               
 * @category Blogs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.blogsGetServices = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.blogs.getServices';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Posts a photo to a blog.               
 * @category Blogs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [blog_id]  The ID of the blog to post to.                       
 * @param {string} [photo_id]  The ID of the photo to blog.                       
 * @param {string} title  The blog post title.                       
 * @param {string} description  The blog post body.                       
 * @param {string} [blog_password]  The password for the blog (used when the blog does not have a stored password).                       
 * @param {string} [service]  A Flickr supported blogging service. Instead of passing a blog id you can pass a service id and we'll post to the first blog of that service we find.                       
 * @methodhttp GET
 */
exports.blogsPostPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.blogs.postPhoto';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'blog_id', 'str');
	url = url_replace(url, args, 'photo_id', 'str');
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	url = url_replace(url, args, 'blog_password', 'str');
	url = url_replace(url, args, 'service', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns information for a single collection. Currently can only be called by the collection owner, this may change.               
 * @category Collections
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} collection_id  The ID of the collection to fetch information for.                       
 * @methodhttp GET
 */
exports.collectionsGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.collections.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'collection_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a tree (or sub tree) of collections belonging to a given user.               
 * @category Collections
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [collection_id]  The ID of the collection to fetch a tree for, or zero to fetch the root collection. Defaults to zero.                       
 * @param {string} [user_id]  The ID of the account to fetch the collection tree for. Deafults to the calling user.                       
 * @methodhttp GET
 */
exports.collectionsGetTree = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.collections.getTree';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'collection_id', 'str', false, "0");
	url = url_replace(url, args, 'user_id', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Retrieves a list of the current Commons institutions.               
 * @category Commons
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.commonsGetInstitutions = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.commons.getInstitutions';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list of contacts for the calling user.               
 * @category Contacts
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [filter]  An optional filter of the results. The following values are valid: friends (Only contacts who are friends, and not family), family (Only contacts who are family, and not friends), both (Only contacts who are both friends and family), neither (Only contacts who are neither friends nor family).                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 1000. The maximum allowed value is 1000.                       
 * @methodhttp GET
 */
exports.contactsGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.contacts.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'page', 'int', false, "1");
	url = url_replace(url, args, 'per_page', 'int', false, "1000");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Return a list of contacts for a user who have recently uploaded photos along with the total count of photos uploaded. This method is still considered experimental. We don't plan for it to change or to go away but so long as this notice is present you should write your code accordingly.               
 * @category Contacts
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {long} [date_lastupload]  Limits the resultset to contacts that have uploaded photos since this date. The date should be in the form of a Unix timestamp. The default offset is (1) hour and the maximum (24) hours.                       
 * @param {string} [filter]  Limit the result set to all contacts or only those who are friends or family. Valid options are: ff (friends and family), all (all your contacts). Default value is "all".                       
 * @methodhttp GET
 */
exports.contactsGetListRecentlyUploaded = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.contacts.getListRecentlyUploaded';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date_lastupload');
	url = url_replace(url, args, 'filter', 'str', false, "all");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the contact list for a user.               
 * @category Contacts
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user to fetch the contact list for.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 1000. The maximum allowed value is 1000.                       
 * @methodhttp GET
 */
exports.contactsGetPublicList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.contacts.getPublicList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'page', 'int', false, "1");
	url = url_replace(url, args, 'per_page', 'int', false, "1000");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Adds a photo to a user's favorites list.               
 * @category Favorites
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to add to the user's favorites.                       
 * @methodhttp GET
 */
exports.favoritesAdd = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.favorites.add';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of the user's favorite photos. Only photos which the calling user has permission to see are returned.               
 * @category Favorites
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {long} [min_fave_date]  Minimum date that a photo was favorited on. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_fave_date]  Maximum date that a photo was favorited on. The date should be in the form of a unix timestamp.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.favoritesGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.favorites.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'min_fave_date');
	url = url_replace(url, args, 'max_fave_date');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of favorite public photos for the given user.               
 * @category Favorites
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The user to fetch the favorites list for.                       
 * @param {long} [min_fave_date]  Minimum date that a photo was favorited on. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_fave_date]  Maximum date that a photo was favorited on. The date should be in the form of a unix timestamp.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.favoritesGetPublicList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.favorites.getPublicList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'min_fave_date');
	url = url_replace(url, args, 'max_fave_date');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Adds a photo to a user's favorites list.               
 * @category Favorites
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to remove to the user's favorites.                       
 * @methodhttp GET
 */
exports.favoritesRemove = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.favorites.remove';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add a photo to a gallery.               
 * @category Galleries
 * @param {string} gallery_id  The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto.                       
 * @param {string} photo_id  The photo ID to add to the gallery.                       
 * @param {string} [comment]  A short comment or story to accompany the photo.                       
 * @methodhttp POST
 */
exports.galleriesAddPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.addPhoto';
	args = args || {};
	url = url_replace(url, args, 'gallery_id', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'comment', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Create a new gallery for the calling user.               
 * @category Galleries
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} title  The title of the gallery.                       
 * @param {string} description  A short description for the gallery.                       
 * @param {string} [primary_photo_id]  The first photo to add to your gallery.                       
 * @methodhttp POST
 */
exports.galleriesCreate = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.create';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	url = url_replace(url, args, 'primary_photo_id', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Modify the metadata for a gallery.               
 * @category Galleries
 * @param {string} gallery_id  The gallery ID to update.                       
 * @param {string} title  The new title for the gallery.                       
 * @param {string} description  The new description for the gallery.                       
 * @methodhttp POST
 */
exports.galleriesEditMeta = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.editMeta';
	args = args || {};
	url = url_replace(url, args, 'gallery_id', 'str', true);
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Edit the comment for a gallery photo.               
 * @category Galleries
 * @param {string} gallery_id  The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto.                       
 * @param {string} photo_id  The photo ID to add to the gallery.                       
 * @param {string} comment  The updated comment the photo.                       
 * @methodhttp POST
 */
exports.galleriesEditPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.editPhoto';
	args = args || {};
	url = url_replace(url, args, 'gallery_id', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'comment', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Modify the photos in a gallery. Use this method to add, remove and re-order photos.               
 * @category Galleries
 * @param {string} gallery_id  The id of the gallery to modify. The gallery must belong to the calling user.                       
 * @param {string} primary_photo_id  The id of the photo to use as the 'primary' photo for the gallery. This id must also be passed along in photo_ids list argument.                       
 * @param {string} photo_ids  A comma-delimited list of photo ids to include in the gallery. They will appear in the set in the order sent. This list must contain the primary photo id. This list of photos replaces the existing list.                       
 * @methodhttp POST
 */
exports.galleriesEditPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.editPhotos';
	args = args || {};
	url = url_replace(url, args, 'gallery_id', 'str', true);
	url = url_replace(url, args, 'primary_photo_id', 'str', true);
	url = url_replace(url, args, 'photo_ids', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns information about a gallery.               
 * @category Galleries
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} gallery_id  The gallery ID you are requesting information for.                       
 * @methodhttp GET
 */
exports.galleriesGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'gallery_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the list of galleries created by a user. Sorted from newest to oldest.               
 * @category Galleries
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user to get a galleries list for. If none is specified, the calling user is assumed.                       
 * @param {integer} [per_page]  Number of galleries to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.galleriesGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the list of galleries to which a photo has been added. Galleries are returned sorted by date which the photo was added to the gallery.               
 * @category Galleries
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The ID of the photo to fetch a list of galleries for.                       
 * @param {integer} [per_page]  Number of galleries to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.galleriesGetListForPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.getListForPhoto';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the list of photos for a gallery.               
 * @category Galleries
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} gallery_id  The ID of the gallery of photos to return.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of galleries to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.galleriesGetPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.galleries.getPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'gallery_id', 'str', true);
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Browse the group category tree, finding groups and sub-categories.               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [cat_id]  The category id to fetch a list of groups and sub-categories for. If not specified, it defaults to zero, the root of the category tree.                       
 * @methodhttp GET
 */
exports.groupsBrowse = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.browse';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'cat_id', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get information about a group.               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} group_id  The NSID of the group to fetch information for.                       
 * @param {string} [lang]  The language of the group name and description to fetch. If the language is not found, the primary language of the group will be returned. Valid values are the same as in feeds.                       
 * @methodhttp GET
 */
exports.groupsGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'group_id', 'str', true);
	url = url_replace(url, args, 'lang', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Search for groups. 18+ groups will only be returned for authenticated calls where the authenticated user is over 18.               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} text  The text to search for.                       
 * @param {integer} [per_page]  Number of groups to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.groupsSearch = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.search';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'text', 'str', true);
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list of the members of a group. The call must be signed on behalf of a Flickr member, and the ability to see the group membership will be determined by the Flickr member's group privileges.               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} group_id  Return a list of members for this group. The group must be viewable by the Flickr member on whose behalf the API call is made.                       
 * @param {string} [membertypes]  Comma separated list of member types. Accepted values: 2 (member), 3 (moderator), 4 (admin). By default returns all types. (Returning super rare member type "1: narwhal" isn't supported by this API method)                       
 * @param {integer} [per_page]  Number of groups to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.groupsMembersGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.members.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'group_id', 'str', true);
	url = url_replace(url, args, 'membertypes', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add a photo to a group's pool.               
 * @category Groups
 * @param {string} photo_id  The id of the photo to add to the group pool. The photo must belong to the calling user.                       
 * @param {string} group_id  The NSID of the group whose pool the photo is to be added to.                       
 * @methodhttp POST
 */
exports.groupsPoolsAdd = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.pools.add';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'group_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns next and previous photos for a photo in a group pool.               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch the context for.                       
 * @param {string} group_id  The NSID of the group whose pool to fetch the photo's context for.                       
 * @methodhttp GET
 */
exports.groupsPoolsGetContext = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.pools.getContext';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'group_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a list of groups to which you can add photos.               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @param {string} [per_page]  Number of groups to return per page. If this argument is omitted, it defaults to 400. The maximum allowed value is 400.                       
 * @methodhttp GET
 */
exports.groupsPoolsGetGroups = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.pools.getGroups';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'page', 'str', false, "1");
	url = url_replace(url, args, 'per_page', 'str', false, "400");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of pool photos for a given group, based on the permissions of the group and the user logged in (if any).               
 * @category Groups
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [tags]  A tag to filter the pool with. At the moment only one tag at a time is supported.                       
 * @param {string} [user_id]  The nsid of a user. Specifiying this parameter will retrieve for you only those photos that the user has contributed to the group pool.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 400.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.groupsPoolsGetPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.pools.getPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'tags', 'str');
	url = url_replace(url, args, 'user_id', 'str');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Remove a photo from a group pool.               
 * @category Groups
 * @param {string} photo_id  The id of the photo to remove from the group pool. The photo must either be owned by the calling user of the calling user must be an administrator of the group.                       
 * @param {string} group_id  The NSID of the group who's pool the photo is to removed from.                       
 * @methodhttp POST
 */
exports.groupsPoolsRemove = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.groups.pools.remove';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'group_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the list of interesting photos for the most recent day or a user-specified date.               
 * @category Interestingness
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [date]  A specific date, formatted as YYYY-MM-DD, to return interesting photos for.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.interestingnessGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.interestingness.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of unique namespaces, optionally limited by a given predicate, in alphabetical order.               
 * @category Machine Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [predicate]  Limit the list of namespaces returned to those that have the following predicate.                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.machinetagsGetNamespaces = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.machinetags.getNamespaces';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'predicate', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of unique namespace and predicate pairs, optionally limited by predicate or namespace, in alphabetical order.               
 * @category Machine Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [namespace]  Limit the list of pairs returned to those that have the following namespace.                       
 * @param {string} [predicate]  Limit the list of namespaces returned to those that have the following predicate.                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.machinetagsGetPairs = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.machinetags.getPairs';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'namespace', 'str');
	url = url_replace(url, args, 'predicate', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of unique predicates, optionally limited by a given namespace.               
 * @category Machine Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [namespace]  Limit the list of predicates returned to those that have the following namespace.                       
 * @param {integer} [per_page]  Number of predicates to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.machinetagsGetPredicates = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.machinetags.getPredicates';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'namespace', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Fetch recently used (or created) machine tags values.               
 * @category Machine Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [namespace]  A namespace that all values should be restricted to.                       
 * @param {string} [predicate]  A predicate that all values should be restricted to.                       
 * @param {integer} [per_page]  Number of values to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.machinetagsGetRecentValues = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.machinetags.getRecentValues';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'namespace', 'str');
	url = url_replace(url, args, 'predicate', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of unique values for a namespace and predicate.               
 * @category Machine Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [namespace]  A namespace that all values should be restricted to.                       
 * @param {string} [predicate]  A predicate that all values should be restricted to.                       
 * @param {integer} [per_page]  Number of values to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.machinetagsGetValues = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.machinetags.getValues';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'namespace', 'str');
	url = url_replace(url, args, 'predicate', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of Flickr pandas, from whom you can request photos using the flickr.panda.getPhotos API method. More information about the pandas can be found on the dev blog.               
 * @category Panda
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.pandaGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.panda.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Ask the Flickr Pandas for a list of recent public (and "safe") photos. More information about the pandas can be found on the dev blog.               
 * @category Panda
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} panda_name  The name of the panda to ask for photos from. You can fetch a list of all the current pandas using the flickr.panda.getList API method.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.pandaGetPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.panda.getPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'panda_name', 'str', true);
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a user's NSID, given their email address               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} find_email  The email address of the user to find (may be primary or secondary).                       
 * @methodhttp GET
 */
exports.peopleFindByEmail = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.findByEmail';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'find_email', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a user's NSID, given their username.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} username  The username of the user to lookup.                       
 * @methodhttp GET
 */
exports.peopleFindByUsername = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.findByUsername';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'username', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get information about a user.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user to fetch information about.                       
 * @methodhttp GET
 */
exports.peopleGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return photos from the given user's photostream. Only photos visible to the calling user will be returned. This method must be authenticated; to return public photos for a user, use flickr.people.getPublicPhotos.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user whose photos to return. A value of "me" will return the calling user's photos.                       
 * @param {integer} [safe_search]  Safe search setting. Accepted values: 1 (safe), 2 (moderate), 3 (restricted)                       
 * @param {long} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {string} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @param {string} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @param {integer} [content_type]  Content type setting. Accepted values: 1 (photos only), 2 (screenshots only), 3 ('other' only), 4 (photos and screenshots), 5 (screenshots and 'other'), 6 (photos and 'other'), 7 (photos, screenshots, and 'other') (all)                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.peopleGetPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.getPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'safe_search', 'int');
	url = url_replace(url, args, 'min_upload_date');
	url = url_replace(url, args, 'max_upload_date');
	url = url_replace(url, args, 'min_taken_date', 'str');
	url = url_replace(url, args, 'max_taken_date', 'str');
	url = url_replace(url, args, 'content_type', 'int');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of photos containing a particular Flickr member.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user you want to find photos of. A value of "me" will search against photos of the calling user, for authenticated calls.                       
 * @param {integer} [owner_id]  An NSID of a Flickr member. This will restrict the list of photos to those taken by that member.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, date_person_added, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.peopleGetPhotosOf = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.getPhotosOf';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'owner_id', 'int');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the list of public groups a user is a member of.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user to fetch groups for.                       
 * @methodhttp GET
 */
exports.peopleGetPublicGroups = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.getPublicGroups';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list of public photos for the given user.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user whose photos to return.                       
 * @param {integer} [safe_search]  Safe search setting. Accepted values: 1 (safe), 2 (moderate), 3 (restricted). Note: Un-authed calls can only see Safe content.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.peopleGetPublicPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.getPublicPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'safe_search', 'int');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns information for the calling user related to photo uploads.               
 * @category People
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.peopleGetUploadStatus = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.people.getUploadStatus';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add tags to a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to add tags to.                       
 * @param {string} tags  The tags to add to the photo.                       
 * @methodhttp POST
 */
exports.photosAddTags = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.addTags';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'tags', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Delete a photo from Flickr.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to delete.                       
 * @methodhttp POST
 */
exports.photosDelete = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.delete';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns all visible sets and pools the photo belongs to.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The photo to return information for.                       
 * @methodhttp GET
 */
exports.photosGetAllContexts = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getAllContexts';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Fetch a list of recent photos from the calling users' contacts.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {integer} [count]  Number of photos to return. Defaults to 10, maximum 50. This is only used if single_photo is not passed.                       
 * @param {boolean} [just_friends]  Set as 1 to only show photos from friends and family (excluding regular contacts).                       
 * @param {boolean} [single_photo]  Only fetch one photo (the latest) per contact, instead of all photos in chronological order.                       
 * @param {boolean} [include_self]  Set to 1 to include photos from the calling user.                       
 * @param {boolean} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields include: license, date_upload, date_taken, owner_name, icon_server, original_format, last_update. For more information see extras under flickr.photos.search.                       
 * @methodhttp GET
 */
exports.photosGetContactsPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getContactsPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'count', 'int', false, "10");
	url = url_replace(url, args, 'just_friends');
	url = url_replace(url, args, 'single_photo');
	url = url_replace(url, args, 'include_self');
	url = url_replace(url, args, 'extras');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Fetch a list of recent public photos from a users' contacts.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} user_id  The NSID of the user to fetch photos for.                       
 * @param {integer} [count]  Number of photos to return. Defaults to 10, maximum 50. This is only used if single_photo is not passed.                       
 * @param {boolean} [just_friends]  Set as 1 to only show photos from friends and family (excluding regular contacts).                       
 * @param {boolean} [single_photo]  Only fetch one photo (the latest) per contact, instead of all photos in chronological order.                       
 * @param {boolean} [include_self]  Set to 1 to include photos from the calling user.                       
 * @param {boolean} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields include: license, date_upload, date_taken, owner_name, icon_server, original_format, last_update. For more information see extras under flickr.photos.search.                       
 * @methodhttp GET
 */
exports.photosGetContactsPublicPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getContactsPublicPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'count', 'int', false, "10");
	url = url_replace(url, args, 'just_friends');
	url = url_replace(url, args, 'single_photo');
	url = url_replace(url, args, 'include_self');
	url = url_replace(url, args, 'extras');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns next and previous photos for a photo in a photostream.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch the context for.                       
 * @methodhttp GET
 */
exports.photosGetContext = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getContext';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns next and previous photos for a photo in a photostream.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [dates]  A comma delimited list of unix timestamps, denoting the periods to return counts for. They should be specified smallest first.                       
 * @param {string} [taken_dates]  A comma delimited list of mysql datetimes, denoting the periods to return counts for. They should be specified smallest first.                       
 * @methodhttp GET
 */
exports.photosGetCounts = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getCounts';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'dates', 'str');
	url = url_replace(url, args, 'taken_dates', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch information for.                       
 * @param {string} [secret]  The secret for the photo. If the correct secret is passed then permissions checking is skipped. This enables the 'sharing' of individual photos by passing around the id and secret.                       
 * @methodhttp GET
 */
exports.photosGetExif = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getExif';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'secret', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the list of people who have favorited a given photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch the favoriters list for.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @param {integer} [per_page]  Number of users to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50.                       
 * @methodhttp GET
 */
exports.photosGetFavorites = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getFavorites';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'page', 'int', false, "1");
	url = url_replace(url, args, 'per_page', 'int', false, "10");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get information about a photo. The calling user must have permission to view the photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to get information for.                       
 * @param {string} [secret]  The secret for the photo. If the correct secret is passed then permissions checking is skipped. This enables the 'sharing' of individual photos by passing around the id and secret.                       
 * @methodhttp GET
 */
exports.photosGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'secret', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a list of your photos that are not part of any sets.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {string} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {long} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {long} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [media]  Filter results by media type. Possible values are all (default), photos, videos                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGetNotInSet = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getNotInSet';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'max_upload_date', 'str');
	url = url_replace(url, args, 'min_upload_date', 'str');
	url = url_replace(url, args, 'min_taken_date');
	url = url_replace(url, args, 'max_taken_date');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'media', 'str', false, "all");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get permissions for a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to get permissions for.                       
 * @methodhttp GET
 */
exports.photosGetPerms = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getPerms';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the list of people who have favorited a given photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGetRecent = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getRecent';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the available sizes for a photo. The calling user must have permission to view the photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch size information for.                       
 * @methodhttp GET
 */
exports.photosGetSizes = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getSizes';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a list of your photos that are not tagged.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {string} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {long} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {long} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [media]  Filter results by media type. Possible values are all (default), photos, videos                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGetUntagged = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getUntagged';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'max_upload_date', 'str');
	url = url_replace(url, args, 'min_upload_date', 'str');
	url = url_replace(url, args, 'min_taken_date');
	url = url_replace(url, args, 'max_taken_date');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'media', 'str', false, "all");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of your geo-tagged photos.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {string} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {long} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {long} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [media]  Filter results by media type. Possible values are all (default), photos, videos                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGetWithGeoData = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getWithGeoData';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'max_upload_date', 'str');
	url = url_replace(url, args, 'min_upload_date', 'str');
	url = url_replace(url, args, 'min_taken_date');
	url = url_replace(url, args, 'max_taken_date');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'media', 'str', false, "all");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of your photos which haven't been geo-tagged.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {string} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {long} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {long} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [media]  Filter results by media type. Possible values are all (default), photos, videos                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGetWithoutGeoData = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getWithoutGeoData';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'max_upload_date', 'str');
	url = url_replace(url, args, 'min_upload_date', 'str');
	url = url_replace(url, args, 'min_taken_date');
	url = url_replace(url, args, 'max_taken_date');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'media', 'str', false, "all");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Return a list of your photos that have been recently created or which have been recently modified. Recently modified may mean that the photo's metadata (title, description, tags) may have been changed or a comment has been added (or just modified somehow :-)               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} min_date  A Unix timestamp or any English textual datetime description indicating the date from which modifications should be compared.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGetRecentlyUpdated = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.getRecentlyUpdated';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'min_date', 'str', true);
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Remove a tag from a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to add tags to.                       
 * @param {string} tag_id  The tag to remove from the photo. This parameter should contain a tag id, as returned by flickr.photos.getInfo.                       
 * @methodhttp POST
 */
exports.photosRemoveTag = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.removeTag';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'tag_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Return a list of photos matching some criteria. Only photos visible to the calling user will be returned. To return private or semi-private photos, the caller must be authenticated with 'read' permissions, and have permission to view the photos. Unauthenticated calls will only return public photos.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user who's photo to search. If this parameter isn't passed then everybody's public photos will be searched. A value of "me" will search against the calling user's photos for authenticated calls.                       
 * @param {string} [tags]  A comma-delimited list of tags. Photos with one or more of the tags listed will be returned. You can exclude results that match a term by prepending it with a - character.                       
 * @param {string} [tag_mode]  Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified.                       
 * @param {string} [text]  A free text search. Photos whose title, description or tags contain the text will be returned. You can exclude results that match a term by prepending it with a - character.                       
 * @param {string} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {string} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.                       
 * @param {string} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {string} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.                       
 * @param {string} [license]  The license id for photos (for possible values see the flickr.photos.licenses.getInfo method). Multiple licenses may be comma-separated.                       
 * @param {string} [sort]  The order in which to sort returned photos. Deafults to date-posted-desc (unless you are doing a radial geo query, in which case the default sorting is by ascending distance from the point specified). The possible values are: date-posted-asc, date-posted-desc, date-taken-asc, date-taken-desc, interestingness-desc, interestingness-asc, and relevance.                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [hbox]  A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched. See API docs for more info.                       
 * @param {integer} [accuracy]  Recorded accuracy level of the location information. Current range is 1-16: World level is 1, Country is ~3, Region is ~6, City is ~11, Street is ~16. Defaults to maximum value if not specified.                       
 * @param {integer} [safe_search]  Safe search setting. Accepted values: 1 (safe), 2 (moderate), 3 (restricted)                       
 * @param {integer} [content_type]  Content type setting. Accepted values: 1 (photos only), 2 (screenshots only), 3 ('other' only), 4 (photos and screenshots), 5 (screenshots and 'other'), 6 (photos and 'other'), 7 (photos, screenshots, and 'other') (all)                       
 * @param {string} [machine_tags]  Machine tag(s). See API docs for format. Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. "AND" queries are limited to (16) machine tags. "OR" queries are limited to (8).                       
 * @param {string} [machine_tag_mode]  Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified.                       
 * @param {string} [group_id]  The id of a group who's pool to search. If specified, only matching photos posted to the group's pool will be returned.                       
 * @param {string} [contacts]  Search your contacts. Either 'all' or 'ff' for just friends and family. (Experimental)                       
 * @param {string} [woe_id]  A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info.                       
 * @param {string} [place_id]  A Flickr place id. (not used if bbox argument is present). See API docs for more info.                       
 * @param {string} [media]  Filter results by media type. Possible values are all (default), photos, videos                       
 * @param {string} [has_geo]  Any photo that has been geotagged, or if the value is "0" any photo that has not been geotagged. See API docs for more info.                       
 * @param {integer} [geo_context]  Geo context is a numeric value representing the photo's geotagginess beyond latitude and longitude. See API docs for more info. Accepted values: 0 (not defined), 1 (indoors), 2 (outdoors)                       
 * @param {double} [lat]  A valid latitude, in decimal format, for doing radial geo queries. See API docs for more info.                       
 * @param {double} [lon]  A valid longitude, in decimal format, for doing radial geo queries. See API docs for more info.                       
 * @param {double} [radius]  A valid radius used for geo queries, greater than zero and less than 20 miles (or 32 kilometers), for use with point-based geo queries. The default value is 5 (km).                       
 * @param {double} [radius_units]  The unit of measure when doing radial geo queries. Valid options are "mi" (miles) and "km" (kilometers). The default is "km".                       
 * @param {boolean} [is_commons]  Limit the scope of the search to only photos that are part of the Flickr Commons project. Default is false.                       
 * @param {boolean} [is_gallery]  Limit the scope of the search to only photos that are in a gallery? Default is false, search all photos.                       
 * @param {boolean} [is_getty]  Limit the scope of the search to only photos that are for sale on Getty. Default is false.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosSearch = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.search';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	url = url_replace(url, args, 'tags', 'str');
	url = url_replace(url, args, 'tag_mode', 'str', false, "any");
	url = url_replace(url, args, 'text', 'str');
	url = url_replace(url, args, 'min_upload_date', 'str');
	url = url_replace(url, args, 'max_upload_date', 'str');
	url = url_replace(url, args, 'min_taken_date', 'str');
	url = url_replace(url, args, 'max_taken_date', 'str');
	url = url_replace(url, args, 'license', 'str');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'hbox', 'str');
	url = url_replace(url, args, 'accuracy', 'int', false, "16");
	url = url_replace(url, args, 'safe_search', 'int');
	url = url_replace(url, args, 'content_type', 'int');
	url = url_replace(url, args, 'machine_tags', 'str');
	url = url_replace(url, args, 'machine_tag_mode', 'str', false, "any");
	url = url_replace(url, args, 'group_id', 'str');
	url = url_replace(url, args, 'contacts', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'media', 'str', false, "all");
	url = url_replace(url, args, 'has_geo', 'str');
	url = url_replace(url, args, 'geo_context', 'int');
	url = url_replace(url, args, 'lat');
	url = url_replace(url, args, 'lon');
	url = url_replace(url, args, 'radius', 'null', false, "5");
	url = url_replace(url, args, 'radius_units', 'null', false, "km");
	url = url_replace(url, args, 'is_commons', 'null', false, "false");
	url = url_replace(url, args, 'is_gallery', 'null', false, "false");
	url = url_replace(url, args, 'is_getty', 'null', false, "false");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set the content type of a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to set the adultness of.                       
 * @param {string} content_type  The content type of the photo. Must be one of: 1 for Photo, 2 for Screenshot, and 3 for Other.                       
 * @methodhttp POST
 */
exports.photosSetContentType = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.setContentType';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'content_type', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set one or both of the dates for a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to edit dates for.                       
 * @param {string} [date_posted]  The date the photo was uploaded to flickr (see the dates documentation)                       
 * @param {string} [date_taken]  The date the photo was taken (see the dates documentation)                       
 * @param {string} [date_taken_granularity]  The granularity of the date the photo was taken (see the dates documentation)                       
 * @methodhttp POST
 */
exports.photosSetDates = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.setDates';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'date_posted', 'str');
	url = url_replace(url, args, 'date_taken', 'str');
	url = url_replace(url, args, 'date_taken_granularity', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set the meta information for a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to set information for.                       
 * @param {string} title  The title for the photo.                       
 * @param {string} description  The description for the photo.                       
 * @methodhttp POST
 */
exports.photosSetMeta = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.setMeta';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set permissions for a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to set permissions for.                       
 * @param {boolean} is_public  1 to set the photo to public, 0 to set it to private.                       
 * @param {boolean} is_friend  1 to make the photo visible to friends when private, 0 to not.                       
 * @param {boolean} is_family  1 to make the photo visible to family when private, 0 to not.                       
 * @param {integer} perm_comment  Who can add comments to the photo and its notes. one of: 0: nobody, 1: friends & family, 2: contacts, 3: everybody.                       
 * @param {integer} perm_addmeta  Who can add notes and tags to the photo. one of: 0: nobody / just the owner, 1: friends & family, 2: contacts, 3: everybody.                       
 * @methodhttp POST
 */
exports.photosSetPerms = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.setPerms';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'is_public', 'null', true);
	url = url_replace(url, args, 'is_friend', 'null', true);
	url = url_replace(url, args, 'is_family', 'null', true);
	url = url_replace(url, args, 'perm_comment', 'int', true);
	url = url_replace(url, args, 'perm_addmeta', 'int', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set the safety level of a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to set the adultness of.                       
 * @param {integer} [safety_level]  The safety level of the photo. Must be one of: 1 for Safe, 2 for Moderate, and 3 for Restricted.                       
 * @param {boolean} [hidden]  Whether or not to additionally hide the photo from public searches. Must be either 1 for Yes or 0 for No.                       
 * @methodhttp POST
 */
exports.photosSetSafetyLevel = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.setSafetyLevel';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'safety_level', 'int');
	url = url_replace(url, args, 'hidden');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set the tags for a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to set the tags for.                       
 * @param {string} tags  All tags for the photo (as a single space-delimited string).                       
 * @methodhttp POST
 */
exports.photosSetTags = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.setTags';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'tags', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add comment to a photo as the currently authenticated user.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to add a comment to.                       
 * @param {string} comment_text  Text of the comment.                       
 * @methodhttp POST
 */
exports.photosCommentsAddComment = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.comments.addComment';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'comment_text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Delete comment as the currently authenticated user.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to delete a comment from.                       
 * @methodhttp POST
 */
exports.photosCommentsDeleteComment = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.comments.deleteComment';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Edit the text of a comment as the currently authenticated user.               
 * @category Photos
 * @param {string} comment_id  The id of the comment to edit.                       
 * @param {string} comment_text  Update the comment to this text.                       
 * @methodhttp POST
 */
exports.photosCommentsEditComment = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.comments.editComment';
	args = args || {};
	url = url_replace(url, args, 'comment_id', 'str', true);
	url = url_replace(url, args, 'comment_text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the comments for a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch comments for.                       
 * @param {long} [min_comment_date]  Minimum date that a comment was added. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_comment_date]  Maximum date that a comment was added. The date should be in the form of a unix timestamp.                       
 * @methodhttp GET
 */
exports.photosCommentsGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.comments.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'min_comment_date');
	url = url_replace(url, args, 'max_comment_date');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the list of photos belonging to your contacts that have been commented on recently.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {long} [date_lastcomment]  Limits the resultset to photos that have been commented on since this date. The date should be in the form of a Unix timestamp. The default, and maximum, offset is (1) hour.                       
 * @param {string} [contacts_filter]  A comma-separated list of contact NSIDs to limit the scope of the query to.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosCommentsGetRecentForContacts = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.comments.getRecentForContacts';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date_lastcomment');
	url = url_replace(url, args, 'contacts_filter', 'str');
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Correct the places hierarchy for all the photos for a user at a given latitude, longitude and accuracy. Batch corrections are processed in a delayed queue so it may take a few minutes before the changes are reflected in a user's photos.               
 * @category Photos
 * @param {double} lat  The latitude of the photos to be updated whose valid range is -90 to 90. Anything more than 6 decimal places will be truncated.                       
 * @param {double} lon  The longitude of the photos to be updated whose valid range is -180 to 180. Anything more than 6 decimal places will be truncated.                       
 * @param {integer} [accuracy]  Recorded accuracy level of the photos to be updated. World level is 1, Country is ~3, Region ~6, City ~11, Street ~16. Current range is 1-16. Defaults to 16 if not specified.                       
 * @param {string} [place_id]  A Flickr Places ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [woe_id]  A Where on Earch (WOE) ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @methodhttp POST
 */
exports.photosGeoBatchCorrectLocation = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.batchCorrectLocation';
	args = args || {};
	url = url_replace(url, args, 'lat', 'null', true);
	url = url_replace(url, args, 'lon', 'null', true);
	url = url_replace(url, args, 'accuracy', 'int', false, "16");
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Corrects a photo's location.               
 * @category Photos
 * @param {string} photo_id  The ID of the photo whose WOE location is being corrected.                       
 * @param {string} [place_id]  A Flickr Places ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [woe_id]  A Where on Earch (WOE) ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @methodhttp POST
 */
exports.photosGeoCorrectLocation = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.correctLocation';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the geo data (latitude and longitude and the accuracy level) for a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo you want to retrieve location data for.                       
 * @methodhttp GET
 */
exports.photosGeoGetLocation = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.getLocation';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get permissions for who may view geo data for a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo you want to get permissions for.                       
 * @methodhttp GET
 */
exports.photosGeoGetPerms = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.getPerms';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Return a list of photos for the calling user at a specific latitude, longitude and accuracy               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {double} lat  The latitude whose valid range is -90 to 90. Anything more than 6 decimal places will be truncated.                       
 * @param {double} lon  The longitude whose valid range is -180 to 180. Anything more than 6 decimal places will be truncated.                       
 * @param {integer} [accuracy]  Recorded accuracy level of the location information. World level is 1, Country is ~3, Region ~6, City ~11, Street ~16. Current range is 1-16. Defaults to 16 if not specified.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosGeoPhotosForLocation = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.photosForLocation';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'lat', 'null', true);
	url = url_replace(url, args, 'lon', 'null', true);
	url = url_replace(url, args, 'accuracy', 'int', false, "16");
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Removes the geo data associated with a photo.               
 * @category Photos
 * @param {string} photo_id  The ID of the photo you want to remove location data from.                       
 * @methodhttp POST
 */
exports.photosGeoRemoveLocation = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.removeLocation';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Indicate the state of a photo's geotagginess beyond latitude and longitude. Note : photos passed to this method must already be geotagged (using the flickr.photos.geo.setLocation method).               
 * @category Photos
 * @param {string} photo_id  The ID of the photo you want to set context data for.                       
 * @param {string} context  Context is a numeric value representing the photo's geotagginess beyond latitude and longitude. For example, you may wish to indicate that a photo was taken "indoors" or "outdoors". The current list of context IDs is: 0 (not defined), 1 (indoors), 2 (outdoors). The default context for geotagged photos is 0, or "not defined".                       
 * @methodhttp POST
 */
exports.photosGeoSetContext = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.setContext';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'context', 'str', true, "0");
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Sets the geo data (latitude and longitude and, optionally, the accuracy level) for a photo. Before users may assign location data to a photo they must define who, by default, may view that information. Users can edit this preference at http://www.flickr.com/account/geo/privacy/. If a user has not set this preference, the API method will return an error.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo you want to retrieve location data for.                       
 * @param {double} lat  The latitude whose valid range is -90 to 90. Anything more than 6 decimal places will be truncated.                       
 * @param {double} lon  The longitude whose valid range is -180 to 180. Anything more than 6 decimal places will be truncated.                       
 * @param {integer} [accuracy]  Recorded accuracy level of the location information. World level is 1, Country is ~3, Region ~6, City ~11, Street ~16. Current range is 1-16. Defaults to 16 if not specified.                       
 * @param {string} context  Context is a numeric value representing the photo's geotagginess beyond latitude and longitude. For example, you may wish to indicate that a photo was taken "indoors" or "outdoors". The current list of context IDs is: 0 (not defined), 1 (indoors), 2 (outdoors). The default context for geotagged photos is 0, or "not defined".                       
 * @methodhttp POST
 */
exports.photosGeoSetLocation = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.setLocation';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'lat', 'null', true);
	url = url_replace(url, args, 'lon', 'null', true);
	url = url_replace(url, args, 'accuracy', 'int', false, "16");
	url = url_replace(url, args, 'context', 'str', true, "0");
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set the permission for who may view the geo data associated with a photo.               
 * @category Photos
 * @param {boolean} is_public  1 to set viewing permissions for the photo's location data to public, 0 to set it to private.                       
 * @param {boolean} is_contact  1 to set viewing permissions for the photo's location data to contacts, 0 to set it to private.                       
 * @param {boolean} is_friend  1 to set viewing permissions for the photo's location data to friends, 0 to set it to private.                       
 * @param {boolean} is_family  1 to set viewing permissions for the photo's location data to family, 0 to set it to private.                       
 * @param {string} photo_id  The id of the photo to get permissions for.                       
 * @methodhttp GET
 */
exports.photosGeoSetPerms = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.geo.setPerms';
	args = args || {};
	url = url_replace(url, args, 'is_public', 'null', true);
	url = url_replace(url, args, 'is_contact', 'null', true);
	url = url_replace(url, args, 'is_friend', 'null', true);
	url = url_replace(url, args, 'is_family', 'null', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Fetches a list of available photo licenses for Flickr.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.photosLicensesGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.licenses.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Sets the license for a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo you want to update the license for.                       
 * @param {string} license_id  The license to apply, or 0 (zero) to remove the current license. Note : as of this writing the "no known copyright restrictions" license (7) is not a valid argument.                       
 * @methodhttp POST
 */
exports.photosLicensesSetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.licenses.setInfo';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'license_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add a note to a photo. Coordinates and sizes are in pixels, based on the 500px image size shown on individual photo pages.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to add a note to                       
 * @param {integer} note_x  The left coordinate of the note                       
 * @param {integer} note_y  The top coordinate of the note                       
 * @param {integer} note_w  The width of the note                       
 * @param {integer} note_h  The height of the note                       
 * @param {string} note_text  The description of the note                       
 * @methodhttp POST
 */
exports.photosNotesAdd = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.notes.add';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'note_x', 'int', true);
	url = url_replace(url, args, 'note_y', 'int', true);
	url = url_replace(url, args, 'note_w', 'int', true);
	url = url_replace(url, args, 'note_h', 'int', true);
	url = url_replace(url, args, 'note_text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Delete a note from a photo.               
 * @category Photos
 * @param {string} note_id  The id of the note to delete                       
 * @methodhttp POST
 */
exports.photosNotesDelete = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.notes.delete';
	args = args || {};
	url = url_replace(url, args, 'note_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Edit a note on a photo. Coordinates and sizes are in pixels, based on the 500px image size shown on individual photo pages.               
 * @category Photos
 * @param {string} note_id  The id of the note to edit                       
 * @param {integer} note_x  The left coordinate of the note                       
 * @param {integer} note_y  The top coordinate of the note                       
 * @param {integer} note_w  The width of the note                       
 * @param {integer} note_h  The height of the note                       
 * @param {string} note_text  The description of the note                       
 * @methodhttp POST
 */
exports.photosNotesEdit = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.notes.edit';
	args = args || {};
	url = url_replace(url, args, 'note_id', 'str', true);
	url = url_replace(url, args, 'note_x', 'int', true);
	url = url_replace(url, args, 'note_y', 'int', true);
	url = url_replace(url, args, 'note_w', 'int', true);
	url = url_replace(url, args, 'note_h', 'int', true);
	url = url_replace(url, args, 'note_text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add a person to a photo. Coordinates and sizes are in pixels, based on the 500px image size shown on individual photo pages.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to add a person to                       
 * @param {string} user_id  The NSID of the user to add to the photo                       
 * @param {integer} [person_x]  The left-most pixel co-ordinate of the box around the person.                       
 * @param {integer} [person_y]  The top-most pixel co-ordinate of the box around the person.                       
 * @param {integer} [person_w]  The width (in pixels) of the box around the person.                       
 * @param {integer} [person_h]  The height (in pixels) of the box around the person.                       
 * @methodhttp POST
 */
exports.photosPeopleAdd = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.people.add';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'person_x', 'int');
	url = url_replace(url, args, 'person_y', 'int');
	url = url_replace(url, args, 'person_w', 'int');
	url = url_replace(url, args, 'person_h', 'int');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Remove a person from a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to remove a person from.                       
 * @param {string} user_id  The NSID of the user to remove from the photo                       
 * @methodhttp POST
 */
exports.photosPeopleDelete = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.people.delete';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'user_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Remove the bounding box from a person in a photo               
 * @category Photos
 * @param {string} photo_id  The id of the photo to edit a person in.                       
 * @param {string} user_id  The NSID of the user whose bounding box you want to remove.                       
 * @methodhttp POST
 */
exports.photosPeopleDeleteCoords = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.people.deleteCoords';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'user_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Edit the bounding box of an existing person on a photo.               
 * @category Photos
 * @param {string} photo_id  The id of the photo to edit a person in.                       
 * @param {string} user_id  The NSID of the user to edit in the photo                       
 * @param {integer} person_x  The left-most pixel co-ordinate of the box around the person.                       
 * @param {integer} person_y  The top-most pixel co-ordinate of the box around the person.                       
 * @param {integer} person_w  The width (in pixels) of the box around the person.                       
 * @param {integer} person_h  The height (in pixels) of the box around the person.                       
 * @methodhttp POST
 */
exports.photosPeopleEditCoords = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.people.editCoords';
	args = args || {};
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'person_x', 'int', true);
	url = url_replace(url, args, 'person_y', 'int', true);
	url = url_replace(url, args, 'person_w', 'int', true);
	url = url_replace(url, args, 'person_h', 'int', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of people in a given photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to get a list of people for.                       
 * @methodhttp GET
 */
exports.photosPeopleGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.people.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Rotate a photo.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to rotate.                       
 * @param {string} degrees  The amount of degrees by which to rotate the photo (clockwise) from it's current orientation. Valid values are 90, 180 and 270.                       
 * @methodhttp POST
 */
exports.photosTransformRotate = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.transform.rotate';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'degrees', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Checks the status of one or more asynchronous photo upload tickets.               
 * @category Photos
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} tickets  A comma-delimited list of ticket ids                       
 * @methodhttp GET
 */
exports.photosUploadCheckTickets = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photos.upload.checkTickets';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'tickets', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Add a photo to the end of an existing photoset.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to add a photo to.                       
 * @param {string} photo_id  The id of the photo to add to the set.                       
 * @methodhttp POST
 */
exports.photosetsAddPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.addPhoto';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Create a new photoset for the calling user.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} title  A title for the photoset.                       
 * @param {string} [description]  A description of the photoset. May contain limited html.                       
 * @param {string} primary_photo_id  The id of the photo to represent this set. The photo must belong to the calling user.                       
 * @methodhttp POST
 */
exports.photosetsCreate = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.create';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'description', 'str');
	url = url_replace(url, args, 'primary_photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Delete a new photoset.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to delete. It must be owned by the calling user.                       
 * @methodhttp POST
 */
exports.photosetsDelete = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.delete';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Modify the meta-data for a photoset.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to modify.                       
 * @param {string} title  The new title for the photoset.                       
 * @param {string} description  A description of the photoset. May contain limited html.                       
 * @methodhttp POST
 */
exports.photosetsEditMeta = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.editMeta';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Modify the photos in a photoset. Use this method to add, remove and re-order photos.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to modify. The photoset must belong to the calling user.                       
 * @param {string} primary_photo_id  The id of the photo to use as the 'primary' photo for the set. This id must also be passed along in photo_ids list argument.                       
 * @param {string} photo_ids  A comma-delimited list of photo ids to include in the set. They will appear in the set in the order sent. This list must contain the primary photo id. All photos must belong to the owner of the set. This list of photos replaces the existing list. Call flickr.photosets.addPhoto to append a photo to a set.                       
 * @methodhttp POST
 */
exports.photosetsEditPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.editPhotos';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'primary_photo_id', 'str', true);
	url = url_replace(url, args, 'photo_ids', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns next and previous photos for a photo in a set.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to fetch the context for.                       
 * @param {string} photoset_id  The id of the photoset for which to fetch the photo's context.                       
 * @methodhttp GET
 */
exports.photosetsGetContext = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.getContext';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	url = url_replace(url, args, 'photoset_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Gets information about a photoset.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photoset_id  The ID of the photoset to fetch information for.                       
 * @methodhttp GET
 */
exports.photosetsGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photoset_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the photosets belonging to the specified user.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user to get a photoset list for. If none is specified, the calling user is assumed.                       
 * @methodhttp GET
 */
exports.photosetsGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the list of photos in a set.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photoset_id  The id of the photoset to return the photos for.                       
 * @param {string} [extras]  A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_o                       
 * @param {integer} [privacy_filter]  Return photos only matching a certain privacy level. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)                       
 * @param {string} [media]  Filter results by media type. Possible values are all (default), photos, videos                       
 * @param {integer} [per_page]  Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.photosetsGetPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'extras', 'str');
	url = url_replace(url, args, 'privacy_filter', 'int');
	url = url_replace(url, args, 'media', 'str', false, "all");
	url = url_replace(url, args, 'per_page', 'int', false, "100");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Set the order of photosets for the calling user.               
 * @category Photosets
 * @param {string} photoset_ids  A comma delimited list of photoset IDs, ordered with the set to show first, first in the list. Any set IDs not given in the list will be set to appear at the end of the list, ordered by their IDs.                       
 * @methodhttp POST
 */
exports.photosetsOrderSets = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.orderSets';
	args = args || {};
	url = url_replace(url, args, 'photoset_ids', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Remove a photo from a photoset.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to remove a photo from.                       
 * @param {string} photo_id  The id of the photo to remove to the set.                       
 * @methodhttp POST
 */
exports.photosetsRemovePhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.removePhoto';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Remove multiple photos from a photoset.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to remove photos from.                       
 * @param {string} photo_ids  Comma-delimited list of photo ids to remove from the photoset.                       
 * @methodhttp POST
 */
exports.photosetsRemovePhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.removePhotos';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'photo_ids', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Update the order of photos in a photoset.               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to reorder. The photoset must belong to the calling user.                       
 * @param {string} photo_ids  Ordered, comma-delimited list of photo ids. Photos that are not in the list will keep their original order.                       
 * @methodhttp POST
 */
exports.photosetsReorderPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.reorderPhotos';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'photo_ids', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Set photoset primary photo               
 * @category Photosets
 * @param {string} photoset_id  The id of the photoset to set primary photo of.                       
 * @param {string} photo_id  The id of the photo to set as primary.                       
 * @methodhttp POST
 */
exports.photosetsSetPrimaryPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.setPrimaryPhoto';
	args = args || {};
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Add a comment to a photoset.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photoset_id  The id of the photoset to add a comment to.                       
 * @param {string} comment_text  Text of the comment                       
 * @methodhttp POST
 */
exports.photosetsCommentsAddComment = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.comments.addComment';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photoset_id', 'str', true);
	url = url_replace(url, args, 'comment_text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Delete a photoset comment as the currently authenticated user.               
 * @category Photosets
 * @param {string} comment_id  The id of the comment to delete from a photoset.                       
 * @methodhttp POST
 */
exports.photosetsCommentsDeleteComment = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.comments.deleteComment';
	args = args || {};
	url = url_replace(url, args, 'comment_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Edit the text of a comment as the currently authenticated user.               
 * @category Photosets
 * @param {string} comment_id  The id of the comment to edit.                       
 * @param {string} comment_text  Update the comment to this text.                       
 * @methodhttp POST
 */
exports.photosetsCommentsEditComment = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.comments.editComment';
	args = args || {};
	url = url_replace(url, args, 'comment_id', 'str', true);
	url = url_replace(url, args, 'comment_text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the comments for a photoset.               
 * @category Photosets
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photoset_id  The id of the photoset to fetch comments for.                       
 * @methodhttp GET
 */
exports.photosetsCommentsGetList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.photosets.comments.getList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photoset_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of place IDs for a query string.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} query  The query string to use for place ID lookups.                       
 * @methodhttp GET
 */
exports.placesFind = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.find';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'query', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a place ID for a latitude, longitude and accuracy triple.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {float} lat  The latitude whose valid range is -90 to 90. Anything more than 4 decimal places will be truncated.                       
 * @param {float} lon  The longitude whose valid range is -180 to 180. Anything more than 4 decimal places will be truncated.                       
 * @param {integer} [accuracy]  Recorded accuracy level of the location information. World level is 1, Country is ~3, Region ~6, City ~11, Street ~16. Current range is 1-16. The default is 16.                       
 * @methodhttp GET
 */
exports.placesFindByLatLon = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.findByLatLon';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'lat', 'null', true);
	url = url_replace(url, args, 'lon', 'null', true);
	url = url_replace(url, args, 'accuracy', 'int', false, "16");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of locations with public photos that are parented by a Where on Earth (WOE) or Places ID.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [place_id]  A Flickr Places ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [woe_id]  A Where On Earth (WOE) ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @methodhttp GET
 */
exports.placesGetChildrenWithPhotosPublic = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.getChildrenWithPhotosPublic';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get information about a place.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [place_id]  A Flickr Places ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [woe_id]  A Where On Earth (WOE) ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @methodhttp GET
 */
exports.placesGetInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.getInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Lookup information about a place, by its flickr.com/places URL.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} url  A flickr.com/places URL in the form of /country/region/city. For example: /Canada/Quebec/Montreal                       
 * @methodhttp GET
 */
exports.placesGetInfoByUrl = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.getInfoByUrl';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'url', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Fetches a list of available place types for Flickr.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.placesGetPlaceTypes = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.getPlaceTypes';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return an historical list of all the shape data generated for a Places or Where on Earth (WOE) ID.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [place_id]  A Flickr Places ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [woe_id]  A Where On Earth (WOE) ID. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @methodhttp GET
 */
exports.placesGetShapeHistory = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.getShapeHistory';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return the top 100 most geotagged places for a day.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} place_type_id  The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent).                       
 * @param {string} [date]  A valid date in YYYY-MM-DD format. The default is yesterday.                       
 * @param {string} [woe_id]  Limit your query to only those top places belonging to a specific Where on Earth (WOE) identifier.                       
 * @param {string} [place_id]  Limit your query to only those top places belonging to a specific Flickr Places identifier.                       
 * @methodhttp GET
 */
exports.placesGetTopPlacesList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.getTopPlacesList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_type_id', 'str', true);
	url = url_replace(url, args, 'date', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	url = url_replace(url, args, 'place_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return all the locations of a matching place type for a bounding box.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} bbox  A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched. The 4 values represent the bottom-left corner of the box and the top-right corner, minimum_longitude, minimum_latitude, maximum_longitude, maximum_latitude.                       
 * @param {string} [place_type_id]  The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent).                       
 * @param {string} [place_type]  Deprecated in favor of place_type_id. The name of place type to using as the starting point to search for places in a bounding box. Valid placetypes are: neighbourhood, locality, county, region, country, continent.                       
 * @methodhttp GET
 */
exports.placesPlacesForBoundingBox = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.placesForBoundingBox';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'bbox', 'str', true);
	url = url_replace(url, args, 'place_type_id', 'str');
	url = url_replace(url, args, 'place_type', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of the top 100 unique places clustered by a given placetype for a user's contacts.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [place_type_id]  The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent).                       
 * @param {string} [place_type]  Deprecated in favor of place_type_id. The name of place type to using as the starting point to search for places in a bounding box. Valid placetypes are: neighbourhood, locality, county, region, country, continent.                       
 * @param {string} [woe_id]  A Where on Earth (WOE) identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [place_id]  A Flickr Places identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {integer} [threshold]  The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used.                       
 * @param {string} [contacts]  Search your contacts. Either 'all' or 'ff' for just friends and family. (Default is all)                       
 * @param {long} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {string} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @param {string} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @methodhttp GET
 */
exports.placesPlacesForContacts = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.placesForContacts';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_type_id', 'str');
	url = url_replace(url, args, 'place_type', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'threshold', 'int');
	url = url_replace(url, args, 'contacts', 'str', false, "all");
	url = url_replace(url, args, 'min_upload_date');
	url = url_replace(url, args, 'max_upload_date');
	url = url_replace(url, args, 'min_taken_date', 'str');
	url = url_replace(url, args, 'max_taken_date', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Return a list of the top 100 unique places clustered by a given placetype for set of tags or machine tags.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [place_type_id]  The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent).                       
 * @param {string} [woe_id]  A Where on Earth (WOE) identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [place_id]  A Flickr Places identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {integer} [threshold]  The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used.                       
 * @param {string} [tags]  A comma-delimited list of tags. Photos with one or more of the tags listed will be returned.                       
 * @param {string} [tag_mode]  Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified.                       
 * @param {string} [machine_tags]  Machine tags. See API docs for format. Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. "AND" queries are limited to (16) machine tags. "OR" queries are limited to (8).                       
 * @param {string} [machine_tag_mode]  Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified.                       
 * @param {long} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {string} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @param {string} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @methodhttp GET
 */
exports.placesPlacesForTags = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.placesForTags';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_type_id', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'threshold', 'int');
	url = url_replace(url, args, 'tags', 'str');
	url = url_replace(url, args, 'tag_mode', 'str', false, "any");
	url = url_replace(url, args, 'machine_tags', 'str');
	url = url_replace(url, args, 'machine_tag_mode', 'str', false, "any");
	url = url_replace(url, args, 'min_upload_date');
	url = url_replace(url, args, 'max_upload_date');
	url = url_replace(url, args, 'min_taken_date', 'str');
	url = url_replace(url, args, 'max_taken_date', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of the top 100 unique places clustered by a given placetype for a user.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [place_type_id]  The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent).                       
 * @param {string} [place_type]  Deprecated in favor of place_type_id. The name of place type to using as the starting point to search for places in a bounding box. Valid placetypes are: neighbourhood, locality, county, region, country, continent.                       
 * @param {string} [woe_id]  A Where on Earth (WOE) identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [place_id]  A Flickr Places identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {integer} [threshold]  The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used.                       
 * @param {long} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {string} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @param {string} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @methodhttp GET
 */
exports.placesPlacesForUser = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.placesForUser';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_type_id', 'str');
	url = url_replace(url, args, 'place_type', 'str');
	url = url_replace(url, args, 'woe_id', 'str');
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'threshold', 'int');
	url = url_replace(url, args, 'min_upload_date');
	url = url_replace(url, args, 'max_upload_date');
	url = url_replace(url, args, 'min_taken_date', 'str');
	url = url_replace(url, args, 'max_taken_date', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Find Flickr Places information by Place ID. This method has been deprecated. It won't be removed but you should use flickr.places.getInfo instead.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} place_id  A Flickr Places ID                       
 * @methodhttp GET
 */
exports.placesResolvePlaceId = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.resolvePlaceId';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'place_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Find Flickr Places information by Place URL. This method has been deprecated. It won't be removed but you should use flickr.places.getInfo instead.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} url  A Flickr Places URL. Flickr Place URLs are of the form /country/region/city                       
 * @methodhttp GET
 */
exports.placesResolvePlaceURL = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.resolvePlaceURL';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'url', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Return a list of the top 100 unique tags for a Flickr Places or Where on Earth (WOE) ID.               
 * @category Places
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [woe_id]  A Where on Earth (WOE) identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {string} [place_id]  A Flickr Places identifier to use to filter photo clusters. (While optional, you must pass either a valid Places ID or a WOE ID.)                       
 * @param {long} [min_upload_date]  Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {long} [max_upload_date]  Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp.                       
 * @param {string} [min_taken_date]  Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @param {string} [max_taken_date]  Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime.                       
 * @methodhttp GET
 */
exports.placesTagsForPlace = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.places.tagsForPlace';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'woe_id', 'str');
	url = url_replace(url, args, 'place_id', 'str');
	url = url_replace(url, args, 'min_upload_date');
	url = url_replace(url, args, 'max_upload_date');
	url = url_replace(url, args, 'min_taken_date', 'str');
	url = url_replace(url, args, 'max_taken_date', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the default content type preference for the user.               
 * @category Prefs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.prefsGetContentType = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.prefs.getContentType';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the default privacy level for geographic information attached to the user's photos and whether or not the user has chosen to use geo-related EXIF information to automatically geotag their photos.               
 * @category Prefs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.prefsGetGeoPerms = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.prefs.getGeoPerms';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the default hidden preference for the user.               
 * @category Prefs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.prefsGetHidden = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.prefs.getHidden';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the default privacy level preference for the user.               
 * @category Prefs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.prefsGetPrivacy = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.prefs.getPrivacy';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the default safety level preference for the user.               
 * @category Prefs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.prefsGetSafetyLevel = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.prefs.getSafetyLevel';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns information for a given Flickr API method.               
 * @category Reflection
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} method_name  The name of the method to fetch information for.                       
 * @methodhttp GET
 */
exports.reflectionGetMethodInfo = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.reflection.getMethodInfo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'method_name', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a list of available Flickr API methods.               
 * @category Reflection
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.reflectionGetMethods = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.reflection.getMethods';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list of referring domains for a collection               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} [collection_id]  The id of the collection to get stats for. If not provided, stats for all collections will be returned.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetCollectionDomains = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getCollectionDomains';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'collection_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referrers from a given domain to a collection               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} domain  The domain to return referrers for. This should be a hostname (eg: "flickr.com") with no protocol or pathname.                       
 * @param {string} [collection_id]  The id of the collection to get stats for. If not provided, stats for all collections will be returned.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetCollectionReferrers = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getCollectionReferrers';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'domain', 'str', true);
	url = url_replace(url, args, 'collection_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the number of views on a collection for a given date.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} collection_id  The id of the collection to get stats for.                       
 * @methodhttp GET
 */
exports.statsGetCollectionStats = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getCollectionStats';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'collection_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referring domains for a photo.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} [photo_id]  The id of the photo to get stats for. If not provided, stats for all photos will be returned.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPhotoDomains = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotoDomains';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referring domains for a photo.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} domain  The domain to return referrers for. This should be a hostname (eg: "flickr.com") with no protocol or pathname.                       
 * @param {string} [photo_id]  The id of the photo to get stats for. If not provided, stats for all photos will be returned.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPhotoReferrers = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotoReferrers';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'domain', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the number of views, comments and favorites on a photo for a given date.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} photo_id  The id of the photo to get stats for.                       
 * @methodhttp GET
 */
exports.statsGetPhotoStats = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotoStats';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referring domains for a photoset.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} [photoset_id]  The id of the photoset to get stats for. If not provided, stats for all sets will be returned.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPhotosetDomains = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotosetDomains';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'photoset_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referring domains for a photoset.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} domain  The domain to return referrers for. This should be a hostname (eg: "flickr.com") with no protocol or pathname.                       
 * @param {string} [photoset_id]  The id of the photoset to get stats for. If not provided, stats for all photosets will be returned.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPhotosetReferrers = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotosetReferrers';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'domain', 'str', true);
	url = url_replace(url, args, 'photoset_id', 'str');
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the number of views on a photoset for a given date.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {string} photoset_id  The id of the photoset to get stats for.                       
 * @methodhttp GET
 */
exports.statsGetPhotosetStats = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotosetStats';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'photoset_id', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referring domains for a photostream.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPhotostreamDomains = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotostreamDomains';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get a list of referrers from a given domain to a user's photostream               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} domain  The domain to return referrers for. This should be a hostname (eg: "flickr.com") with no protocol or pathname.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPhotostreamReferrers = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotostreamReferrers';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'domain', 'str', true);
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the number of views on a user's photostream for a given date.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} date  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day.                       
 * @methodhttp GET
 */
exports.statsGetPhotostreamStats = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPhotostreamStats';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * List the photos with the most views, comments or favorites.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [date]  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day. If no date is provided, all time view counts will be returned.                       
 * @param {string} [sort]  The order in which to sort returned photos. Defaults to views. The possible values are views, comments and favorites. Other sort options are available through flickr.photos.search.                       
 * @param {integer} [per_page]  Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.                       
 * @param {integer} [page]  The page of results to return. If this argument is omitted, it defaults to 1.                       
 * @methodhttp GET
 */
exports.statsGetPopularPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getPopularPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str');
	url = url_replace(url, args, 'sort', 'str', false, "views");
	url = url_replace(url, args, 'per_page', 'int', false, "25");
	url = url_replace(url, args, 'page', 'int', false, "1");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Get the overall view counts for an account.               
 * @category Stats
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [date]  Stats will be returned for this date. This should be in either be in YYYY-MM-DD or unix timestamp format. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will automatically be rounded down to the start of the day. If no date is provided, all time view counts will be returned.                       
 * @methodhttp GET
 */
exports.statsGetTotalViews = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.stats.getTotalViews';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'date', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the first 24 photos for a given tag cluster.               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} tag  The tag that this cluster belongs to.                       
 * @param {string} cluster_id  The top three tags for the cluster, separated by dashes (just like the url).                       
 * @methodhttp GET
 */
exports.tagsGetClusterPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getClusterPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'tag', 'str', true);
	url = url_replace(url, args, 'cluster_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a list of tag clusters for the given tag.               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} tag  The tag to fetch clusters for.                       
 * @methodhttp GET
 */
exports.tagsGetClusters = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getClusters';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'tag', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a list of hot tags for the given period.               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [period]  The period for which to fetch hot tags. Valid values are day and week (defaults to day).                       
 * @param {integer} [count]  The number of tags to return. Defaults to 20. Maximum allowed value is 200.                       
 * @methodhttp GET
 */
exports.tagsGetHotList = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getHotList';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'period', 'str', false, "day");
	url = url_replace(url, args, 'count', 'int', false, "20");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the tag list for a given photo.               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} photo_id  The id of the photo to return tags for.                       
 * @methodhttp GET
 */
exports.tagsGetListPhoto = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getListPhoto';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'photo_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the tag list for a given user (or the currently logged in user).               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user to fetch the tag list for. If this argument is not specified, the currently logged in user (if any) is assumed.                       
 * @methodhttp GET
 */
exports.tagsGetListUser = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getListUser';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the popular tags for a given user (or the currently logged in user).               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user to fetch the tag list for. If this argument is not specified, the currently logged in user (if any) is assumed.                       
 * @param {integer} [count]  Number of popular tags to return. defaults to 10 when this argument is not present.                       
 * @methodhttp GET
 */
exports.tagsGetListUserPopular = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getListUserPopular';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	url = url_replace(url, args, 'count', 'int', false, "10");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the raw versions of a given tag (or all tags) for the currently logged-in user.               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} tag  The tag you want to retrieve all raw versions for.                       
 * @methodhttp GET
 */
exports.tagsGetListUserRaw = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getListUserRaw';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'tag', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns a list of tags 'related' to the given tag, based on clustered usage analysis.               
 * @category Tags
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} tag  The tag to fetch related tags for.                       
 * @methodhttp GET
 */
exports.tagsGetRelated = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.tags.getRelated';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'tag', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * A testing method which echoes all parameters back in the response.               
 * @category Test
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.testEcho = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.test.echo';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * A testing method which checks if the caller is logged in then returns their username.               
 * @category Test
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @methodhttp GET
 */
exports.testLogin = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.test.login';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * This method doesn't do anything.               
 * @category Test
 * @methodhttp GET
 */
exports.testNull = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.test.null';
	args = args || {};
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the url to a group's page.               
 * @category URLs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} group_id  The NSID of the group to fetch the url for.                       
 * @methodhttp GET
 */
exports.urlsGetGroup = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.urls.getGroup';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'group_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the url to a user's photos.               
 * @category URLs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user to fetch the url for. If omitted, the calling user is assumed.                       
 * @methodhttp GET
 */
exports.urlsGetUserPhotos = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.urls.getUserPhotos';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the url to a user's profile.               
 * @category URLs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {string} [user_id]  The NSID of the user to fetch the url for. If omitted, the calling user is assumed.                       
 * @methodhttp GET
 */
exports.urlsGetUserProfile = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.urls.getUserProfile';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'user_id', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns gallery info, by url.               
 * @category URLs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {anyURI} url  The gallery's URL.                       
 * @methodhttp GET
 */
exports.urlsLookupGallery = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.urls.lookupGallery';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'url', 'null', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a group NSID, given the url to a group's page or photo pool.               
 * @category URLs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {anyURI} url  The url to the group's page or photo pool.                       
 * @methodhttp GET
 */
exports.urlsLookupGroup = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.urls.lookupGroup';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'url', 'null', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns a user NSID, given the url to a user's photos or profile.               
 * @category URLs
 * @param {string} [format]  Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), serial_php (Serialized PHP).                       
 * @param {anyURI} url  The url to the user's profile or photos page.                       
 * @methodhttp GET
 */
exports.urlsLookupUser = function(args, opts) {
	var url = 'http://api.flickr.com/services/rest/?method=flickr.urls.lookupUser';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "rest");
	url = url_replace(url, args, 'url', 'null', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};