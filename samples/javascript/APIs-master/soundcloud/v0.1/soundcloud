/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/soundcloud');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Returns a collection of tracks
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} [q]  undefined
 * @param {string} [tags]  undefined
 * @param {string} [filter]  undefined
 * @param {string} [order]  undefined
 * @param {string} [bpm-from]  undefined
 * @param {string} [bpm-to]  undefined
 * @param {string} [duration-from]  undefined
 * @param {string} [duration-to]  undefined
 * @param {string} [created_at-from]  undefined
 * @param {string} [created_at-to]  undefined
 * @param {string} [ids]  undefined
 * @param {string} [genres]  undefined
 * @param {string} [order]  undefined
 * @methodhttp GET
 */
exports.getTracks = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'tags', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'bpm-from', 'str');
	url = url_replace(url, args, 'bpm-to', 'str');
	url = url_replace(url, args, 'duration-from', 'str');
	url = url_replace(url, args, 'duration-to', 'str');
	url = url_replace(url, args, 'created_at-from', 'str');
	url = url_replace(url, args, 'created_at-to', 'str');
	url = url_replace(url, args, 'ids', 'str');
	url = url_replace(url, args, 'genres', 'str');
	url = url_replace(url, args, 'order', 'str');
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Uploads a track
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} title  undefined
 * @param {string} asset_data  undefined
 * @methodhttp POST
 */
exports.postTracks = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'asset_data', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a track by track id
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp GET
 */
exports.getTrack = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Updates a given track
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} title  undefined
 * @param {string} asset_data  undefined
 * @methodhttp PUT
 */
exports.putTrack = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'asset_data', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Deletes a given track
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp DELETE
 */
exports.deleteTrack = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns comments of a track by track id
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp GET
 */
exports.getTrackComments = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}/comments.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Posts a comments to a track by track id
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp POST
 */
exports.postTrackComments = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}/comments.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns all users with permission for a track by track id
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp GET
 */
exports.getTrackPermissions = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}/permissions.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Updates the list of permitted users for a track by track id
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp PUT
 */
exports.putTrackPermissions = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}/permissions.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns the secret token for a track by track id. This resource can only be used by the track owner.
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp GET
 */
exports['getTrackSecret-token'] = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}/secret-token.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Resets the secret token for a track by track id. The secret token can not be specified but will be randomly chosen on          the server and returned. This resource can only be used by the track owner.       
 * @category Tracks
 * @param {string} [format]  The response format (xml or json)
 * @param {string} track_id  undefined
 * @methodhttp PUT
 */
exports.putTrackSecretToken = function(args, opts) {
	var url = 'https://api.soundcloud.com/tracks/{track_id}/secret-token.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of users
 * @category Users
 * @param {string} [q]  Most endpoints will accept a q param which you can use to specify a keyword to search for in fields like title, username, description, etc. depending on the resource type.       
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUsers = function(args, opts) {
	var url = 'https://api.soundcloud.com/users.{format}';
	args = args || {};
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a user by user id
 * @category Users
 * @param {string} user_id  The user's id       
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUser = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of tracks uploaded by user id
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserTracks = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/tracks.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of comments made by user id
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserComments = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/comments.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of users the user with user id is following
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserFollowings = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/followings.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Checks if the user with the id contact_id is in the givens user's list of contacts.
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} contact_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserFollowing = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/followings/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'contact_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Adds the user with the id contact_id to the givens user's list of contacts.
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} contact_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp PUT
 */
exports.putUserFollowings = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/followings/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'contact_id', 'str', true);
	url = url_replace(url, args, 'format', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Removes the user with the id contact_id from the givens user's list of contacts.
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} contact_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp DELETE
 */
exports.deleteUserFollowings = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/followings/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'contact_id', 'str', true);
	url = url_replace(url, args, 'format', 'str');
	return http.delete({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of users who follow the user with user id
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserFollowers = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/followers.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Checks if the user with contact_id is a follower of the given user.
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} contact_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserFollower = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/followers/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'contact_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of tracks favorited by the user with user id
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserFavorites = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/favorites.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Adds the given track to the given user's list of favorites.
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} track_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp PUT
 */
exports.putUserFavorites = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/favorites/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'track_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http.put({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Deletes the given track from the given user's list of favorites.
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} track_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp DELETE
 */
exports.deleteUserFavorites = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/favorites/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'track_id', 'str', true);
	url = url_replace(url, args, 'format', 'str');
	return http.delete({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of groups joined by user with user id
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserGroups = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/groups.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of playlists created by user with user id
 * @category Users
 * @param {string} user_id  undefined
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getUserPlaylists = function(args, opts) {
	var url = 'https://api.soundcloud.com/users/{user_id}/playlists.{format}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns the logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.me = function(args, opts) {
	var url = 'https://api.soundcloud.com/me.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of tracks uploaded by logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMeTracks = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/tracks.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of comments made by logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMeComments = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/comments.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of users the logged-in user is following
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMeFollowings = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/followings.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Checks if the user with the id contact_id is in the logged-in user's list of contacts.
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} contact_id  undefined
 * @methodhttp GET
 */
exports.getMeFollowing = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/followings/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'contact_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Adds the user with the id contact_id to the logged-in user's list of contacts.
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} contact_id  undefined
 * @methodhttp PUT
 */
exports.putMeFollowings = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/followings/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'contact_id', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Deletes the user with the id contact_id from the logged-in user's list of contacts.
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} contact_id  undefined
 * @methodhttp DELETE
 */
exports.deleteMeFollowings = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/followings/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'contact_id', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of users who follow the logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMeFollowers = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/followers.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Checks if the user with the id contact_id is a follower of the logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} contact_id  undefined
 * @methodhttp GET
 */
exports.getMeFollower = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/followers/{contact_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'contact_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of tracks favorited by the logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMeFavorites = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/favorites.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Adds the given track to the logged-in user's list of favorites.
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} track_id  undefined
 * @methodhttp PUT
 */
exports.putMeFavorites = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/favorites/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Deletes the given track from the logged-in user's list of favorites.
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @param {string} track_id  undefined
 * @methodhttp DELETE
 */
exports.deleteMeFavorites = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/favorites/{track_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'track_id', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of groups joined by logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMeGroups = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/groups.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of playlists created by the logged-in user
 * @category Me
 * @param {string} [format]  The response format (xml or json)       
 * @methodhttp GET
 */
exports.getMePlaylists = function(args, opts) {
	var url = 'https://api.soundcloud.com/me/playlists.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'oauth2'}, opts);
};

/** 
 * Returns a collection of playlists
 * @category Playlists
 * @param {string} [format]  The response format (xml or json)
 * @param {string} [q]  undefined
 * @param {string} [filter]  undefined
 * @param {string} [license]  Filter on license.       
 * @methodhttp GET
 */
exports.getPlaylists = function(args, opts) {
	var url = 'https://api.soundcloud.com/playlists.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'license', 'str');
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a playlist by playlist id
 * @category Playlists
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getPlaylist = function(args, opts) {
	var url = 'https://api.soundcloud.com/playlists/{playlist_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of groups
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @methodhttp GET
 */
exports.getGroups = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a group by group id
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getGroup = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups/{group_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a combined collection of moderators, members and contributors of the group with group id
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getGroupUsers = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups/{group_id}/users.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of moderators of the group with group id
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getGroupModerators = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups/{group_id}/moderators.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of members of the group with group id
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getGroupMembers = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups/{group_id}/members.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of contributors of the group with group id
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getGroupContributors = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups/{group_id}/contributors.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a collection of tracks contributed to the group with group id
 * @category Groups
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getGroupTracks = function(args, opts) {
	var url = 'https://api.soundcloud.com/groups/{group_id}/tracks.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a comment by comment id
 * @category Comments
 * @param {string} [format]  The response format (xml or json)
 * @param {string} playlist_id  undefined
 * @methodhttp GET
 */
exports.getComment = function(args, opts) {
	var url = 'https://api.soundcloud.com/comments/{comment_id}.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'playlist_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Translates a website URI into an API URI
 * @category Resolver
 * @param {string} [format]  The response format (xml or json)
 * @param {string} url  undefined
 * @methodhttp GET
 */
exports.resolve = function(args, opts) {
	var url = 'https://api.soundcloud.com/resolve.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', false, "json");
	url = url_replace(url, args, 'url', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};