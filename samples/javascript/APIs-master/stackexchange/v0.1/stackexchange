/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def !== undefined)
		args[param] = def;
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (type == 'int' && args[param] !== undefined && (parseFloat(args[param]) != parseInt(args[param], 10) || isNaN(args[param])))
		throw new Error(param + ' must be an integer');
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/stackexchange');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Returns all the answers in the system			
 * @category Answers
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :							activity - last_activity_date							creation - creation_date							votes - score							activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.answersList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/answers';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the set of answers with ids in id.			
 * @category Answers
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon				  string. {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for answer_id on answer objects. 			
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :							activity - last_activity_date							creation - creation_date							votes - score							activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.answersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/answers/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the comments on an answer.			
 * @category Answers
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.		      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon		      string. {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for answer_id on answer objects.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :							activity - last_activity_date							creation - creation_date							votes - score							activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.answersCommentsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/answers/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all the badges in the system.					Badge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.					This means that you can get a list of all tag based badges by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.					For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver and min=silver for just silver, and min=bronze for just bronze.					rank is the default sort.					This method returns a list of badges.			
 * @category Badges
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :						  rank - rank of the badge						  name - name of the badge						  type - type of the badge						  rank is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @param {string}  inname   
 * @methodhttp GET
 */
exports.badgesList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/badges';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	url = url_replace(url, args, 'inname', 'str');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the badges identified in id.					Note that badge ids are not constant across sites, and thus should be looked up via the /badges method. A badge id on a single site is, however, guaranteed to be stable.					Badge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.					This means that you can get a list of all tag based badges by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.					For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver and min=silver for just silver, and min=bronze for just bronze.					rank is the default sort.					{id} can contain up to 100 semicolon delimited ids, to find ids programatically look for badge_id on badge objects.					This method returns a list of badges.			
 * @category Badges
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :							rank - rank of the badge							name - name of the badge							rank is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.badgesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/badges/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets all explicitly named badges in the system.					A named badged stands in opposition to a tag-based badge. These are referred to as general badges on the sites themselves.			
 * @category Badges
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :							rank - rank of the badge							name - name of the badge							rank is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.namedBadgesList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/badges/name';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns recently awarded badges in the system.				  As these badges have been awarded, they will have the badge.user property set.			
 * @category Badges
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.recipientsBadgesList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/badges/recipients';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns recently awarded badges in the system, constrained to a certain set of badges.				  As these badges have been awarded, they will have the badge.user property set.				  				  {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for badge_id on badge objects.			
 * @category Badges
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.recipientsBadgesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/badges/{id}/recipients';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the badges that are awarded for participation in specific tags.				  For the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.				  				  rank is the default sort.			
 * @category Badges
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   One of :							rank - rank of the badge							name - name of the badge							rank is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.tagBadgesList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/badges/tags';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets all the comments on the site.					If you're filtering for interesting comments (by score, creation date, etc.) make use of the sort paramter with appropriate min and max values.					If you're looking to query conversations between users, instead use the /users/{id}/mentioned and /users/{id}/comments/{toid} methods.			
 * @category Comments
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation - creation_date						  votes    - score						  creation is the default sort.						 
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.commentsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/comments';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the comments identified in id.					This method is most useful if you have a cache of comment ids obtained through other means (such as /questions/{id}/comments) but suspect the data may be stale.			
 * @category Comments
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation - creation_date						  votes    - score						  creation is the default sort.						 
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.commentsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/comments/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Deletes a comment.					Use an access_token with write_access to delete a comment.					In practice, this method will never return an object.			
 * @category Comments
 * @param {string} [id]  The comment id.
 * @param {boolean}  preview   
 * @methodhttp DELETE
 */
exports.deleteComment = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/comments/{id}/delete';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'preview');
	return http.delete({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Edit an existing comment.					Use an access_token with write_access to edit an existing comment.					This method return the created comment.			
 * @category Comments
 * @param {string} [id]  The comment id.
 * @param {boolean}  preview   
 * @param {string}  body   
 * @methodhttp POST
 */
exports.editComment = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/comments/{id}/edit';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'preview');
	url = url_replace(url, args, 'body', 'str');
	return http.post({url:url, body:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a stream of events that have occurred on the site.					The API considers the following "events":					posting a question					posting an answer					posting a comment					editing a post					creating a user					Events are only accessible for 15 minutes after they occurred, and by default only events in the last 5 minutes are returned. You can specify the age of the oldest event returned by setting the since parameter.					It is advised that developers batch events by ids and make as few subsequent requests to other methods as possible.					This method returns a list of events.			
 * @category Events
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  since   Unix timestamp.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.eventsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/events';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'since', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a collection of statistics about the site.					Data to facilitate per-site customization, discover related sites, and aggregate statistics is all returned by this method.					This data is cached very aggressively, by design. Query sparingly, ideally no more than once an hour.					This method returns an info object.			
 * @category Info
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.siteInfo = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/info';
	args = args || {};
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Fetches all posts (questions and answers) on the site.					In many ways this method is the union of /questions and /answers, returning both sets of data albeit only the common fields.					Most applications should use the question or answer specific methods, but /posts is available for those rare cases where any activity is of intereset. Examples of such queries would be: "all posts on Jan. 1st 2011" or "top 10 posts by score of all time".					It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.					This method returns a list of posts.			
 * @category Posts
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the post object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.postsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/posts';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Fetches a set of posts by ids.					This method is meant for grabbing an object when unsure whether an id identifies a question or an answer. This is most common with user entered data.					{id} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.					It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.					This method returns a list of posts.			
 * @category Posts
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the post object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.postsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/posts/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the comments on the posts identified in id, regardless of the type of the posts.					This method is meant for cases when you are unsure of the type of the post id provided. Generally, this would be due to obtaining the post id directly from a user.			
 * @category Comments
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation – creation_date						  votes – score					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.commentsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/posts/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Create a new comment.					Use an access_token with write_access to create a new comment on a post.					This method return the created comment.			
 * @category Posts
 * @param {string} [id]  Post id.
 * @param {string}  body   Comment body.
 * @param {boolean}  preview   
 * @methodhttp POST
 */
exports.newComment = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/posts/{id}/comments/add';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'body', 'str');
	url = url_replace(url, args, 'preview');
	return http.post({url:url, body:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns edit revisions for the posts identified in ids.					{id} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.					This method returns a list of revisions.			
 * @category Posts
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.postsRevisions = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/posts/{id}/revisions';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns suggsted edits on the posts identified in ids.					creation - creation_date					approval - approval_date					rejection - rejection_date					creation is the default sort.					{id} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.					This method returns a list of suggested-edits.			
 * @category Posts
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {string}  sort   creation – creation_date						  approval – approval_date						  rejection – rejection_date					
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.postsSuggestedEdits = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/posts/{id}/suggested-edits';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the various error codes that can be produced by the API.				  This method is provided for discovery, documentation, and testing purposes, it is not expected many applications will consume it during normal operation.				  For testing purposes, look into the /errors/{id} method which simulates errors given a code.				  This method returns a list of errors.			
 * @category Errors
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.error = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/errors';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * This method allows you to generate an error.				  This method is only intended for use when testing an application or library. Unlike other methods in the API, its contract is not frozen, and new error codes may be added at any time.				  This method results in an error, which will be expressed with a 400 HTTP status code and setting the error* properties on the wrapper object.			
 * @category Errors
 * @param {integer} [id]  id of the error to simulate
 * @methodhttp GET
 */
exports.error = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/errors/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the earnable privileges on a site.					Privileges define abilities a user can earn (via reputation) on any Stack Exchange site.					While fairly stable, over time they do change. New ones are introduced with new features, and the reputation requirements change as a site matures.			
 * @category Privileges
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.privilegesList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/privileges';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets all the questions on the site.				  				  This method allows you make fairly flexible queries across the entire corpus of questions on a site. For example, getting all questions asked in the the week of Jan 1st 2011 with scores of 10 or more is a single query with parameters sort=votes&min=10&fromdate=1293840000&todate=1294444800.				  				  To constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.			
 * @category Questions
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  hot – by the formula ordering the hot tab						  Does not accept min or max						  week – by the formula ordering the week tab						  Does not accept min or max						  month – by the formula ordering the month tab						  Does not accept min or max						  activity is the default sort.					
 * @param {string}  tagged   Semicolon delimited list of tags questions must have.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.questionsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions identified in {id}.					This is most useful for fetching fresh data when maintaining a cache of question ids, or polling for changes.			
 * @category Questions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:					    					    activity – last_activity_date					    creation – creation_date					    votes – score					    activity is the default sort.					 
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.questionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the answers to a set of questions identified in id.					This method is most useful if you have a set of interesting questions, and you wish to obtain all of their answers at once or if you are polling for new or updates answers (in conjunction with sort=activity).			
 * @category Questions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:					    					    activity – last_activity_date					    creation – creation_date					    votes – score					    activity is the default sort.					 
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.questionAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/{id}/answers';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the comments on a question.					If you know that you have an question id and need the comments, use this method. If you know you have a answer id, use /answers/{id}/comments. If you are unsure, use /posts/{id}/comments.			
 * @category Questions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.				This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon				string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  						  creation – creation_date						  votes – score						  creation is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.questionCommentsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets questions which link to those questions identified in {id}.				  This method only considers questions that are linked within a site, and will never return questions from another Stack Exchange site.				  				  A question is considered "linked" when it explicitly includes a hyperlink to another question, there are no other heuristics.				  				  {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.			
 * @category Questions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  rank – a priority sort by site applies, subject to change at any time						  Does not accept min or max						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.linkedQuestionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/{id}/linked';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns questions that the site considers related to those identified in id.					The algorithm for determining if questions are related is not documented, and subject to change at any time. Futhermore, these values are very heavily cached, and may not update immediately after a question has been editted. It is also not guaranteed that a question will be considered related to any number (even non-zero) of questions, and a consumer should be able to handle a variable number of returned questions.			
 * @category Questions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  rank – a priority sort by site applies, subject to change at any time						  Does not accept min or max						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.relatedQuestionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/{id}/related';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns questions that the site considers related to those identified in id.					The algorithm for determining if questions are related is not documented, and subject to change at any time. Futhermore, these values are very heavily cached, and may not update immediately after a question has been editted. It is also not guaranteed that a question will be considered related to any number (even non-zero) of questions, and a consumer should be able to handle a variable number of returned questions.			
 * @category Questions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.questionTimelinesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/{id}/timeline';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all the questions with active bounties in the system.				  				  The sorts accepted by this method operate on the follow fields of the question object:				  				  activity – last_activity_date				  creation – creation_date				  votes – score				  activity is the default sort.				  				  It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.				  This method returns a list of questions.				 			
 * @category Questions
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.						  					
 * @param {string}  tagged   Semicolon delimited list of tags questions must have.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.featuredQuestionsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/featured';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns questions the site considers to be unanswered.				  				  Note that just because a question has an answer, that does not mean it is considered answered. While the rules are subject to change, at this time a question must have at least one upvoted answer to be considered answered.				  				  To constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.				  				  Compare with /questions/no-answers.				  This method corresponds roughly with the unanswered tab.				  				  The sorts accepted by this method operate on the follow fields of the question object:				  				  activity – last_activity_date				  creation – creation_date				  votes – score				  activity is the default sort.				  				  It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.				  This method returns a list of questions.				  			
 * @category Questions
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   How a collection should be sorted. One of desc (default), or asc.
 * @param {string}  tagged   Semicolon delimited list of tags questions must have.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.unansweredQuestionsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/unanswered';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns questions which have received no answers.					Compare with /questions/unanswered which mearly returns questions that the sites consider insufficiently well answered.					This method corresponds roughly with the this site tab.			
 * @category Questions
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   How a collection should be sorted. One of desc (default), or asc.
 * @param {string}  tagged   Semicolon delimited list of tags questions must have.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.questionsWithNoAnswersList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/questions/no-answers';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns edit revisions for the posts identified in id.			
 * @category Revisions
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  
 * @methodhttp GET
 */
exports.revisionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/revisions/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Searches a site for any questions which fit the given criteria.					This method is intentionally quite limited. For more general searching, you should use a proper internet search engine restricted to the domain of the site in question.					At least one of tagged or intitle must be set on this method. nottagged is only used if tagged is also set, for performance reasons.			
 * @category Search
 * @param {string}  nottagged   List of tags delimited by semi-colons that must not be on a question.							This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  tagged   List of tags delimited by semi-colons of which at least one must be on a question.							This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  intitle   A string that must appear verbatim in the title of a question.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   he sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  relevance – matches the relevance tab on the site itself						  Does not accept min or max						  activity is the default sort.					
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.search = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/search';
	args = args || {};
	url = url_replace(url, args, 'nottagged', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'intitle', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Searches a site for any questions which fit the given criteria.				  				  Search criteria are expressed using the following parameters:				  			
 * @category Search
 * @param {string}  nottagged   List of tags delimited by semi-colons that must not be on a question.				      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  tagged   List of tags delimited by semi-colons of which at least one must be on a question.				      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  title   text which must appear in returned questions' titles.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   he sorts accepted by this method operate on the follow fields of the question object:				      				      activity – last_activity_date				      creation – creation_date				      votes – score				      relevance – matches the relevance tab on the site itself				      Does not accept min or max				      activity is the default sort.				   
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @param {string}  q   a free form text parameter, will match all question properties based on an undocumented algorithm.
 * @param {boolean}  accepted   true to return only questions with accepted answers, false to return only those without. Omit to elide constraint.
 * @param {integer}  answers   the minimum number of answers returned questions must have.
 * @param {string}  body   text which must appear in returned questions' bodies.
 * @param {boolean}  closed   true to return only closed questions, false to return only open ones. Omit to elide constraint.
 * @param {boolean}  migrated   true to return only questions migrated away from a site, false to return only those not. Omit to elide constraint.
 * @param {boolean}  notice   true to return only questions with post notices, false to return only those without. Omit to elide constraint.
 * @param {integrer}  user   the id of the user who must own the questions returned.
 * @param {string}  url   a url which must be contained in a post, may include a wildcard.
 * @param {integrer}  views   the minimum number of views returned questions must have.
 * @param {boolean}  wiki   true to return only community wiki questions, false to return only non-community wiki ones. Omit to elide constraint
 * @methodhttp GET
 */
exports.advancedSearch = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/search/advanced';
	args = args || {};
	url = url_replace(url, args, 'nottagged', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'accepted');
	url = url_replace(url, args, 'answers', 'int');
	url = url_replace(url, args, 'body', 'str');
	url = url_replace(url, args, 'closed');
	url = url_replace(url, args, 'migrated');
	url = url_replace(url, args, 'notice');
	url = url_replace(url, args, 'user');
	url = url_replace(url, args, 'url', 'str');
	url = url_replace(url, args, 'views');
	url = url_replace(url, args, 'wiki');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns questions which are similar to a hypothetical one based solely on a title.					This method is roughly equivalent to a site's related questions suggestion on the ask page.					This method is useful for correlating data outside of a Stack Exchange site with similar content within one.			
 * @category Search
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  nottagged   List of tags delimited by semi-colons that must not be on a question.				      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  tagged   List of tags delimited by semi-colons of which at least one must be on a question.				      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string} [title]  text which must appear in returned questions' titles.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   he sorts accepted by this method operate on the follow fields of the question object:				      				      activity – last_activity_date				      creation – creation_date				      votes – score				      relevance – matches the relevance tab on the site itself				      Does not accept min or max				      activity is the default sort.				   
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.similar = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/similar';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'nottagged', 'str');
	url = url_replace(url, args, 'tagged', 'str');
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all the suggested edits in the systems.				  This method returns a list of suggested-edits.			
 * @category Suggested Edit
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the suggested_edit object:				      creation – creation_date				      approval – approval_date				      Does not return unapproved suggested_edits				      rejection – rejection_date				      Does not return unrejected suggested_edits				      creation is the default sort.				   
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.suggestedEdit = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/suggested-edits';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all the suggested edits in the systems.				  This method returns a list of suggested-edits.			
 * @category Suggested Edit
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the suggested_edit object:				      creation – creation_date				      approval – approval_date				      Does not return unapproved suggested_edits				      rejection – rejection_date				      Does not return unrejected suggested_edits				      creation is the default sort.				   
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.suggestedEditGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/suggested-edits/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the tags found on a site.			
 * @category Tags
 * @param {string}  filter   Required text in returned tags.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag object:						  popular – count						  activity – the creation_date of the last question asked with the tag						  name – name						  popular is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both "download" and "owner" amongst others. 					 
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags';
	args = args || {};
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns tag objects representing the tags in {tags} found on the site.			
 * @category Tags
 * @param {string} [tags]  The tags for which to return info.		      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  filter   Required text in returned tags.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag object:						  popular – count						  activity – the creation_date of the last question asked with the tag						  name – name						  popular is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both "download" and "owner" amongst others. 					 
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagInfoGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tags}/info';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the tags found on a site that only moderators can use.			
 * @category Tags
 * @param {string}  filter   Required text in returned tags.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag object:						  popular – count						  activity – the creation_date of the last question asked with the tag						  name – name						  popular is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both "download" and "owner" amongst others. 					 
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagModeratorOnlyList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/moderator-only';
	args = args || {};
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the tags found on a site that fulfill required tag constraints on questions.			
 * @category Tags
 * @param {string}  filter   Required text in returned tags.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag object:						  popular – count						  activity – the creation_date of the last question asked with the tag						  name – name						  popular is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both "download" and "owner" amongst others. 					 
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagRequiredList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/required';
	args = args || {};
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all tag synonyms found a site.					When searching for synonyms of specific tags, it is better to use /tags/{tags}/synonyms over this method.			
 * @category Tags
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag_synonym object:						  creation – creation_date						  applied – applied_count						  activity – last_applied_date						  creation is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagSynonymsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/synonyms';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the frequently asked questions for the given set of tags in {tags}.			
 * @category Tags
 * @param {string} [tags]  For a question to be returned, it must have all the tags in {tags} and be considered "frequently asked". The exact algorithm for determining whether a question is considered a FAQ is subject to change at any time.			    			    {tags} can contain up to 5 individual tags per request.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagFaqGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tags}/faq';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the tags that are most related to those in {tags}.				  				  Including multiple tags in {tags} is equivalent to asking for "tags related to tag #1 and tag #2" not "tags related to tag #1 or tag #2".				  				  count on tag objects returned is the number of question with that tag that also share all those in {tags}.				  				  {tags} can contain up to 4 individual tags per request.				  				  This method returns a list of tags.			
 * @category Tags
 * @param {string} [tags]  The tags for which to return related.			    This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagRelatedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tags}/related';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets all the synonyms that point to the tags identified in tags.			
 * @category Tags
 * @param {string} [tags]  The tags for which to return synonyms.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag_synonym object:						  						  creation – creation_date						  applied – applied_count						  activity – last_applied_date						  creation is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagSynonymsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tags}/synonyms';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the community editted tag wikis associated with a set of tags.					Unlike privilege wikis, tag wikis carry an optional excerpt. Additionally, they are subject to much more frequent change.			
 * @category Tags
 * @param {string} [tags]  The tags for which to return synonyms.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.tagWikisGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tags}/wikis';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the top 30 answerers active in a single tag, of either all-time or the last 30 days.				  				  This is a view onto the data presented on the tag info page on the sites.			
 * @category Tags
 * @param {string} [period]  One of all-time or month.
 * @param {string} [tag]  The tag in question.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.topAnswerersInTagGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tag}/top-answerers/{period}';
	args = args || {};
	url = url_replace(url, args, 'period', 'str', true);
	url = url_replace(url, args, 'tag', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the top 30 question askers active in a single tag, of either all-time or the last 30 days.					This is a view onto the data presented on the tag info page on the sites.			
 * @category Tags
 * @param {string} [period]  One of all-time or month.
 * @param {string} [tag]  The tag in question.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.topAskersInTagGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/tags/{tag}/top-askers/{period}';
	args = args || {};
	url = url_replace(url, args, 'period', 'str', true);
	url = url_replace(url, args, 'tag', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all users on a site.					Sorting and min/max ranges allow for interesting queries against users. For instance, you can find how many users have between 1,000 and 2,000 reputation with the parameters sort=reputation min=1000 max=2000 pagesize=0.			
 * @category Users
 * @param {string}  filter   Required text in returned tags.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the user object:						  						  reputation – reputation						  creation – creation_date						  name – display_name						  modified – last_modified_date						  reputation is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string}  inname   The inname parameter lets consumers filter the results down to just those users with a certain substring in their display name. For example, inname=kevin will return all users with both users named simply "Kevin" or those with Kevin as one of (or part of) their names; such as "Kevin Montrose".
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.usersList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users';
	args = args || {};
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'inname', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Gets the users identified in id.					Typically this method will be called to fetch user profiles when you have obtained user ids from some other source, such as /questions.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the user object:					    					    reputation – reputation					    creation – creation_date					    name – display_name					    modified – last_modified_date					    reputation is the default sort.					 
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.usersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the user associated with the passed access_token.		      		      This method returns a user.		   
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the user object:					    					    reputation – reputation					    creation – creation_date					    name – display_name					    modified – last_modified_date					    reputation is the default sort.					 
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns the answers the users in id have posted.					This method is useful for finding sets of answers meeting certain criteria. For instance, to get a user's top voted answer simply use the parameters sort=votes pagesize=1.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/answers';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the answers owned by the user associated with the given access_token.				  This method returns a list of answers.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/answers';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Get the badges the users in id have earned.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.					    					    rank is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userBadgesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/badges';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the badges earned by the user associated with the given access_token.				  				  This method returns a list of badges.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.					    					    rank is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meBadgesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/badges';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Get the comments posted by users in id.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:					    					    creation – creation_date					    votes – score					    creation is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userCommentsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/comments';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the comments owned by the user associated with the given access_token.				  				  This method returns a list of comments.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:					    					    creation – creation_date					    votes – score					    creation is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meCommentsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/comments';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Get the comments that the users in id have posted in reply to the single user identified in toid.					This method is useful for extracting conversations, especially over time or across multiple posts.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer} [toid]  id of the user referred to.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation – creation_date						  votes – score						  creation is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userCommentsToUserGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/comments/{toid}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'toid', 'int', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the comments owned by the user associated with the given access_token that are in reply to the user identified by {toId}.				  				  This method returns a list of comments.				  			
 * @category Users
 * @param {integer} [toid]  id of the user referred to.
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation – creation_date						  votes – score						  creation is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meCommentsToUserGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/comments/{toid}';
	args = args || {};
	url = url_replace(url, args, 'toid', 'int', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Get the questions that users in id have favorited.					This method is effectively a view onto a user's favorites tab.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  added – when the user favorited the question						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userFavoritesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/favorites';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions favorites by the user associated with the given access_token.				  				  This method returns a list of questions.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  added – when the user favorited the question						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meFavoritesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/favorites';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets all the comments that the users in id were mentioned in.					Note, to count as a mention the comment must be considered to be "in reply to" a user. Most importantly, this means that a comment can only be in reply to a single user.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation – creation_date						  votes – score					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userMentionedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/mentioned';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the comments mentioning the user associated with the given access_token.				  				  This method returns a list of comments.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the comment object:						  creation – creation_date						  votes – score					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meMentionedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/mentioned';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a record of merges that have occurred involving the passed account ids.				  				  This method allows you to take now invalid account ids and find what account they've become, or take currently valid account ids and find which ids were equivalent in the past.				  				  This is most useful when confirming that an account_id is in fact "new" to an application.				  				  Account merges can happen for a wide range of reasons, applications should not make assumptions that merges have particular causes.				  Note that accounts are managed at a network level, users on a site may be merged due to an account level merge but there is no guarantee that a merge has an effect on any particular site.				  				  This method returns a list of account_merge.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.userMergesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/merges';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns a record of merges that have occurred involving a user identified by an access_token.				  				  This method allows you to take now invalid account ids and find what account they've become, or take currently valid account ids and find which ids were equivalent in the past.				  				  This is most useful when confirming that an account_id is in fact "new" to an application.				  Account merges can happen for a wide range of reasons, applications should not make assumptions that merges have particular causes.				  				  Note that accounts are managed at a network level, users on a site may be merged due to an account level merge but there is no guarantee that a merge has an effect on any particular site.				  				  This method returns a list of account_merge.				  			
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meMergesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/merges';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a user's notifications.				 This method requires an access_token, with a scope containing "read_inbox".				 				 This method returns a list of notifications.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userNotificationsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/notifications';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns a user's notifications, given an access_token.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of notifications.		      		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meNotificationsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/notifications';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a user's unread notifications.				  				  This method requires an access_token, with a scope containing "read_inbox".				  				  This method returns a list of notifications.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userNotificationsUnreadGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/notifications/unread';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns a user's unread notifications, given an access_token.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of notifications.		      		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meNotificationsUnreadGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/notifications/unread';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns the privileges a user has.				  				  Applications are encouraged to calculate privileges themselves, without repeated queries to this method. A simple check against the results returned by /privileges and user.user_type would be sufficient.				  				  {id} can contain only a single, to find it programatically look for user_id on user or shallow_user objects.				  				  This method returns a list of privileges.				  			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userPrivilegesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/privileges';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the privileges the user identified by access_token has.		      		      This method returns a list of privileges.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.mePrivilegesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/privileges';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets the questions asked by the users in id.					Sorting user questions can be very useful. For instance, to get a user's most recently asked question you can use the parameters sort=creation pagesize=1.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userQuestionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/questions';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions owned by the user associated with the given access_token.				  				  This method returns a list of questions.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meQuestionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/questions';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets the questions on which the users in {id} have active bounties.				  				  {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.				 
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userQuestionsFeaturedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/questions/featured';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions that have active bounties offered by the user associated with the given access_token.				This method returns a list of questions.
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meQuestionsFeaturedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/questions/featured';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets the questions asked by the users in id which have no answers.					Questions returns by this method actually have zero undeleted answers. It is completely disjoint /users/{id}/questions/unanswered and /users/{id}/questions/unaccepted, which only return questions with at least one answer, subject to other contraints.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userQuestionsNoAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/questions/no-answers';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions owned by the user associated with the given access_token that have no answers.				  				  This method returns a list of questions.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meQuestionsNoAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/questions/no-answers';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets the questions asked by the users in id which have at least one answer, but no accepted answer.					Questions returned by this method have answers, but the owner has not opted to accept any of them.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userQuestionsUnacceptedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/questions/unaccepted';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions owned by the user associated with the given access_token that have no accepted answer.				  				  This method returns a list of questions.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meQuestionsUnacceptedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/questions/unaccepted';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets the questions asked by the users in id which the site consideres unanswered, while still having at least one answer posted.					These rules are subject to change, but currently any question without at least one upvoted or accepted answer is considered unanswered.					To get the set of questions that a user probably considers unanswered, the returned questions should be unioned with those returned by /users/{id}/questions/no-answers. These methods are distinct so that truly unanswered (that is, zero posted answers) questions can be easily separated from mearly poorly or inadequately answered ones.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userQuestionsUnansweredGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/questions/unanswered';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the questions owned by the user associated with the given access_token that are not considered answered.				  This method returns a list of questions.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the question object:						  						  activity – last_activity_date						  creation – creation_date						  votes – score						  activity is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meQuestionsUnansweredGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/questions/unanswered';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets a subset of the reputation changes for users in id.					Reputation changes are intentionally scrubbed of some data to make it difficult to correlate votes on particular posts with user reputation changes. That being said, this method returns enough data for reasonable display of reputation trends.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userReputationGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/reputation';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the reputation changed for the user associated with the given access_token.				  This method returns a list of reputation changes.			
 * @category Users
 * @methodhttp GET
 */
exports.meReputationGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/reputation';
	args = args || {};
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns users' public reputation history.				  				  This method returns a list of reputation_history.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userReputationHistoryGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/reputation-history';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns user's public reputation history.				  				  This method returns a list of reputation_history.			
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meReputationHistoryGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/reputation-history';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a user's full reputation history, including private events.				  				  This method requires an access_token, with a scope containing "private_info".				  				  This method returns a list of reputation_history.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userFullReputationHistoryGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/reputation-history/full';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns user's full reputation history, including private events.		      		      This method returns a list of reputation_history.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meFullReputationHistoryGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/reputation-history/full';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns the suggested edits a users in {id} have submitted.				  {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the suggested_edit object:						  creation – creation_date						  approval – approval_date						  Does not return unapproved suggested_edits						  rejection – rejection_date						  Does not return unrejected suggested_edits						  creation is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userSuggestedEditGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/suggested-edits';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the suggested edits the user identified by access_token has submitted.				  				  This method returns a list of suggested-edits.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the suggested_edit object:						  creation – creation_date						  approval – approval_date						  Does not return unapproved suggested_edits						  rejection – rejection_date						  Does not return unrejected suggested_edits						  creation is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meSuggestedEditGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/suggested-edits';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns the tags the users identified in id have been active in.					This route corresponds roughly to user's stats tab, but does not include tag scores. A subset of tag scores are available (on a single user basis) in /users/{id}/top-answer-tags and /users/{id}/top-question-tags.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag object:						  						  popular – count						  activity – the creation_date of the last question asked with the tag						  name – name						  popular is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userTagsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/tags';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the tags the user identified by the access_token passed is active in.				  				  This method returns a list of tags.			
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the tag object:						  						  popular – count						  activity – the creation_date of the last question asked with the tag						  name – name						  popular is the default sort.					
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meTagsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/tags';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns the top 30 answers a user has posted in response to questions with the given tags.			    			    {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.			 
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {string} [tags]  a semi-colon delimitted list of tags the questions the answers are on must have.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:				      				      activity – last_activity_date				      creation – creation_date				      votes – score				      activity is the default sort.				   
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userTopTaggedAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/tags/{tags}/top-answers';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the top 30 answers the user associated with the given access_token has posted in response to questions with the given tags.			    			    This method returns a list of answers.			 
 * @category Users
 * @param {string} [tags]  a semi-colon delimitted list of tags the questions the answers are on must have.			    This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:				      				      activity – last_activity_date				      creation – creation_date				      votes – score				      activity is the default sort.				   
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meTopTaggedAnswersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/tags/{tags}/top-answers';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns the top 30 questions a user has asked with the given tags.		   
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {string} [tags]  a semi-colon delimitted list of tags the questions the answers are on must have.		      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:			  			  activity – last_activity_date			  creation – creation_date			  votes – score			  activity is the default sort.		
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userTopTaggedQuestionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/tags/{tags}/top-questions';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the top 30 questions the user associated with the given access_token has posted in response to questions with the given tags.		      		      This method returns a list of questions.		   
 * @category Users
 * @param {string} [tags]  a semi-colon delimitted list of tags the questions the answers are on must have.		      This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the answer object:			  			  activity – last_activity_date			  creation – creation_date			  votes – score			  activity is the default sort.		
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meTopTaggedQuestionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/tags/{tags}/top-questions';
	args = args || {};
	url = url_replace(url, args, 'tags', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a subset of the actions the users in id have taken on the site.					This method returns users' posts, edits, and earned badges in the order they were accomplished. It is possible to filter to just a window of activity using the fromdate and todate parameters.			
 * @category Users
 * @param {string} [id]  A single primary key identifier or a vectorized, semicolon-delimited list of identifiers.					This is a vectorized parameter, multiple ids can be sent a single request if delimited with a semi-colon					string
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userTimelinesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/timeline';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns a subset of the actions the user identified by the passed access_token has taken on the site.		      		      This method returns a list of user timeline objects.		   
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meTimelinesGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/timeline';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a single user's top tags by answer score.		      This a subset of the data returned on a user's stats tab.		      		      {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.		      		      This method returns a list of top_tag objects.		   
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userTopAnswerTagsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/top-answer-tags';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the user identified by access_token's top 30 tags by answer score.		      		      This method returns a list of top tag objects.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meTopAnswerTagsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/top-answer-tags';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns a single user's top tags by question score.		      This a subset of the data returned on a user's stats tab.		      		      {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.		      		      This method returns a list of top_tag objects.		   
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userTopQuestionTagsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/top-question-tags';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the user identified by access_token's top 30 tags by question score.		      		      This method returns a list of top tag objects.		      		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meTopQuestionTagsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/top-question-tags';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Returns the write permissions a user has via the api.		      		      The Stack Exchange API gives users the ability to create, edit, and delete certain types. This method returns whether the passed user is capable of performing those actions at all, as well as how many times a day they can.		      		      This method does not consider the user's current quota (ie. if they've already exhausted it for today) nor any additional restrictions on write access, such as editing deleted comments.		      		      This method returns a list of write_permissions.		   
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userWritePermissionGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/write-permissions';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the write permissions a user has via the api, given an access token.		      The Stack Exchange API gives users the ability to create, edit, and delete certain types. This method returns whether the passed user is capable of performing those actions at all, as well as how many times a day they can.		      		      This method does not consider the user's current quota (ie. if they've already exhausted it for today) nor any additional restrictions on write access, such as editing deleted comments.		      		      This method returns a list of write_permissions.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meWritePermissionsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/write-permissions';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};

/** 
 * Gets those users on a site who can exercise moderation powers.		      		      Note, employees of Stack Overflow will be returned if they have been granted moderation powers on a site even if they have never been appointed or elected explicitly. This method checks abilities, not the manner in which they were obtained.		   
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the user object:			  			  reputation – reputation			  creation – creation_date						  name – display_name			  modified – last_modified_date			  reputation is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.moderatorsGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/moderators';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns those users on a site who both have moderator powers, and were actually elected.		      This method excludes Stack Exchange Inc. employees, unless they were actually elected moderators on a site (which can only have happened prior to their employment).		   
 * @category Users
 * @param {string}  fromdate   Unix timestamp of the minimum creation date on a returned item.
 * @param {string}  max   Maximum of the range to include in the response according to the current sort.
 * @param {string}  min   Minimum of the range to include in the response according to the current sort.
 * @param {string}  order   How the current sort should be ordered. One of desc (default), or asc.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  sort   The sorts accepted by this method operate on the follow fields of the user object:			  			  reputation – reputation			  creation – creation_date			  name – display_name			  modified – last_modified_date			  reputation is the default sort.
 * @param {string}  todate   Unix timestamp of the maximum creation date on a returned item.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.moderatorsElectedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/moderators/elected';
	args = args || {};
	url = url_replace(url, args, 'fromdate', 'str');
	url = url_replace(url, args, 'max', 'str');
	url = url_replace(url, args, 'min', 'str');
	url = url_replace(url, args, 'order', 'str');
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'sort', 'str');
	url = url_replace(url, args, 'todate', 'str');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns a user's inbox.		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method is effectively an alias for /inbox. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole.		      		      {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.		      		      This method returns a list of inbox items.		   
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.userInboxGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/inbox';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns the user identified by access_token's inbox.		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of inbox items.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @methodhttp GET
 */
exports.meInboxGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/inbox';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns the unread items in a user's inbox.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method is effectively an alias for /inbox/unread. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole.		      		      {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.		      		      This method returns a list of inbox items.		   
 * @category Users
 * @param {integer} [id]  the id of a user
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @param {string}  since   Unix timestamp of since date on a returned item.
 * @methodhttp GET
 */
exports.userInboxUnreadGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/inbox/unread';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	url = url_replace(url, args, 'since', 'str');
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns the unread items in the user identified by access_token's inbox.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of inbox items.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string} [site=stackoverflow]  To specified on which site you want to search. stackoverflow (default)
 * @param {string}  since   Unix timestamp of since date on a returned item.
 * @methodhttp GET
 */
exports.meInboxUnreadGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/inbox/unread';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'site', 'str', true, "stackoverflow");
	url = url_replace(url, args, 'since', 'str');
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Immediately expires the access tokens passed. This method is meant to allow an application to discard any active access tokens it no longer needs.		   
 * @category Access Tokens
 * @param {string} [accessTokens]  {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.accessTokensInvalidateGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/access-tokens/{accessTokens}/invalidate';
	args = args || {};
	url = url_replace(url, args, 'accessTokens', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Reads the properties for a set of access tokens.		   
 * @category Access Tokens
 * @param {string} [accessTokens]  {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.accessTokensGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/access-tokens/{accessTokens}';
	args = args || {};
	url = url_replace(url, args, 'accessTokens', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Passing valid access_tokens to this method causes the application that created them to be de-authorized by the user associated with each access_token. This will remove the application from their apps tab, and cause all other existing access_tokens to be destroyed.		      		      This method is meant for uninstalling applications, recovering from access_token leaks, or simply as a stronger form of /access-tokens/{accessTokens}/invalidate.		      		      Nothing prevents a user from re-authenticate to an application that has de-authenticated itself, the user will be prompted to approve the application again however.		   
 * @category Apps
 * @param {string} [accessTokens]  {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.appsDeAuthenticateGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/apps/{accessTokens}/de-authenticate';
	args = args || {};
	url = url_replace(url, args, 'accessTokens', 'str', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Creates a new filter given a list of includes, excludes, a base filter, and whether or not this filter should be "unsafe".		      		      Filter "safety" is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.		      		      If no base filter is specified, the default filter is assumed. When building a filter from scratch, the none built-in filter is useful.		      		      When the size of the parameters being sent to this method grows to large, problems can occur. This method will accept POST requests to mitigate this.		      It is not expected that many applications will call this method at runtime, filters should be pre-calculated and "baked in" in the common cases. Furthermore, there are a number of built-in filters which cover common use cases.		      		      This method returns a single filter.		   
 * @category Filters
 * @param {string}  include   
 * @param {string}  base   
 * @param {string}  exclude   
 * @param {boolean}  unsafe   
 * @methodhttp GET
 */
exports.filtersCreate = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/filters/create';
	args = args || {};
	url = url_replace(url, args, 'include', 'str');
	url = url_replace(url, args, 'base', 'str');
	url = url_replace(url, args, 'exclude', 'str');
	url = url_replace(url, args, 'unsafe');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns the fields included by the given filters, and the "safeness" of those filters.		      		      It is not expected that this method will be consumed by many applications at runtime, it is provided to aid in debugging.		   
 * @category Filters
 * @param {string} [filters]  {filters} can contain up to 20 semicolon delimited filters. Filters are obtained via calls to /filters/create, or by using a built-in filter.
 * @methodhttp GET
 */
exports.filtersGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/filters/{filters}';
	args = args || {};
	url = url_replace(url, args, 'filters', 'str', true);
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns a user's inbox.		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of inbox items.		   
 * @category Inbox
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.inboxList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/inbox';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns the unread items in a user's inbox.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of inbox items.		   
 * @category Inbox
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @param {string}  since   Unix timestamp of since date on a returned item.
 * @methodhttp GET
 */
exports.inboxUnreadList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/inbox/unread';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	url = url_replace(url, args, 'since', 'str');
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns a user's notifications.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of notifications.		    		   
 * @category Notifications
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.notificationsList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/notifications';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns a user's unread notifications.		      		      This method requires an access_token, with a scope containing "read_inbox".		      		      This method returns a list of notifications.		      		   
 * @category Notifications
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.notificationsUnreadList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/notifications/unread';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Returns all sites in the network.		      		      This method allows for discovery of new sites, and changes to existing ones. Be aware that unlike normal API methods, this method should be fetched very infrequently, it is very unusual for these values to change more than once on any given day. It is suggested that you cache its return for at least one day, unless your app encounters evidence that it has changed (such as from the /info method).		      		      The pagesize parameter for this method is unbounded, in acknowledgement that for many applications repeatedly fetching from /sites would complicate start-up tasks needlessly.		      		      This method returns a list of sites.		   
 * @category Sites
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.sitesList = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/sites';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all of a user's associated accounts, given their account_ids in {id}.		      		      {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for account_id on user objects.		      		      This method returns a list of network_users.		   
 * @category Users
 * @param {integer} [id]  {id} can contain up to 100 semicolon delimited ids, to find ids programatically look for account_id on user objects.
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.userAssociatedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/users/{id}/associated';
	args = args || {};
	url = url_replace(url, args, 'id', 'int', true);
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'none', provider:provider}, opts);
};

/** 
 * Returns all of a user's associated accounts, given an access_token for them.		      		      This method returns a list of network users.		   
 * @category Users
 * @param {integer}  page   The pagination offset for the current collection. Affected by the specified pagesize.
 * @param {integer}  pagesize   The number of collection results to display during pagination. Should be between 0 and 100 inclusive.
 * @methodhttp GET
 */
exports.meAssociatedGet = function(args, opts) {
	var url = 'https://api.stackexchange.com/2.1/me/associated';
	args = args || {};
	url = url_replace(url, args, 'page', 'int');
	url = url_replace(url, args, 'pagesize', 'int');
	return http({url:url, params:args, auth:'oauth2', provider:provider}, opts);
};