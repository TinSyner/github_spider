/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

args = args || {};
jsClientApi({
	name: "google.maps",
	data: {
		width: args.width || '100%',
		height: args.height || '300px',
		markers: []
	},
	initialize: js(function(callback, callback_name) {
		//load the js from google maps
		$('body').append('<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&callback=' + callback_name + '""></script>')
	}),
	loaded: js(function() {

	}),
	create: js(function(jsapi) {
		var elem = document.getElementById('map-' + this.data.pid);
        var options = {
            center: new google.maps.LatLng(37.7699298, -122.4469157),
            zoom: 2,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        this.map = new google.maps.Map(elem, options);
        var self = this;
		setTimeout(function() {self.ready(jsapi)}, 400);
		return false;
	}),
	ready: js(function(jsapi) {
		jsapi.ready();
	}),
	interface: {
		on: js(function(ev,cb) {
			google.maps.event.addListener(this.map, ev, cb)
		}),
		center: js(function(opts) {
			var self = this;
            var geocoder = new google.maps.Geocoder();
            if (typeof opts == 'string')
				opts = {address:opts}
			if (opts.lat !== undefined && opts.lng !== undefined)
				opts.address = {lat:opts.lat, lng:opts.lng}
            if (typeof opts.address == 'object' && opts.address.lat && opts.address.lng)
				opts.address = opts.address.lat + ',' + opts.address.lng
            geocoder.geocode(
            	{ 'address': opts.address },
            	function(results, status) {
	                if (status == google.maps.GeocoderStatus.OK)
						self.map.setCenter(results[0].geometry.location);
	                else
	                	alert("Geocode was not successful for the following reason: " + status);
            	}
            );
		}),
		zoom: js(function(level) {
			this.map.setZoom(parseInt(level));
		}),
		streetview: js(function(opts) {
			if (!opts)
			{
				var panorama = this.map.getStreetView();
				panorama.setPosition(this.map.getCenter());
				panorama.setVisible(true);
				return;
			}
		    var self = this;
		    var geocoder = new google.maps.Geocoder();
		    if (typeof opts == 'string')
				opts = {address:opts}
			if (opts.lat !== undefined && opts.lng !== undefined)
				opts.address = {lat:opts.lat, lng:opts.lng}
            if (typeof opts.address == 'object' && opts.address.lat && opts.address.lng)
				opts.address = opts.address.lat + ',' + opts.address.lng
		    geocoder.geocode(
            	{ 'address': opts.address },
            	function(results, status) {
	                if (status == google.maps.GeocoderStatus.OK)
			    	{
						var panorama = self.map.getStreetView();
						panorama.setPosition(results[0].geometry.location);
						panorama.setVisible(true);
			    	}
	                else
	               		alert("Geocode was not successful for the following reason: " + status);
            	}
		    );
		}),
		addMarker: js(function(opts) {
			var self = this;
			var geocoder = new google.maps.Geocoder();
			if (typeof opts == 'string')
				opts = {address:opts}
			if (opts.latitude !== undefined && opts.longitude !== undefined)
				opts = {lat:opts.latitude, lng:opts.longitude}
			if (typeof opts.address == 'object' && opts.address.latitude !== undefined && opts.address.longitude !== undefined)
				opts = {lat:opts.address.latitude, lng:opts.address.longitude}
			if (opts.lat !== undefined && opts.lng !== undefined)
				opts.address = {lat:opts.lat, lng:opts.lng}

			var disp = function(results, status) {
				console.log (results, status)
				if (status == google.maps.GeocoderStatus.OK) {
					var marker_options = {
						map: self.map,
						position: results[0].geometry.location,
						title: opts.title,
						icon: opts.icon
					};
					var marker = new google.maps.Marker(marker_options);
					self.data.markers.push(marker);
				}
			}

			if (typeof opts.address == 'object' && opts.address.lat !== undefined && opts.address.lng !== undefined)
				disp([{geometry:{location:new google.maps.LatLng(opts.address.lat,opts.address.lng)}}], google.maps.GeocoderStatus.OK)
			else
				geocoder.geocode({ 'address': opts.address }, disp);
		}),
		clearMarkers: js(function() {
		 	for(var i = 0; i < this.data.markers.length; i++) {
   		    	this.data.markers[i].setMap(null);
		    }
     		this.data.markers = [];
		}),
		directions: js(function(opts) {
			if (!opts.origin || !opts.destination)
				return;

			var rendererOptions = {};
			var travelMode = google.maps.TravelMode.DRIVING;

			if (opts.draggable)
				rendererOptions.draggable = opts.draggable;

			var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
			var directionsService = new google.maps.DirectionsService();

			if (opts.travelMode)
				switch (opts.travelMode)
				{
					case 'driving':
						travelMode = google.maps.TravelMode.DRIVING;
						break;
					case 'bicycling':
						travelMode = google.maps.TravelMode.BICYCLING;
						break;
					case 'transit':
						travelMode = google.maps.TravelMode.TRANSIT;
						break;
					case 'walking':
						travelMode = google.maps.TravelMode.WALKING;
						break;
				}

			directionsDisplay.setMap(this.map);
			  var request = {
    			origin : opts.origin,
    			destination : opts.destination,
    			travelMode : travelMode
  			};
  			directionsService.route(request, function(result, status) {
   				if (status == google.maps.DirectionsStatus.OK)
      				directionsDisplay.setDirections(result);
  			});
		})
	}
}, {
	view: '<style>.gmapsapi img { max-width: none !important; }</style><div id="map-<%= data.pid %>" class="gmapsapi" style="width: <%= data.width %>; height: <%= data.height %>;"></div>'
})