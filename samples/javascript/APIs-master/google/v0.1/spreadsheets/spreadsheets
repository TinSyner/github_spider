/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def !== undefined)
		args[param] = def;
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/google');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Retrieves the list of spreadsheets for the authenticated user.			
 * @category Spreadsheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  author   Entry author. The service returns entries where the author name and/or email address match your query string.
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved.
 * @param {string}  updated-min   Bounds on the entry update date. Use the RFC 3339 timestamp format. For example: 2005-08-09T10:57:00-08:00. The lower bound is inclusive, whereas the upper bound is exclusive. In some cases (such as when using v2.1 or newer of the Calendar Data API), specifying an updated-min that is too far in the past will cause an HTTP 410 (Gone) status to be returned.
 * @param {string}  updated-max   Bounds on the entry update date. Use the RFC 3339 timestamp format. For example: 2005-08-09T10:57:00-08:00. The lower bound is inclusive, whereas the upper bound is exclusive. In some cases (such as when using v2.1 or newer of the Calendar Data API), specifying an updated-min that is too far in the past will cause an HTTP 410 (Gone) status to be returned.
 * @param {string}  title   Specifies the search terms for the title of a document. This parameter used without title-exact will only submit partial queries, not exact queries.
 * @param {boolean}  title-exact   Specifies whether the title query should be taken as an exact string. Meaningless without title. Possible values are true and false. Note: Matches are case-insensitive.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getSpreadsheets = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/spreadsheets/{visibility}/{projection}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'author', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'updated-min', 'str');
	url = url_replace(url, args, 'updated-max', 'str');
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'title-exact');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Retrieves the only the entry for the spreadsheet associated with the provided key.			
 * @category Spreadsheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getSpreadsheet = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/spreadsheets/{visibility}/{projection}/{key}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * List all the worksheets within the spreadsheet identified by the specified key.			
 * @category Worksheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved.
 * @param {string}  title   Specifies the search terms for the title of a document. This parameter used without title-exact will only submit partial queries, not exact queries.
 * @param {boolean}  title-exact   Specifies whether the title query should be taken as an exact string. Meaningless without title. Possible values are true and false. Note: Matches are case-insensitive.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getWorksheets = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/worksheets/{key}/{visibility}/{projection} ';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'title-exact');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * To add a worksheet to the spreadsheet.			
 * @category Worksheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved.
 * @param {string}  title   Specifies the search terms for the title of a document. This parameter used without title-exact will only submit partial queries, not exact queries.
 * @param {boolean}  title-exact   Specifies whether the title query should be taken as an exact string. Meaningless without title. Possible values are true and false. Note: Matches are case-insensitive.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp POST
 */
exports.addWorksheet = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/worksheets/{key}/{visibility}/{projection} ';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'title-exact');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * List a worksheet within the spreadsheet identified by the specified key.			
 * @category Worksheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getWorksheet = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/worksheets/{key}/{visibility}/{projection}/{worksheetId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Modify the title and size of a worksheet.			
 * @category Worksheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.updateWorksheet = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/worksheets/{key}/{visibility}/{projection}/{worksheetId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * To delete a worksheet. If you delete a worksheet, that worksheet is completely removed from the spreadsheet and all data contained on that worksheet is discarded.			
 * @category Worksheets
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [version]  Specifies the version of worksheet.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp DELETE
 */
exports.deleteWorksheet = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/worksheets/{key}/{visibility}/{projection}/{worksheetId}/{version}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'version', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * Retrieving a list-based feed.			
 * @category List-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved.
 * @param {string}  q   Full-text query string. When creating a query, list search terms separated by spaces, in the form q=term1 term2 term3. (As with all of the query parameter values, the spaces must be URL encoded.) The service returns all entries that match all of the search terms (like using AND between terms). Like Google's web search, a service searches on complete words (and related words with the same stem), not substrings.To search for an exact phrase, enclose the phrase in quotation marks: q="exact phrase".To exclude entries that match a given term, use the form q=-term.The search is case-insensitive.							
 * @param {string}  orderby   Specifies what column to use in ordering the entries in the feed.- By position (the default): orderby=position returns rows in the order in which they appear in the GUI. Row 1, then row 2, then row 3, and so on.- By column: orderby=column:columnName sorts rows in ascending order based on the values in the column with the given columnName, where columnName is the value in the header row for that column.			
 * @param {boolean}  reverse   Specifies whether to sort in descending or ascending order. Reverses default sort order: reverse=true results in a descending sort; reverse=false (the default) results in an ascending sort.
 * @param {boolean}  sq   Structured query on the full text in the worksheet. [columnName][binaryOperator][value]Supported binaryOperators are:          o () for overriding order of operations          o = or == for strict equality          o <> or != for strict inequality          o and or && for boolean and          o or or || for boolean orNote that the binaryOperators need to be URL-encoded. Example: https://spreadsheets.google.com/feeds/list/key/worksheetId/private/full?sq=ipm<4%20and%20hours>40							
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.retrieveListBasedFeed = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/list/{key}/{worksheetId}/{visibility}/{projection}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'orderby', 'str');
	url = url_replace(url, args, 'reverse', 'null', false, "false");
	url = url_replace(url, args, 'sq');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * To add a row to the worksheet.			
 * @category List-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved.
 * @param {string}  q   Full-text query string. When creating a query, list search terms separated by spaces, in the form q=term1 term2 term3. (As with all of the query parameter values, the spaces must be URL encoded.) The service returns all entries that match all of the search terms (like using AND between terms). Like Google's web search, a service searches on complete words (and related words with the same stem), not substrings.To search for an exact phrase, enclose the phrase in quotation marks: q="exact phrase".To exclude entries that match a given term, use the form q=-term.The search is case-insensitive.							
 * @param {string}  orderby   Specifies what column to use in ordering the entries in the feed.- By position (the default): orderby=position returns rows in the order in which they appear in the GUI. Row 1, then row 2, then row 3, and so on.- By column: orderby=column:columnName sorts rows in ascending order based on the values in the column with the given columnName, where columnName is the value in the header row for that column.			
 * @param {boolean}  reverse   Specifies whether to sort in descending or ascending order. Reverses default sort order: reverse=true results in a descending sort; reverse=false (the default) results in an ascending sort.
 * @param {boolean}  sq   Structured query on the full text in the worksheet. [columnName][binaryOperator][value]Supported binaryOperators are:          o () for overriding order of operations          o = or == for strict equality          o <> or != for strict inequality          o and or && for boolean and          o or or || for boolean orNote that the binaryOperators need to be URL-encoded. Example: https://spreadsheets.google.com/feeds/list/key/worksheetId/private/full?sq=ipm<4%20and%20hours>40							
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp POST
 */
exports.addRowListBasedFeed = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/list/{key}/{worksheetId}/{visibility}/{projection}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'orderby', 'str');
	url = url_replace(url, args, 'reverse', 'null', false, "false");
	url = url_replace(url, args, 'sq');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * Retrieving a list-based feed where the feed is limited to specific row.			
 * @category List-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [rowId]  Specifies row ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.retrieveRowListBasedFeeds = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/list/{key}/{worksheetId}/{visibility}/{projection}/{rowId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'rowId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * To update the contents of an existing row.			
 * @category List-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [rowId]  Specifies row ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.updateRowListBasedFeed = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/list/{key}/{worksheetId}/{visibility}/{projection}/{rowId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'rowId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * To delete a row. If you delete a row, that row is completely removed from the worksheet.			
 * @category List-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [rowId]  Specifies row ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp DELETE
 */
exports.deleteRowListBasedFeed = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/list/{key}/{worksheetId}/{visibility}/{projection}/{rowId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'rowId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * To retrieve cell-based feed			
 * @category Cell-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved.
 * @param {string}  q   Full-text query string. When creating a query, list search terms separated by spaces, in the form q=term1 term2 term3. (As with all of the query parameter values, the spaces must be URL encoded.) The service returns all entries that match all of the search terms (like using AND between terms). Like Google's web search, a service searches on complete words (and related words with the same stem), not substrings.To search for an exact phrase, enclose the phrase in quotation marks: q="exact phrase".To exclude entries that match a given term, use the form q=-term.The search is case-insensitive.							
 * @param {string}  min-row   Positional number of minimum row returned in query. Queries indicate an inclusive range.
 * @param {string}  max-row   Positional number of maximum row returned in query. Queries indicate an inclusive range.
 * @param {string}  min-col   Positional number of minimum column returned in query. Queries indicate an inclusive range.
 * @param {string}  max-col   Positional number of maximum column returned in query. Queries indicate an inclusive range.
 * @param {string}  range   A single cell or a range of cells.Use standard spreadsheet cell-range notations, using a colon to separate start and end of range. Examples:   range=A1 and range=R1C1 both specify only cell A1.   range=D1:F3 and range=R1C4:R3C6 both specify the rectangle of cells with corners at D1 and F3. 			
 * @param {boolean}  return-empty   If true then empty cells will be returned in the feed. The default is false.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.retrieveCellsBasedFeed = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/cells/{key}/{worksheetId}/{visibility}/{projection}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'min-row', 'str');
	url = url_replace(url, args, 'max-row', 'str');
	url = url_replace(url, args, 'min-col', 'str');
	url = url_replace(url, args, 'max-col', 'str');
	url = url_replace(url, args, 'range', 'str');
	url = url_replace(url, args, 'return-empty');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Retrieves the entry for the indicated cell.			
 * @category Cell-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [cellId]  Specifies cell ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.retrieveCell = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/cells/{key}/{worksheetId}/{visibility}/{projection}/{cellId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'cellId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * To change the data in a cell, even if it is empty.			
 * @category Cell-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [cellId]  Specifies cell ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.updateCell = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/cells/{key}/{worksheetId}/{visibility}/{projection}/{cellId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'cellId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * To clear a cell.			
 * @category Cell-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [cellId]  Specifies cell ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.clearCell = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/cells/{key}/{worksheetId}/{visibility}/{projection}/{cellId}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'cellId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * To update an entire column, row, or other set of cells.			
 * @category Cell-based Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [key]  Specifies spreadsheet ID.
 * @param {string} [projection]  Indicates what information is included in the representation.full: Full-fidelity feed; contains all spreadsheet data including formulas. Full read/write access.values:	Feed includes all data except for formulas. Formulas are replaced with their evaluations. Includes Data API extension elements.	Read-only access.basic: Feed includes all data except for formulas. Formulas are replaced with their evaluations. This feed uses only Atom elements, leaving out all Data API extension elements. Read-only access.Note: All combinations of visibility and projection are valid except for public/full.							
 * @param {string} [worksheetId]  Specifies worksheet ID.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.updateMultipleCells = function(args, opts) {
	var url = 'https://spreadsheets.google.com/feeds/cells/{key}/{worksheetId}/{visibility}/{projection}/batch';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'projection', 'str', true);
	url = url_replace(url, args, 'worksheetId', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};