/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def !== undefined)
		args[param] = def;
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/google');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Lists all the documents for the Google Account that's associated with the authenticated user.			
 * @category Document List feeds
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string}  alt   Alternative representation type.atom: If you don't specify an alt parameter, the service returns an Atom feed.rss: Returns an RSS 2.0 result feed (for reads only). When you request data from a service in RSS format, the service supplies a feed (or other representation of the resource) in RSS format. If there's no equivalent RSS property for a given Data API property, the service uses the Atom property, labeling it with an appropriate namespace to indicate that it's an extension to RSS.json: Returns a JSON representation of the feed. More informationjson-in-script: Requests a response that wraps JSON in a script tag. More informationatom-in-script: Requests an Atom response that wraps an XML string in a script tag.rss-in-script: Requests an RSS response that wraps an XML string in a script tag.atom-service: Requests an Atom service document that describes the feed.							
 * @param {string}  author   Entry author. The service returns entries where the author name and/or email address match your query string.
 * @param {string}  q   Full-text query string. When creating a query, list search terms separated by spaces, in the form q=term1 term2 term3. (As with all of the query parameter values, the spaces must be URL encoded.) The service returns all entries that match all of the search terms (like using AND between terms). Like Google's web search, a service searches on complete words (and related words with the same stem), not substrings.To search for an exact phrase, enclose the phrase in quotation marks: q="exact phrase".To exclude entries that match a given term, use the form q=-term.The search is case-insensitive.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {int}  max-results   Maximum number of results to be retrieved. By default the API will return the first 100 documents and files in the user's resource list. To request more or less than 100 resources, use the max-results GET parameter with any resources feed URL. Valid values for this parameter are integers from 1 to 1000, inclusive.
 * @param {string}  updated-min   Bounds on the entry update date. Use the RFC 3339 timestamp format. For example: 2005-08-09T10:57:00-08:00. The lower bound is inclusive, whereas the upper bound is exclusive. In some cases (such as when using v2.1 or newer of the Calendar Data API), specifying an updated-min that is too far in the past will cause an HTTP 410 (Gone) status to be returned.
 * @param {string}  updated-max   Bounds on the entry update date. Use the RFC 3339 timestamp format. For example: 2005-08-09T10:57:00-08:00. The lower bound is inclusive, whereas the upper bound is exclusive. In some cases (such as when using v2.1 or newer of the Calendar Data API), specifying an updated-min that is too far in the past will cause an HTTP 410 (Gone) status to be returned.
 * @param {string}  category   Category query filter. To do an OR between terms, use a pipe character (|), URL-encoded as %7C. For example: category=Fritz%7CLaurie returns entries that match either category. To do an AND between terms, use a comma character (,). For example: category=Fritz,Laurie returns entries that match both categories.
 * @param {string}  start-key   Retrieves resources beyond the first page, page through results by following the next link of a feed.
 * @param {string}  title   Specifies the search terms for the title of a document. This parameter used without title-exact will only submit partial queries, not exact queries.
 * @param {boolean}  title-exact   Specifies whether the title query should be taken as an exact string. Meaningless without title. Possible values are true and false. Note: Matches are case-insensitive.
 * @param {string}  opened-min   Lower bound on the last time a document was opened by the current user. Use the RFC 3339 timestamp format. For example: opened-min=2005-08-09T09:57:00-08:00
 * @param {string}  opened-max   Upper bound on the last time a document was opened by the current user. Use the RFC 3339 timestamp format. For example: opened-max=2009-03-02T10:00:00
 * @param {string}  edited-min   Lower bound on the last time a document was edited by the current user. This value corresponds to the <edited ns="app"> value in the Atom entry, which represents changes to the document's content or metadata. Use the RFC 3339 timestamp format. For example: edited-min=2005-08-09T09:57:00-08:00
 * @param {string}  edited-max   Upper bound on the last time a document was edited by the user. This value corresponds to the <edited ns="app"> value in the Atom entry, which represents changes to the document's content or metadata. Use the RFC 3339 timestamp format. For example: edited-max=2009-08-09T09:57:00-08:00
 * @param {string}  owner   Searches for documents with a specific owner. Use the email address of the owner. For example: owner=user%40gmail.com
 * @param {string}  writer   Searches for documents which can be written to by specific users.	Use a single email address or a comma separated list of email addresses. For example: writer=user1%40gmail.com%2Cuser2%40example.com
 * @param {string}  reader   Searches for documents which can be read by specific users. Use a single email address or a comma separated list of email addresses. For example: reader=user1%40gmail.com%2Cuser2%40example.com
 * @param {boolean}  showfolders   Specifies whether the query should return folders as well as documents. Possible values are true and false. Default is false.
 * @param {boolean}  showroot   To determine which resources are in the root collection.
 * @param {boolean}  showdeleted   Specifies whether the query should return documents which are in the trash as well as other documents. Possible values are true and false. Default is false
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getDocumentsAndFiles = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'alt', 'str');
	url = url_replace(url, args, 'author', 'str');
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'updated-min', 'str');
	url = url_replace(url, args, 'updated-max', 'str');
	url = url_replace(url, args, 'category', 'str');
	url = url_replace(url, args, 'start-key', 'str');
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'title-exact');
	url = url_replace(url, args, 'opened-min', 'str');
	url = url_replace(url, args, 'opened-max', 'str');
	url = url_replace(url, args, 'edited-min', 'str');
	url = url_replace(url, args, 'edited-max', 'str');
	url = url_replace(url, args, 'owner', 'str');
	url = url_replace(url, args, 'writer', 'str');
	url = url_replace(url, args, 'reader', 'str');
	url = url_replace(url, args, 'showfolders', 'null', false, "false");
	url = url_replace(url, args, 'showroot', 'null', false, "false");
	url = url_replace(url, args, 'showdeleted', 'null', false, "false");
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Searching for resources by type.			
 * @category Document List feeds
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Resource ID value that you've retrieved before.
 * @param {string} [category]  Categories:Document Type: All documents of the corresponding type in the requesting user's document list.	- document	- drawing	- folder	- pdf	- presentation	- spreadsheet	- form	Note: To return a list of files of MIME type application/msword, send a category query that includes the scheme + content type: {http://schemas.google.com/g/2005#kind}application/msword (This URL needs to be fully URL encoded)Starred Status: All documents that have been starred by the requesting user	- starredTrashed Status: All documents that have been sent to the trash by the requesting user	- trashedHidden status: All documents that are hidden	- hiddenViewed status: All documents that have been viewed by the requesting user	- viewedOwned by user: All documents that are owned by the requesting user	- minePrivate status: All documents that are not shared with anyone	- privateShared with domain: All documents that are shared with everyone at the user's hosted domain. This only works for Google Apps users.	- shared-with-domain	You can combine more than one category. As an example, to retrieve a list of only starred presentations, use the presentation and starred categories together: "/feeds/default/private/full/-/presentation/starred"			
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [If-None-Match]  Specifies the entry's ETag, which you can find in the <feed> element's or <entry> element's gd:etag attribute.
 * @methodhttp GET
 */
exports.searchTypeFeed = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/-/{category}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'category', 'str', true, "private");
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'If-None-Match', 'str', true);
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Retrieves the document associated with the resourceID for the Google Account that's associated with the authenticated user.			
 * @category Document List feeds
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Resource ID value that you've retrieved before.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [If-None-Match]  Specifies the entry's ETag, which you can find in the <feed> element's or <entry> element's gd:etag attribute.
 * @methodhttp GET
 */
exports.getDocument = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'If-None-Match', 'str', true);
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Trashing a document or file moves the resource to the user's trash collection.			
 * @category Document List feeds
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Resource ID value that you've retrieved before.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [If-None-Match]  Specifies the entry's ETag, which you can find in the <feed> element's or <entry> element's gd:etag attribute.
 * @methodhttp DELETE
 */
exports.trashingDocument = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'If-None-Match', 'str', true);
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * Deleting a document or file permanently removes the resource from the user's documents list.			
 * @category Document List feeds
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Resource ID value that you've retrieved before.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [If-None-Match]  Specifies the entry's ETag, which you can find in the <feed> element's or <entry> element's gd:etag attribute.
 * @param {boolean} [delete]  Specifies whether or to permanently delete a document when trashing it. Possible values are true and false. Default is false, meaning a document is moved to the trash.
 * @methodhttp DELETE
 */
exports.deleteDocument = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'If-None-Match', 'str', true);
	url = url_replace(url, args, 'delete', 'null', true, "true");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * The folders feed is used to list a folder's contents.			
 * @category Folders Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Folder ID value that you've retrieved before.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getFolderContents = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/contents';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Create a subcollection. Similar to creating a normal collection.			
 * @category Folders Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [collection_id]  Collection ID value.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp POST
 */
exports.createSubcollection = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/folder%3A{collection_id}/contents';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'collection_id', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * To add a resource to a collection.			
 * @category Folders Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [collection_id]  Collection ID value.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp POST
 */
exports.addResourceToCollection = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/folder%3A{collection_id}/contents';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'collection_id', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * To remove a resource from a collection.			
 * @category Folders Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [collection_id]  Collection ID value.
 * @param {string} [resourceID]  Resource ID value.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp DELETE
 */
exports.removeResourceFromCollection = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/folder%3A{collection_id}/contents/{resourceID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'collection_id', 'str', true);
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * The acl feed is used to request a document's sharing permissions.			
 * @category ACL Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Represents the object you are requesting the sharing permissions for.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getSharingPermissions = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/acl';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * To insert a new role into the ACL feed.			
 * @category ACL Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Represents the object you are requesting the sharing permissions for.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @param {boolean}  send-notification-emails   Emails can be disabled by attaching the send-notification-emails.
 * @methodhttp POST
 */
exports.insertRole = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/acl';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	url = url_replace(url, args, 'send-notification-emails');
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * To update the entry.			
 * @category ACL Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Represents the object you are requesting the sharing permissions for.
 * @param {string} [user]  To update the entry, we will need to issue an HTTP PUT request to the entry's edit link, which is simply a <link> element, whose rel attribute is set to edit. In our case it is:<link rel='edit'      type='application/atom+xml'      href='https://docs.google.com/feeds/default/private/full/document:1234abcd/acl/user:new_writer@example.com'/>
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.ChangeEntryRole = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/acl/{user}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'user', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * To remove permissions for a user.			
 * @category ACL Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  Represents the object you are requesting the sharing permissions for.
 * @param {string} [user]  To update the entry, we will need to issue an HTTP PUT request to the entry's edit link, which is simply a <link> element, whose rel attribute is set to edit. In our case it is:<link rel='edit'      type='application/atom+xml'      href='https://docs.google.com/feeds/default/private/full/document:1234abcd/acl/user:new_writer@example.com'/>
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp DELETE
 */
exports.removePermissions = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/acl/{user}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'user', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * To share a collection.			
 * @category ACL Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [collection_id]  Collection ID value.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp POST
 */
exports.shareCollection = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/folder%3A{collection_id}/acl';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'collection_id', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * The media feed is used to update a document's content body.			
 * @category Media Feed
 * @param {string} [resourceID]  Represents the object you wish to update.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [If-Match]  ETag or * here.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @param {string} [Slug]  Contents is replaced with this document.
 * @methodhttp PUT
 */
exports.updateDocument = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/media/{resourceID}';
	args = args || {};
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'If-Match', 'str', true, "*");
	url = url_replace(url, args, 'Content-Type', 'str', true, "multipart/related; boundary=END_OF_PART");
	url = url_replace(url, args, 'Slug', 'str', true);
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * The revisions feed is used to view a document's revision history.			
 * @category Revisions Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  represents the object you are requesting revision history for.
 * @param {string}  revisionID   A particular revision.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.viewDocumentHistory = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/revisions/{revisionID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'revisionID', 'str');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Deleting file revisions.			
 * @category Revisions Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [resourceID]  represents the object you are requesting revision history for.
 * @param {string}  revisionID   A particular revision.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp DELETE
 */
exports.deleteFileRevision = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/full/{resourceID}/revisions/{revisionID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'resourceID', 'str', true);
	url = url_replace(url, args, 'revisionID', 'str');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * The archive feed can be used to export the results of a query as a .zip file of documents. The body of the request contains data which controls the archive operation and, optionally, a list of resource IDs to archive. If no resource IDs are contained in the request body, query parameters from the URL (if any) is used to select the items to include in the archive. If the request body contains one or more resource IDs, query parameters from the URL is ignored.			
 * @category Archive Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string}  author   Entry author. The service returns entries where the author name and/or email address match your query string.
 * @param {string}  q   Full-text query string. When creating a query, list search terms separated by spaces, in the form q=term1 term2 term3. (As with all of the query parameter values, the spaces must be URL encoded.) The service returns all entries that match all of the search terms (like using AND between terms). Like Google's web search, a service searches on complete words (and related words with the same stem), not substrings.To search for an exact phrase, enclose the phrase in quotation marks: q="exact phrase".To exclude entries that match a given term, use the form q=-term.The search is case-insensitive.							
 * @param {string}  start-index   1-based index of the first result to be retrieved. Note that this isn't a general cursoring mechanism. If you first send a query with ?start-index=1&max-results=10 and then send another query with ?start-index=11&max-results=10, the service cannot guarantee that the results are equivalent to ?start-index=1&max-results=20, because insertions and deletions could have taken place in between the two queries.
 * @param {string}  updated-min   Bounds on the entry update date. Use the RFC 3339 timestamp format. For example: 2005-08-09T10:57:00-08:00. The lower bound is inclusive, whereas the upper bound is exclusive. In some cases (such as when using v2.1 or newer of the Calendar Data API), specifying an updated-min that is too far in the past will cause an HTTP 410 (Gone) status to be returned.
 * @param {string}  updated-max   Bounds on the entry update date. Use the RFC 3339 timestamp format. For example: 2005-08-09T10:57:00-08:00. The lower bound is inclusive, whereas the upper bound is exclusive. In some cases (such as when using v2.1 or newer of the Calendar Data API), specifying an updated-min that is too far in the past will cause an HTTP 410 (Gone) status to be returned.
 * @param {string}  category   Category query filter. To do an OR between terms, use a pipe character (|), URL-encoded as %7C. For example: category=Fritz%7CLaurie returns entries that match either category. To do an AND between terms, use a comma character (,). For example: category=Fritz,Laurie returns entries that match both categories.
 * @param {string}  start-key   Retrieves resources beyond the first page, page through results by following the next link of a feed.
 * @param {string}  title   Specifies the search terms for the title of a document. This parameter used without title-exact will only submit partial queries, not exact queries.
 * @param {boolean}  title-exact   Specifies whether the title query should be taken as an exact string. Meaningless without title. Possible values are true and false. Note: Matches are case-insensitive.
 * @param {string}  opened-min   Lower bound on the last time a document was opened by the current user. Use the RFC 3339 timestamp format. For example: opened-min=2005-08-09T09:57:00-08:00
 * @param {string}  opened-max   Upper bound on the last time a document was opened by the current user. Use the RFC 3339 timestamp format. For example: opened-max=2009-03-02T10:00:00
 * @param {string}  edited-min   Lower bound on the last time a document was edited by the current user. This value corresponds to the <edited ns="app"> value in the Atom entry, which represents changes to the document's content or metadata. Use the RFC 3339 timestamp format. For example: edited-min=2005-08-09T09:57:00-08:00
 * @param {string}  edited-max   Upper bound on the last time a document was edited by the user. This value corresponds to the <edited ns="app"> value in the Atom entry, which represents changes to the document's content or metadata. Use the RFC 3339 timestamp format. For example: edited-max=2009-08-09T09:57:00-08:00
 * @param {string}  owner   Searches for documents with a specific owner. Use the email address of the owner. For example: owner=user%40gmail.com
 * @param {string}  writer   Searches for documents which can be written to by specific users.	Use a single email address or a comma separated list of email addresses. For example: writer=user1%40gmail.com%2Cuser2%40example.com
 * @param {string}  reader   Searches for documents which can be read by specific users. Use a single email address or a comma separated list of email addresses. For example: reader=user1%40gmail.com%2Cuser2%40example.com
 * @param {boolean}  showfolders   Specifies whether the query should return folders as well as documents. Possible values are true and false. Default is false
 * @param {boolean}  showdeleted   Specifies whether the query should return documents which are in the trash as well as other documents. Possible values are true and false. Default is false
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp POST
 */
exports.exportResultsQuery = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/archive';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'author', 'str');
	url = url_replace(url, args, 'q', 'str');
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'updated-min', 'str');
	url = url_replace(url, args, 'updated-max', 'str');
	url = url_replace(url, args, 'category', 'str');
	url = url_replace(url, args, 'start-key', 'str');
	url = url_replace(url, args, 'title', 'str');
	url = url_replace(url, args, 'title-exact');
	url = url_replace(url, args, 'opened-min', 'str');
	url = url_replace(url, args, 'opened-max', 'str');
	url = url_replace(url, args, 'edited-min', 'str');
	url = url_replace(url, args, 'edited-max', 'str');
	url = url_replace(url, args, 'owner', 'str');
	url = url_replace(url, args, 'writer', 'str');
	url = url_replace(url, args, 'reader', 'str');
	url = url_replace(url, args, 'showfolders', 'null', false, "false");
	url = url_replace(url, args, 'showdeleted', 'null', false, "false");
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * Returns the status of an archive. The resulting entry contains elements which provide information (including completion status) about the archive operation.			
 * @category Archive Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [archiveID]  Represents the archive which refer to the state.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.getArchiveStatus = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/archive/{archiveID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'archiveID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Changes the archive notification email address.			
 * @category Archive Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [archiveID]  Represents the archive which refer to the state.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @methodhttp PUT
 */
exports.updateArchiveNotificationEmailAddress = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/archive/{archiveID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'archiveID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true, "application/atom+xml");
	return http.put({url:url, body:args, provider:provider}, opts);
};

/** 
 * Aborting an archive in the process of being generated.			
 * @category Archive Feed
 * @param {string} [visibility]  private: For use whenever you can authenticate the request. Read/write access if the authenticated user has edit privileges; otherwise, read-only.
 * @param {string} [archiveID]  Represents the archive which refer to the state.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp DELETE
 */
exports.abortsArchiveOperation = function(args, opts) {
	var url = 'https://docs.google.com/feeds/default/{visibility}/archive/{archiveID}';
	args = args || {};
	url = url_replace(url, args, 'visibility', 'str', true, "private");
	url = url_replace(url, args, 'archiveID', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http.delete({url:url, params:args, provider:provider}, opts);
};

/** 
 * The metadata feed is used to view general information about a user's account.			
 * @category Metadata Feed
 * @param {string} [user_id]  Represents the user's Google Docs account or 'default' to represent the currently authorized user.
 * @param {string}  remaining-changestamps-first   causes the metadata feed to return the number of changestamps since the given changestamp, including the given changestamp. Thus, to get the number of changestamps since a given changestamp, clients must provide the last synced changestamp, plus one.
 * @param {string}  remaining-changestamps-limit   Using this mechanism of the metadata feed can increase the latency of a metadata feed request. To minimize this latency, clients are required to provide the remaining-changestamps-limit parameter. This parameter gives an upper bound to the value returned in <remainingChangestamps ns="docs">.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.viewUserInformation = function(args, opts) {
	var url = 'https://docs.google.com/feeds/metadata/{user_id}';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'remaining-changestamps-first', 'str');
	url = url_replace(url, args, 'remaining-changestamps-limit', 'str');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * The changes feed is used to view changes to a user's resources.			
 * @category Changes Feed
 * @param {string} [user_id]  Represents the user's email address or 'default' to represent the currently authorized user.
 * @param {string}  start-index   Retrieves all changes since a given changestamp
 * @param {int}  max-results   To change the number of changes returned, set the max-results GET parameter to a number less than or equal to 1000.
 * @param {string} [GData-Version]  Specifies a version number.
 * @methodhttp GET
 */
exports.viewUserResources = function(args, opts) {
	var url = 'https://docs.google.com/feeds/{user_id}/private/changes';
	args = args || {};
	url = url_replace(url, args, 'user_id', 'str', true);
	url = url_replace(url, args, 'start-index', 'str');
	url = url_replace(url, args, 'max-results');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Creating a new, empty resource with only metadata is the simplest way to create a resource, because it does not involve uploading any resource content.			
 * @category Create and Upload Documents
 * @param {string} [resumable-create-media-link]  Send an HTTP POST request to the resumable-create-media link of the resources feed. To acquire this link, clients query https://docs.google.com/feeds/default/private/full.Example:<link rel="http://schemas.google.com/g/2005#resumable-create-media"    type="application/atom+xml"    href="https://docs.google.com/feeds/upload/create-session/default/private/full"/>		    Important: To upload a file, append ?convert=false to the resumable-create-media link.				
 * @param {boolean}  ocr   Uploading documents using Optical Character Recognition.Limitations:    Supported file formats: application/pdf, image/jpeg, image/png, image/gif    Works best with high resolution images (at least 10 pixel character height)    OCR is a computationally expensive operation and can take up to 30 seconds.    Works only for latin character sets.To perform OCR on a .pdf, .jpg, .png, or .gif file, include the ocr=true							
 * @param {string}  ocr-language   May be provided in order to hint at which language to use when performing OCR. Even while providing this parameter, if there is overwhelming evidence that a character or paragraph is of a certain language, the hint will not be applied in that case.Valid values for ocr-language are ISO 639-1 codes. The following codes are currently supported by the API: bg, ca, cs, da, de, el, en, es, fi, fil, fr, hr, hu, id, it, ja, ko, lt, lv, nl, no, pl, pt, ro, ru, sk, sl, sr, sv, th, tr, uk, vi, zh-Hans 			
 * @param {string}  targetLanguage   Specifies the language to translate a document into.
 * @param {string}  sourceLanguage   Specifies the source language of the original document. Optional when using the translation service. If not provided, Google will attempt to auto-detect the source language.
 * @param {boolean}  convert   Specifies whether or not a document-type arbitrary file upload should be converted into a native Google Doc. Optional when uploading a file. Possible values are true and false. Default is true. This parameter has no effect on PDFs or arbitrary file uploads.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @param {int} [X-Upload-Content-Length]  Specifies Upload Content Length. Important: Always choose a chunk size that is a multiple of 512 kilobytes. The last chunk may be smaller than 512 kilobytes.
 * @methodhttp POST
 */
exports.createDocumentWithMetadata = function(args, opts) {
	var url = 'https://docs.google.com/feeds/{resumable-create-media-link}';
	args = args || {};
	url = url_replace(url, args, 'resumable-create-media-link', 'str', true);
	url = url_replace(url, args, 'ocr');
	url = url_replace(url, args, 'ocr-language', 'str');
	url = url_replace(url, args, 'targetLanguage', 'str');
	url = url_replace(url, args, 'sourceLanguage', 'str');
	url = url_replace(url, args, 'convert', 'null', false, "true");
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true);
	url = url_replace(url, args, 'X-Upload-Content-Length', 'null', true);
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * Creating a new resource with only content requires the use of the GData resumable upload protocol. When uploading a resource in this scenario, the resource will have a default title and metadata, depending on the MIME type of the content uploaded.			
 * @category Create and Upload Documents
 * @param {string} [resumable-create-media-link]  Send an HTTP POST request to the resumable-create-media link of the resources feed. To acquire this link, clients query https://docs.google.com/feeds/default/private/full.Example:<link rel="http://schemas.google.com/g/2005#resumable-create-media"    type="application/atom+xml"    href="https://docs.google.com/feeds/upload/create-session/default/private/full"/>		    Important: To upload a file, append ?convert=false to the resumable-create-media link.				
 * @param {boolean}  ocr   Uploading documents using Optical Character Recognition.Limitations:    Supported file formats: application/pdf, image/jpeg, image/png, image/gif    Works best with high resolution images (at least 10 pixel character height)    OCR is a computationally expensive operation and can take up to 30 seconds.    Works only for latin character sets.To perform OCR on a .pdf, .jpg, .png, or .gif file, include the ocr=true							
 * @param {string}  ocr-language   May be provided in order to hint at which language to use when performing OCR. Even while providing this parameter, if there is overwhelming evidence that a character or paragraph is of a certain language, the hint will not be applied in that case.Valid values for ocr-language are ISO 639-1 codes. The following codes are currently supported by the API: bg, ca, cs, da, de, el, en, es, fi, fil, fr, hr, hu, id, it, ja, ko, lt, lv, nl, no, pl, pt, ro, ru, sk, sl, sr, sv, th, tr, uk, vi, zh-Hans 			
 * @param {string}  targetLanguage   Specifies the language to translate a document into.
 * @param {string}  sourceLanguage   Specifies the source language of the original document. Optional when using the translation service. If not provided, Google will attempt to auto-detect the source language.
 * @param {boolean}  convert   Specifies whether or not a document-type arbitrary file upload should be converted into a native Google Doc. Optional when uploading a file. Possible values are true and false. Default is true. This parameter has no effect on PDFs or arbitrary file uploads.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [X-Upload-Content-Type]  Specifies Upload Content Type.
 * @param {int} [X-Upload-Content-Length]  Specifies Upload Content Length. Important: Always choose a chunk size that is a multiple of 512 kilobytes. The last chunk may be smaller than 512 kilobytes.
 * @methodhttp POST
 */
exports.uploadDocumentWithContentOnly = function(args, opts) {
	var url = 'https://docs.google.com/feeds/{resumable-create-media-link}';
	args = args || {};
	url = url_replace(url, args, 'resumable-create-media-link', 'str', true);
	url = url_replace(url, args, 'ocr');
	url = url_replace(url, args, 'ocr-language', 'str');
	url = url_replace(url, args, 'targetLanguage', 'str');
	url = url_replace(url, args, 'sourceLanguage', 'str');
	url = url_replace(url, args, 'convert', 'null', false, "true");
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'X-Upload-Content-Type', 'str', true);
	url = url_replace(url, args, 'X-Upload-Content-Length', 'null', true);
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * Creating a new resource with both metadata and content at once requires the use of the GData resumable upload protocol. When uploading a resource in this scenario, the resource will have the given title and metadata, as well as the given content.			
 * @category Create and Upload Documents
 * @param {string} [resumable-create-media-link]  Send an HTTP POST request to the resumable-create-media link of the resources feed. To acquire this link, clients query https://docs.google.com/feeds/default/private/full.Example:<link rel="http://schemas.google.com/g/2005#resumable-create-media"    type="application/atom+xml"    href="https://docs.google.com/feeds/upload/create-session/default/private/full"/>		    Important: To upload a file, append ?convert=false to the resumable-create-media link.				
 * @param {boolean}  ocr   Uploading documents using Optical Character Recognition.Limitations:    Supported file formats: application/pdf, image/jpeg, image/png, image/gif    Works best with high resolution images (at least 10 pixel character height)    OCR is a computationally expensive operation and can take up to 30 seconds.    Works only for latin character sets.To perform OCR on a .pdf, .jpg, .png, or .gif file, include the ocr=true							
 * @param {string}  ocr-language   May be provided in order to hint at which language to use when performing OCR. Even while providing this parameter, if there is overwhelming evidence that a character or paragraph is of a certain language, the hint will not be applied in that case.Valid values for ocr-language are ISO 639-1 codes. The following codes are currently supported by the API: bg, ca, cs, da, de, el, en, es, fi, fil, fr, hr, hu, id, it, ja, ko, lt, lv, nl, no, pl, pt, ro, ru, sk, sl, sr, sv, th, tr, uk, vi, zh-Hans 			
 * @param {string}  targetLanguage   Specifies the language to translate a document into.
 * @param {string}  sourceLanguage   Specifies the source language of the original document. Optional when using the translation service. If not provided, Google will attempt to auto-detect the source language.
 * @param {boolean}  convert   Specifies whether or not a document-type arbitrary file upload should be converted into a native Google Doc. Optional when uploading a file. Possible values are true and false. Default is true. This parameter has no effect on PDFs or arbitrary file uploads.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @param {string} [X-Upload-Content-Type]  Specifies Upload Content Type.
 * @param {int} [X-Upload-Content-Length]  Specifies Upload Content Length. Important: Always choose a chunk size that is a multiple of 512 kilobytes. The last chunk may be smaller than 512 kilobytes.
 * @methodhttp POST
 */
exports.createDocumentWithMetadataAndContent = function(args, opts) {
	var url = 'https://docs.google.com/feeds/{resumable-create-media-link}';
	args = args || {};
	url = url_replace(url, args, 'resumable-create-media-link', 'str', true);
	url = url_replace(url, args, 'ocr');
	url = url_replace(url, args, 'ocr-language', 'str');
	url = url_replace(url, args, 'targetLanguage', 'str');
	url = url_replace(url, args, 'sourceLanguage', 'str');
	url = url_replace(url, args, 'convert', 'null', false, "true");
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true);
	url = url_replace(url, args, 'X-Upload-Content-Type', 'str', true);
	url = url_replace(url, args, 'X-Upload-Content-Length', 'null', true);
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * Request to upload the document or file in chunks of 512 kilobytes each.			
 * @category Create and Upload Documents
 * @param {string} [next-location]  Next location for upload a chunk of 512 kilobytes each. Important: After a period of time, requesting an expired [next location] receives a response of 410 Gone or 404 Not Found.			
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [Content-Type]  Specifies Content Type.
 * @param {string} [Content-Range]  Specifies the range.
 * @methodhttp POST
 */
exports.uploadDocumentChunks = function(args, opts) {
	var url = 'https://docs.google.com/feeds/{next-location}';
	args = args || {};
	url = url_replace(url, args, 'next-location', 'str', true);
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'Content-Type', 'str', true);
	url = url_replace(url, args, 'Content-Range', 'str', true);
	return http.post({url:url, body:args, provider:provider}, opts);
};

/** 
 * Download text documents, drawings and presentations in a variety of formats.			
 * @category Download Documents
 * @param {string}  exportFormat   Specifies the output format for spreadsheets.Values for documents: "txt", "odt", "pdf", "html", "rtf", "doc", "png", "zip"Values for presentations: "pdf", "png", "ppt", and "txt".Values for drawings: "jpeg", "pdf", "png", svg.values for spreadsheets: "xls", "csv", "pdf", "ods", "tsv, "html"							
 * @param {int}  revision   Specifies a particular revision.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [document-type]  Type of document.
 * @param {string} [docID]  Specifies the document/drawing/presentation id to download.
 * @methodhttp GET
 */
exports.downloadDocument = function(args, opts) {
	var url = 'https://docs.google.com/feeds/download/{document-type}/Export';
	args = args || {};
	url = url_replace(url, args, 'exportFormat', 'str');
	url = url_replace(url, args, 'revision');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'document-type', 'str', true);
	url = url_replace(url, args, 'docID', 'str', true);
	return http({url:url, params:args, provider:provider}, opts);
};

/** 
 * Download spreadsheets in a variety of formats.			
 * @category Download Documents
 * @param {string}  exportFormat   Specifies the output format for spreadsheets.Values for documents: "txt", "odt", "pdf", "html", "rtf", "doc", "png", "zip"Values for presentations: "pdf", "png", "ppt", and "txt".Values for drawings: "jpeg", "pdf", "png", svg.values for spreadsheets: "xls", "csv", "pdf", "ods", "tsv, "html"							
 * @param {int}  revision   Specifies a particular revision.
 * @param {string} [GData-Version]  Specifies a version number.
 * @param {string} [document-type]  Type of document.
 * @param {string} [key]  Specifies the spreadsheet key/id to download.
 * @param {string}  gid   Specifies the spreadsheet grid to export.
 * @methodhttp GET
 */
exports.downloadSpreadsheet = function(args, opts) {
	var url = 'https://docs.google.com/feeds/download/{document-type}/Export';
	args = args || {};
	url = url_replace(url, args, 'exportFormat', 'str');
	url = url_replace(url, args, 'revision');
	url = url_replace(url, args, 'GData-Version', 'str', true, "3.0");
	url = url_replace(url, args, 'document-type', 'str', true, "spreadsheets");
	url = url_replace(url, args, 'key', 'str', true);
	url = url_replace(url, args, 'gid', 'str');
	return http({url:url, params:args, provider:provider}, opts);
};